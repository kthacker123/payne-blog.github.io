<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SO逆向入门实战教程十一：Shield</title>
      <link href="/2021/07/16/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%80%EF%BC%9AShield/"/>
      <url>/2021/07/16/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%80%EF%BC%9AShield/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>出于学习和研究的目的，对Shield的模拟执行和算法分析，本篇不会太过详细，只会讲解关键点。</p><h3 id="二、Unidbg-模拟执行"><a href="#二、Unidbg-模拟执行" class="headerlink" title="二、Unidbg 模拟执行"></a>二、Unidbg 模拟执行</h3><p>Shield的模拟执行并没什么难度，依照此前所述，JNItrace 就能基本解决问题。因为Shield通过拦截器去完成参数的封装，所以为了更加优雅的实现，我们在代码中引入OkHttp库</p><p><img src="https://img-blog.csdnimg.cn/20210716135000477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但这并不是必须的，只是这样做更优雅。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.article13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.SystemPropertyHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.SystemPropertyProvider;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> okio.Buffer;</span><br><span class="line"><span class="keyword">import</span> okio.BufferedSink;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.geom.RectangularShape;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xhs</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line">    <span class="keyword">private</span> Headers headers;</span><br><span class="line">    <span class="keyword">private</span> Request request;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    xhs()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xhs&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;E:\\unidbg-master\\unidbg-master\\unidbg-android\\src\\test\\resources\\example_binaries\\xhs\\xhs-armv7.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;E:\\unidbg-master\\unidbg-master\\unidbg-android\\src\\test\\resources\\example_binaries\\xhs\\libshield.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        System.out.println(<span class="string">&quot;call JNIOnLoad&quot;</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        url = <span class="string">&quot;https://edith.xiaohongshu.com/api/sns/v6/homefeed?oid=homefeed_recommend&amp;cursor_score=&amp;geo=eyJsYXRpdHVkZSI6MC4wMDAwMDAsImxvbmdpdHVkZSI6MC4wMDAwMDB9%0A&amp;trace_id=7e9cea5d-3e7c-3240-bf3d-20e221557b61&amp;note_index=0&amp;refresh_type=1&amp;client_volume=0.60&amp;preview_ad=&amp;loaded_ad=%7B%22ads_id_list%22%3A%5B%5D%7D&amp;personalization=1&amp;pin_note_id=&amp;pin_note_source=&amp;unread_begin_note_id=60da0881000000002103ef52&amp;unread_end_note_id=60e2abe5000000000102aced&amp;unread_note_count=6&quot;</span>;</span><br><span class="line"></span><br><span class="line">        request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .addHeader(<span class="string">&quot;X-B3-TraceId&quot;</span>, <span class="string">&quot;4a4a3a065c180b0f&quot;</span>)</span><br><span class="line">                .addHeader(<span class="string">&quot;xy-common-params&quot;</span>, <span class="string">&quot;fid=16254550111059c4b478ba32dc122790a4f7e9261f0e&amp;device_fingerprint=20210101000953d097cda53c248c488cadcce5ec7882880173338edc38b45d&amp;device_fingerprint1=20210101000953d097cda53c248c488cadcce5ec7882880173338edc38b45d&amp;launch_id=1625473798&amp;tz=Asia%2FShanghai&amp;channel=PMgdt19935737&amp;versionName=6.97.0.1&amp;deviceId=1d41ebdc-86dd-33ea-9ceb-e9210babd74e&amp;platform=android&amp;sid=session.1625455019284508278852&amp;identifier_flag=4&amp;t=1625473812&amp;project_id=ECFAAF&amp;build=6970181&amp;x_trace_page_current=explore_feed&amp;lang=zh-Hans&amp;app_id=ECFAAF01&amp;uis=light&quot;</span>)</span><br><span class="line">                .addHeader(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 10; MIX 2S MIUI/V12.0.2.0.QDGCNXM) Resolution/1080*2160 Version/6.97.0.1 Build/6970181 Device/(Xiaomi;MIX 2S) discover/6.97.0.1 NetType/CellNetwork&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个初始化函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callinitializeNative</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x6c11d</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个初始化函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">callinitialize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;main&quot;</span>)));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x6b801</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> number.longValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callintercept</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        DvmObject&lt;?&gt; chain = vm.resolveClass(<span class="string">&quot;okhttp3/Interceptor$Chain&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        list.add(vm.addLocalObject(chain));</span><br><span class="line">        list.add(ptr);</span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x6b9e9</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        xhs test = <span class="keyword">new</span> xhs();</span><br><span class="line">        test.callinitializeNative();</span><br><span class="line">        <span class="keyword">long</span> ptr = test.callinitialize();</span><br><span class="line">        System.out.println(<span class="string">&quot;call intercept&quot;</span>);</span><br><span class="line">        test.callintercept(ptr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; getStaticObjectField(BaseVM vm, DvmClass dvmClass, String signature) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ContextHolder-&gt;sLogger:Lcom/xingin/shield/http/ShieldLogger;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;com/xingin/shield/http/ShieldLogger&quot;</span>).newObject(signature);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ContextHolder-&gt;sDeviceId:Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;1d41ebdc-86dd-33ea-9ceb-e9210babd74e&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getStaticObjectField(vm, dvmClass, signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callVoidMethodV</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;nativeInitializeStart()V&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;nativeInitializeEnd()V&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;initializeStart()V&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;initializedEnd()V&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;buildSourceStart()V&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/RequestBody-&gt;writeTo(Lokio/BufferedSink;)V&quot;</span>: &#123;</span><br><span class="line">                BufferedSink bufferedSink = (BufferedSink) vaList.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line">                RequestBody requestBody = (RequestBody) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">if</span>(requestBody != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        requestBody.writeTo(bufferedSink);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;buildSourceEnd()V&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;calculateStart()V&quot;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;calculateStart —— 开始计算&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ShieldLogger-&gt;calculateEnd()V&quot;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;calculateEnd —— 结束计算&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.callVoidMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/nio/charset/Charset-&gt;defaultCharset()Ljava/nio/charset/Charset;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/nio/charset/Charset&quot;</span>).newObject(Charset.defaultCharset());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/Base64Helper-&gt;decode(Ljava/lang/String;)[B&quot;</span>:&#123;</span><br><span class="line">                String input = (String) vaList.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line">                <span class="keyword">byte</span>[] result = Base64.decodeBase64(input);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArray(vm, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntField</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/pm/PackageInfo-&gt;versionCode:I&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6970181</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getIntField(vm, dvmObject, signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStaticIntField</span><span class="params">(BaseVM vm, DvmClass dvmClass, String signature)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/xingin/shield/http/ContextHolder-&gt;sAppId:I&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">319115519</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getStaticIntField(vm, dvmClass, signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>).newObject(vaList.getObjectArg(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/SharedPreferences-&gt;getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span>(((StringObject) dvmObject.getValue()).getValue().equals(<span class="string">&quot;s&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;getString :&quot;</span>+vaList.getObjectArg(<span class="number">0</span>).getValue());</span><br><span class="line">                    <span class="keyword">if</span> (vaList.getObjectArg(<span class="number">0</span>).getValue().equals(<span class="string">&quot;main&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(vaList.getObjectArg(<span class="number">0</span>).getValue().equals(<span class="string">&quot;main_hmac&quot;</span>))&#123;</span><br><span class="line">                        <span class="keyword">return</span>  <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;eSwKRbpB4OfG+D8ofTHooZrXr1b0B+ZDVsxHEr7K7yTWiiVX/bZl0E8D6+6645aLIAZ0+geJrjMLyyrXA99xApWvssdRm01Cg8PRVJhEvWqyHNAS73/z0OLspXVmhaSs&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Interceptor$Chain-&gt;request()Lokhttp3/Request;&quot;</span>: &#123;</span><br><span class="line">                DvmClass clazz = vm.resolveClass(<span class="string">&quot;okhttp3/Request&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> clazz.newObject(request);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Request-&gt;url()Lokhttp3/HttpUrl;&quot;</span>: &#123;</span><br><span class="line">                DvmClass clazz = vm.resolveClass(<span class="string">&quot;okhttp3/HttpUrl&quot;</span>);</span><br><span class="line">                Request request = (Request) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> clazz.newObject(request.url());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/HttpUrl-&gt;encodedPath()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">                HttpUrl httpUrl = (HttpUrl) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, httpUrl.encodedPath());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/HttpUrl-&gt;encodedQuery()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">                HttpUrl httpUrl = (HttpUrl) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, httpUrl.encodedQuery());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Request-&gt;body()Lokhttp3/RequestBody;&quot;</span>: &#123;</span><br><span class="line">                Request request = (Request) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;okhttp3/RequestBody&quot;</span>).newObject(request.body());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Request-&gt;headers()Lokhttp3/Headers;&quot;</span>: &#123;</span><br><span class="line">                Request request = (Request) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;okhttp3/Headers&quot;</span>).newObject(request.headers());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okio/Buffer-&gt;writeString(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;&quot;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;write to my buffer:&quot;</span>+vaList.getObjectArg(<span class="number">0</span>).getValue());</span><br><span class="line">                Buffer buffer = (Buffer) dvmObject.getValue();</span><br><span class="line">                buffer.writeString(vaList.getObjectArg(<span class="number">0</span>).getValue().toString(), (Charset) vaList.getObjectArg(<span class="number">1</span>).getValue());</span><br><span class="line">                <span class="keyword">return</span> dvmObject;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Headers-&gt;name(I)Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">                Headers headers = (Headers) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, headers.name(vaList.getIntArg(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Headers-&gt;value(I)Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">                Headers headers = (Headers) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, headers.value(vaList.getIntArg(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okio/Buffer-&gt;clone()Lokio/Buffer;&quot;</span>: &#123;</span><br><span class="line">                Buffer buffer = (Buffer) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;okio/Buffer&quot;</span>).newObject(buffer.clone());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Request-&gt;newBuilder()Lokhttp3/Request$Builder;&quot;</span>: &#123;</span><br><span class="line">                Request request = (Request) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;okhttp3/Request$Builder&quot;</span>).newObject(request.newBuilder());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Request$Builder-&gt;header(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;&quot;</span>: &#123;</span><br><span class="line">                Request.Builder builder = (Request.Builder) dvmObject.getValue();</span><br><span class="line">                builder.header(vaList.getObjectArg(<span class="number">0</span>).getValue().toString(), vaList.getObjectArg(<span class="number">1</span>).getValue().toString());</span><br><span class="line">                <span class="keyword">return</span> dvmObject;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Request$Builder-&gt;build()Lokhttp3/Request;&quot;</span>: &#123;</span><br><span class="line">                Request.Builder builder = (Request.Builder) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;okhttp3/Request&quot;</span>).newObject(builder.build());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Interceptor$Chain-&gt;proceed(Lokhttp3/Request;)Lokhttp3/Response;&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;okhttp3/Response&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; newObjectV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okio/Buffer-&gt;&lt;init&gt;()V&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> dvmClass.newObject(<span class="keyword">new</span> Buffer());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.newObjectV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">callIntMethodV</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Headers-&gt;size()I&quot;</span>:</span><br><span class="line">                Headers headers = (Headers) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> headers.size();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okhttp3/Response-&gt;code()I&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okio/Buffer-&gt;read([B)I&quot;</span>:</span><br><span class="line">                Buffer buffer = (Buffer) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> buffer.read((<span class="keyword">byte</span>[]) vaList.getObjectArg(<span class="number">0</span>).getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callIntMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>全部的内容都在前述文章中有讲述。</p><h3 id="三、Unidbg算法还原"><a href="#三、Unidbg算法还原" class="headerlink" title="三、Unidbg算法还原"></a>三、Unidbg算法还原</h3><p>网上也有不少Shield的算法还原文章，一些是IDA F5扣下来伪代码，所以我们有必要再说说。算法用到了现代密码学算法(AES+HMAC MD5)来保证强度，以及古典加密(查表替换，类似于凯撒密码之类的)来保证独特性。其中 AES 和 HMAC MD5 都经过了魔改，代码本身没有经过混淆，这极大的降低了难度，但开发者对密码学显然有一定了解，算法魔改的很好。MD5主要修改了IV(ABCD颠倒)、运算中循环左移的位数、K值、运算的顺序，在我见过的样本里，是是对MD5的魔改程度很彻底的了，粒度也很细。</p><p>如下是Python版本的代码，感兴趣的可以和正常MD5进行对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">SV = [<span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>,</span><br><span class="line">      <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>, <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>,</span><br><span class="line">      <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>,</span><br><span class="line">      <span class="number">0x49b40821</span>, <span class="number">0xf61e2562</span>&amp;<span class="number">0xFF00FF00</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>&amp; <span class="number">0xFF0011FF</span>,</span><br><span class="line">      <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>, <span class="number">0x21e1cde6</span>,</span><br><span class="line">      <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span> &amp; <span class="number">0xFF110011</span>,</span><br><span class="line">      <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>, <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>,</span><br><span class="line">      <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">      <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>,</span><br><span class="line">      <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>, <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>,</span><br><span class="line">      <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>,</span><br><span class="line">      <span class="number">0x85845dd1</span>, <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>,</span><br><span class="line">      <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据ascil编码把字符转成对应的二进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binvalue</span>(<span class="params">val, bitsize</span>):</span></span><br><span class="line">    binval = <span class="built_in">bin</span>(val)[<span class="number">2</span>:] <span class="keyword">if</span> <span class="built_in">isinstance</span>(val, <span class="built_in">int</span>) <span class="keyword">else</span> <span class="built_in">bin</span>(<span class="built_in">ord</span>(val))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binval) &gt; bitsize:</span><br><span class="line">        <span class="keyword">raise</span> (<span class="string">&quot;binary value larger than the expected size&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(binval) &lt; bitsize:</span><br><span class="line">        binval = <span class="string">&quot;0&quot;</span> + binval</span><br><span class="line">    <span class="keyword">return</span> binval</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_bit_array</span>(<span class="params">text</span>):</span></span><br><span class="line">    array = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        binval = binvalue(char, <span class="number">8</span>)</span><br><span class="line">        array.extend([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>(binval)])</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环左移</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leftCircularShift</span>(<span class="params">k, bits</span>):</span></span><br><span class="line">    bits = bits % <span class="number">32</span></span><br><span class="line">    k = k % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    upper = (k &lt;&lt; bits) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    result = upper | (k &gt;&gt; (<span class="number">32</span> - (bits)))</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blockDivide</span>(<span class="params">block, chunks</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    size = <span class="built_in">len</span>(block) // chunks</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, chunks):</span><br><span class="line">        result.append(<span class="built_in">int</span>.from_bytes(block[i * size:(i + <span class="number">1</span>) * size], byteorder=<span class="string">&quot;little&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># F函数作用于“比特位”上</span></span><br><span class="line"><span class="comment"># if x then y else z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    compute = ((X &amp; Y) | ((~X) &amp; Z))</span><br><span class="line">    <span class="keyword">return</span> compute</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if z then x else y</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">G</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((X &amp; Z) | (Y &amp; (~Z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if X = Y then Z else ~Z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">H</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (X ^ Y ^ Z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">I</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (Y ^ (X | (~Z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四个F函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FF</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    xhsTemp = leftCircularShift((a + F(b, c, d) + M + t), s)</span><br><span class="line">    result = b + xhsTemp</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GG</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + G(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HH</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + H(b, c, d) + M + t), s)</span><br><span class="line">    <span class="comment"># print(hex(leftCircularShift((a + H(b, c, d) + M + t), s)))</span></span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HH1</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + H(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">II</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + I(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt8</span>(<span class="params">num</span>):</span></span><br><span class="line">    bighex = <span class="string">&quot;&#123;0:08x&#125;&quot;</span>.<span class="built_in">format</span>(num)</span><br><span class="line">    binver = binascii.unhexlify(bighex)</span><br><span class="line">    result = <span class="string">&quot;&#123;0:08x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>.from_bytes(binver, byteorder=<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算比特长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitlen</span>(<span class="params">bitstring</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(bitstring) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5sum</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="comment"># 计算比特长度，如果内容过长，64个比特放不下。就取低64bit。</span></span><br><span class="line">    msgLen = bitlen(msg) % (<span class="number">2</span> ** <span class="number">64</span>)</span><br><span class="line">    <span class="comment"># 先填充一个0x80，其实是先填充一个1，后面跟对应个数的0，因为一个明文的编码至少需要8比特，所以直接填充 0b10000000即0x80</span></span><br><span class="line">    msg = msg + <span class="string">b&#x27;\x80&#x27;</span>  <span class="comment"># 0x80 = 1000 0000</span></span><br><span class="line">    zeroPad = (<span class="number">448</span> - (msgLen + <span class="number">8</span>) % <span class="number">512</span>) % <span class="number">512</span></span><br><span class="line">    zeroPad //= <span class="number">8</span></span><br><span class="line">    <span class="comment"># msg = msg + b&#x27;\x00&#x27; * zeroPad + bytes.fromhex(&#x27;4022000000000000&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(msgLen)</span><br><span class="line">    msg = msg + <span class="string">b&#x27;\x00&#x27;</span> * zeroPad + msgLen.to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="comment"># 计算循环轮数，512个为一轮</span></span><br><span class="line">    msgLen = bitlen(msg)</span><br><span class="line">    iterations = msgLen // <span class="number">512</span></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    <span class="comment"># 算法魔改的第一个点，也是最明显的点</span></span><br><span class="line"></span><br><span class="line">    D = <span class="number">0x67452301</span></span><br><span class="line">    C = <span class="number">0xefcdab89</span></span><br><span class="line">    B = <span class="number">0x98badcfe</span></span><br><span class="line">    A = <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># main loop</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">        a = A</span><br><span class="line">        b = B</span><br><span class="line">        c = C</span><br><span class="line">        d = D</span><br><span class="line">        block = msg[i * <span class="number">64</span>:(i + <span class="number">1</span>) * <span class="number">64</span>]</span><br><span class="line">        M = blockDivide(block, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rounds</span></span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">0</span>], <span class="number">6</span>, SV[<span class="number">0</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">1</span>], <span class="number">13</span>, SV[<span class="number">1</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">2</span>], <span class="number">17</span>, SV[<span class="number">2</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">3</span>], <span class="number">21</span>, SV[<span class="number">3</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">4</span>], <span class="number">7</span>, SV[<span class="number">4</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">5</span>], <span class="number">12</span>, SV[<span class="number">5</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">6</span>], <span class="number">17</span>, SV[<span class="number">6</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">7</span>], <span class="number">20</span>, SV[<span class="number">7</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">8</span>], <span class="number">7</span>, SV[<span class="number">8</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">9</span>], <span class="number">12</span>, SV[<span class="number">9</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">10</span>], <span class="number">16</span>, SV[<span class="number">10</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">11</span>], <span class="number">22</span>, SV[<span class="number">11</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">12</span>], <span class="number">7</span>, SV[<span class="number">12</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">13</span>], <span class="number">13</span>, SV[<span class="number">13</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">14</span>], <span class="number">17</span>, SV[<span class="number">14</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">15</span>], <span class="number">22</span>, SV[<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">1</span>], <span class="number">5</span>, SV[<span class="number">16</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">6</span>], <span class="number">9</span>, SV[<span class="number">17</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">11</span>], <span class="number">14</span>, SV[<span class="number">18</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">0</span>], <span class="number">20</span>, SV[<span class="number">19</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">5</span>], <span class="number">5</span>, SV[<span class="number">20</span>]) <span class="comment"># 21 step</span></span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">10</span>], <span class="number">9</span>, SV[<span class="number">21</span>]) <span class="comment"># 22 step</span></span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">15</span>], <span class="number">14</span>, SV[<span class="number">22</span>]) <span class="comment"># 23 step</span></span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">4</span>], <span class="number">20</span>, SV[<span class="number">23</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">9</span>], <span class="number">5</span>, SV[<span class="number">24</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">14</span>], <span class="number">9</span>, SV[<span class="number">25</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">3</span>], <span class="number">14</span>, SV[<span class="number">26</span>]) <span class="comment"># 27 step</span></span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">8</span>], <span class="number">20</span>, SV[<span class="number">27</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">13</span>], <span class="number">5</span>, SV[<span class="number">28</span>]) <span class="comment"># 29 step</span></span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">2</span>], <span class="number">9</span>, SV[<span class="number">29</span>]) <span class="comment"># 30 step</span></span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">7</span>], <span class="number">14</span>, SV[<span class="number">30</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">12</span>], <span class="number">20</span>, SV[<span class="number">31</span>])</span><br><span class="line"></span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">5</span>], <span class="number">4</span>, SV[<span class="number">32</span>]) <span class="comment"># 33 step</span></span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">8</span>], <span class="number">11</span>, SV[<span class="number">33</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">11</span>], <span class="number">16</span>, SV[<span class="number">34</span>])</span><br><span class="line"></span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">14</span>], <span class="number">23</span>, SV[<span class="number">35</span>]) <span class="comment"># 36</span></span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">1</span>], <span class="number">4</span>, SV[<span class="number">36</span>]) <span class="comment"># 37</span></span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">4</span>], <span class="number">11</span>, SV[<span class="number">37</span>]) <span class="comment"># 38</span></span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">7</span>], <span class="number">16</span>, SV[<span class="number">38</span>]) <span class="comment"># 39</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正常的第40步</span></span><br><span class="line">        <span class="comment"># b = HH(b, c, d, a, M[10], 23, SV[39])</span></span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">13</span>], <span class="number">4</span>, SV[<span class="number">40</span>]) <span class="comment"># 第40步</span></span><br><span class="line"></span><br><span class="line">        b = HH(b, c, a, d, M[<span class="number">10</span>], <span class="number">23</span>, SV[<span class="number">39</span>]) <span class="comment"># 第41步</span></span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">3</span>], <span class="number">16</span>, SV[<span class="number">42</span>]) <span class="comment"># 第42步</span></span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">0</span>], <span class="number">11</span>, SV[<span class="number">41</span>]) <span class="comment"># 43</span></span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">6</span>], <span class="number">23</span>, SV[<span class="number">43</span>]) <span class="comment"># 44</span></span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">9</span>], <span class="number">4</span>, SV[<span class="number">44</span>]) <span class="comment"># 45</span></span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">12</span>], <span class="number">11</span>, SV[<span class="number">45</span>]) <span class="comment"># 46</span></span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">15</span>], <span class="number">16</span>, SV[<span class="number">46</span>]) <span class="comment"># 47</span></span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">2</span>], <span class="number">23</span>, SV[<span class="number">47</span>]) <span class="comment"># 48</span></span><br><span class="line"></span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">0</span>], <span class="number">6</span>, SV[<span class="number">48</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">7</span>], <span class="number">10</span>, SV[<span class="number">49</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">14</span>], <span class="number">15</span>, SV[<span class="number">50</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">5</span>], <span class="number">21</span>, SV[<span class="number">51</span>]) <span class="comment"># 52</span></span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">12</span>], <span class="number">6</span>, SV[<span class="number">52</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">3</span>], <span class="number">10</span>, SV[<span class="number">53</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">10</span>], <span class="number">15</span>, SV[<span class="number">54</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">1</span>], <span class="number">21</span>, SV[<span class="number">55</span>]) <span class="comment">#56</span></span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">8</span>], <span class="number">6</span>, SV[<span class="number">56</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">15</span>], <span class="number">10</span>, SV[<span class="number">57</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">6</span>], <span class="number">15</span>, SV[<span class="number">58</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">13</span>], <span class="number">21</span>, SV[<span class="number">59</span>]) <span class="comment"># 60</span></span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">4</span>], <span class="number">6</span>, SV[<span class="number">60</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">11</span>], <span class="number">10</span>, SV[<span class="number">61</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">2</span>], <span class="number">15</span>, SV[<span class="number">62</span>])<span class="comment"># 63</span></span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">9</span>], <span class="number">21</span>, SV[<span class="number">63</span>])</span><br><span class="line">        A = (A + a) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        B = (B + b) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        C = (C + c) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        D = (D + d) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    result = fmt8(A) + fmt8(B) + fmt8(C) + fmt8(D)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;d7ab505697331bfab20a1d121157e174b2a4939f375fe5a9c1aeb06f8118c65264470147c736f2a298e66cf40589c1d57852aa3469596f9e755a0752c50297038a06f86db83b6932f1d4a55bfdeb79ac&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;plainText: &quot;</span>, data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span>, md5sum(data))</span><br></pre></td></tr></table></figure><p>第二个就是AES的魔改，AES在工程中，主要有三个思路实现</p><ul><li>标准实现（标准S盒和各种逆S盒）</li><li>表合并实现 （空间换时间，将运算转变成查表）</li><li>白盒AES（难、复杂）<br>其中三种实现之间是有密切联系的，AES每轮的具体运算有四个步骤，列混淆、S盒替换、和密钥异或 以及循环左移。标准实现就是老老实实去做每一步，标准AES的代码最好懂，也好排查问题，逆向也是它最好分析。表合并法将列混淆、循环左移、S盒替换这三步整合到一起去，但是AES最后一轮并不是完整的，所以最后一轮还是类似于标准实现。白盒AES简单理解就是四步合一，将密钥埋藏在了加密中，防止人直接得到密钥。</li></ul><p>从标准实现到表合并发，是为了提高运算速度，代价是原本SO里只要S盒和逆S盒，现在要多出八个大的合并表。从前两种到白盒AES，则是为了隐藏密钥，应对反编译。</p><p>Shield采用的是表合并实现的AES，仔细瞧瞧的话，感觉样本像是改的OpenSSL的代码。AES魔改点选择的也很隐蔽，修改了密钥扩展中需要用到的Rcon，硬编码在了样本中，非常的好。<br><img src="https://img-blog.csdnimg.cn/20210716135403553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>除此之外并没有别的什么很有意思了。HMAC-MD5中的HMAC方法也是标准的。</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程十：SimpleSign</title>
      <link href="/2021/07/01/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%8D%81%EF%BC%9ASimpleSign/"/>
      <url>/2021/07/01/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%8D%81%EF%BC%9ASimpleSign/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>这是系列的第十篇，通过该样本可以充分学习如何在Unidbg中补充环境。朋友zh3nu11和我共同完成了这篇内容，感谢。</p><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210701202443320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先我们发现了init函数，它应该就是SO的初始化函数，其余的函数看名字也都很易懂。</p><h3 id="三、Init-模拟执行"><a href="#三、Init-模拟执行" class="headerlink" title="三、Init 模拟执行"></a>三、Init 模拟执行</h3><p>我们首先用Unidbg跑通Init初始化函数，先搭建基本框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.article10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtil</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;base.apk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;libscmain.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SecurityUtil test = <span class="keyword">new</span> SecurityUtil();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行产生如下报错<br><img src="https://img-blog.csdnimg.cn/20210701202602592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>红框即报错原因，内存错误，箭头所指是根本原因，样本中open了这两个文件，但找不到，所以我们需要补充这两个文件。</p><p>我们需要逐一做理解</p><p>1.proc/23638/xxx 是什么</p><blockquote><p>proc 文件系统由内核提供，它是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。<strong>系统中当前运行的每一个进程都有对应的一个目录在 proc 下，以进程的 PID 号为目录名，它们是读取进程信息的接口。</strong></p></blockquote><p>此处的23638就是Unidbg中APP的当前进程，每次运行，Unidbg都会随机化给一个进程PID，就像Linux系统中一样。</p><p><img src="https://img-blog.csdnimg.cn/20210701202626404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我修改了src/main/java/com/github/unidbg/AbstractEmulator.java 中的如图位置，使PID固定，因为PID不停变动可能会影响后续分析，但这不是必须的操作。<br><img src="https://img-blog.csdnimg.cn/20210701202643545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.此处读取cmdline做什么</p><p>在Android系统中，进程的cmdline返回应用的进程名。那么此处的目的就很明显了，验证环境是否是”自己“的环境，防止应用被重打包。</p><p>3.在Unidbg中如何填补</p><p>proc 文件系统是伪文件系统，其目录下的所有文件，读写和正常文件没差别，所以在Unidbg中做好文件的重定向就行了。</p><p>三步走，实现IOResolver接口，注册接口，实现resolve方法并补充上我们的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.article10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.FileResult;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.IOResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.file.ByteArrayFileIO;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtil</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> <span class="keyword">implements</span> <span class="title">IOResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        emulator.getSyscallHandler().addIOResolver(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;base.apk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;libscmain.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pid = emulator.getPid();</span><br><span class="line">        System.out.println(<span class="string">&quot;APP pid:&quot;</span>+pid);</span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SecurityUtil test = <span class="keyword">new</span> SecurityUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span>+emulator.getPid()+<span class="string">&quot;/cmdline&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;ctrip.android.view&quot;</span>.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那status呢？该文件包含该进程的众多信息：可执行文件名、当前状态、PID 和 PPID、实际及有效的 UID 和 GID、内存使用情况、以及其他。我们可以随便看一个</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root@hammerhead:/proc/<span class="number">9884</span> <span class="comment"># cat status</span></span><br><span class="line">Name:adb</span><br><span class="line">State:S (sleeping)</span><br><span class="line">Tgid:<span class="number">9884</span></span><br><span class="line">Pid:<span class="number">9884</span></span><br><span class="line">PPid:<span class="number">1</span></span><br><span class="line">TracerPid:<span class="number">0</span></span><br><span class="line">Uid:<span class="number">2000</span><span class="number">2000</span><span class="number">2000</span><span class="number">2000</span></span><br><span class="line">Gid:<span class="number">2000</span><span class="number">2000</span><span class="number">2000</span><span class="number">2000</span></span><br><span class="line">FDSize:<span class="number">32</span></span><br><span class="line">Groups:<span class="number">1003</span> <span class="number">1004</span> <span class="number">1007</span> <span class="number">1011</span> <span class="number">1015</span> <span class="number">1028</span> <span class="number">3001</span> <span class="number">3002</span> <span class="number">3003</span> <span class="number">3006</span> </span><br><span class="line">VmPeak:    <span class="number">4012</span> kB</span><br><span class="line">VmSize:    <span class="number">2992</span> kB</span><br><span class="line">VmLck:       <span class="number">0</span> kB</span><br><span class="line">VmPin:       <span class="number">0</span> kB</span><br><span class="line">VmHWM:     <span class="number">880</span> kB</span><br><span class="line">VmRSS:     <span class="number">880</span> kB</span><br><span class="line">VmData:    <span class="number">1196</span> kB</span><br><span class="line">VmStk:     <span class="number">136</span> kB</span><br><span class="line">VmExe:     <span class="number">104</span> kB</span><br><span class="line">VmLib:    <span class="number">1304</span> kB</span><br><span class="line">VmPTE:       <span class="number">8</span> kB</span><br><span class="line">VmSwap:       <span class="number">0</span> kB</span><br><span class="line">Threads:<span class="number">2</span></span><br><span class="line">SigQ:<span class="number">1</span>/<span class="number">12274</span></span><br><span class="line">SigPnd:<span class="number">0000000000000000</span></span><br><span class="line">ShdPnd:<span class="number">0000000000000000</span></span><br><span class="line">SigBlk:<span class="number">0000000000000000</span></span><br><span class="line">SigIgn:<span class="number">0000000000001000</span></span><br><span class="line">SigCgt:<span class="number">000000000000</span>a4f8</span><br><span class="line">CapInh:<span class="number">0000000000000000</span></span><br><span class="line">CapPrm:<span class="number">0000000000000000</span></span><br><span class="line">CapEff:<span class="number">0000000000000000</span></span><br><span class="line">CapBnd:fffffff0000000c0</span><br><span class="line">Cpus_allowed:f</span><br><span class="line">Cpus_allowed_list:<span class="number">0</span><span class="literal">-3</span></span><br><span class="line">voluntary_ctxt_switches:<span class="number">7</span></span><br><span class="line">nonvoluntary_ctxt_switches:<span class="number">46</span></span><br></pre></td></tr></table></figure><p>一般而言，样本检测status是为了其中的TracerPid字段，<code>TracerPid</code>反调试的原理就是检测这个字段是否为0，为0说明没有被调试，不为0说明正在被调试，检测调试器直接退出就可以达到反调试的效果。</p><p>所以我们常常这么处理——只返回TracerPid字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span>+emulator.getPid()+<span class="string">&quot;/cmdline&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;ctrip.android.view&quot;</span>.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span> + emulator.getPid() + <span class="string">&quot;/status&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FileResult.&lt;AndroidFileIO&gt;success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;TracerPid:\t0\n&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有人可能会担心不保险，万一其他字段也被用到了呢，样本找不到这些字段导向错误逻辑怎么办？这个情况是存在的，我们马上就说，先运行看看效果，emm，似乎跑通了。</p><p><img src="https://img-blog.csdnimg.cn/20210701202715308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们终于可以开始执行init函数了，但我打算先看看这个getNameByPid函数。</p><p><img src="https://img-blog.csdnimg.cn/20210701202726509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先Frida Call 测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callgetPid</span>(<span class="params">pid</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> securityUtil = <span class="literal">null</span>;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;ctrip.android.security.SecurityUtil&quot;</span>, &#123;</span><br><span class="line">            <span class="comment">//枚举时调用</span></span><br><span class="line">            <span class="attr">onMatch</span>:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//打印实例</span></span><br><span class="line">                securityUtil = instance;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find instance&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//枚举完成后调用</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="keyword">var</span> result = securityUtil.getNameByPid(pid);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下PID<br><img src="https://img-blog.csdnimg.cn/20210701202742147.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210701202752701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果是ip.android.view。Unidbg主动调用测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.article10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.FileResult;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.IOResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.linux.AndroidFileIO;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DvmObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.file.ByteArrayFileIO;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtil</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> <span class="keyword">implements</span> <span class="title">IOResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        emulator.getSyscallHandler().addIOResolver(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;base.apk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(libscmain.so<span class="string">&quot;), true);</span></span><br><span class="line"><span class="string">        module = dm.getModule();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        int pid = emulator.getPid();</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>APP pid:<span class="string">&quot;+pid);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        vm.setJni(this);</span></span><br><span class="line"><span class="string">        vm.setVerbose(true);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        dm.callJNI_OnLoad(emulator);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    public void callgetNameByPid()&#123;</span></span><br><span class="line"><span class="string">        List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);</span></span><br><span class="line"><span class="string">        list.add(vm.getJNIEnv());</span></span><br><span class="line"><span class="string">        list.add(0);</span></span><br><span class="line"><span class="string">        list.add(emulator.getPid());</span></span><br><span class="line"><span class="string">        Number number = module.callFunction(emulator, 0xee01, list.toArray())[0];</span></span><br><span class="line"><span class="string">        String name = vm.getObject(number.intValue()).getValue().toString();</span></span><br><span class="line"><span class="string">        System.out.println(name);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="string">        SecurityUtil test = new SecurityUtil();</span></span><br><span class="line"><span class="string">        test.callgetNameByPid();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public FileResult resolve(Emulator emulator, String pathname, int oflags) &#123;</span></span><br><span class="line"><span class="string">        if ((&quot;</span>proc/<span class="string">&quot;+emulator.getPid()+&quot;</span>/cmdline<span class="string">&quot;).equals(pathname)) &#123;</span></span><br><span class="line"><span class="string">            return FileResult.success(new ByteArrayFileIO(oflags, pathname, &quot;</span>ctrip.android.view<span class="string">&quot;.getBytes()));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if ((&quot;</span>proc/<span class="string">&quot; + emulator.getPid() + &quot;</span>/status<span class="string">&quot;).equals(pathname)) &#123;</span></span><br><span class="line"><span class="string">            return FileResult.&lt;AndroidFileIO&gt;success(new ByteArrayFileIO(oflags, pathname, &quot;</span>TracerPid:\t0\n<span class="string">&quot;.getBytes()));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return null;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210701202828940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果是0。实际上，这就是status 没补齐全带来的锅。这是APP真实的status</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>|bullhead:/proc/<span class="number">19929</span> <span class="comment"># cat status</span></span><br><span class="line">Name:   ip.android.view</span><br><span class="line">State:  <span class="built_in">R</span> (running)</span><br><span class="line">Tgid:   <span class="number">19929</span></span><br><span class="line">Pid:    <span class="number">19929</span></span><br><span class="line">PPid:   <span class="number">17506</span></span><br><span class="line">TracerPid:      <span class="number">0</span></span><br><span class="line">Uid:    <span class="number">10148</span>   <span class="number">10148</span>   <span class="number">10148</span>   <span class="number">10148</span></span><br><span class="line">Gid:    <span class="number">10148</span>   <span class="number">10148</span>   <span class="number">10148</span>   <span class="number">10148</span></span><br><span class="line">FDSize: <span class="number">512</span></span><br><span class="line">Groups: <span class="number">3002</span> <span class="number">3003</span> <span class="number">9997</span> <span class="number">20148</span> <span class="number">50148</span></span><br><span class="line">VmPeak:  <span class="number">2224800</span> kB</span><br><span class="line">VmSize:  <span class="number">2180604</span> kB</span><br><span class="line">VmLck:         <span class="number">0</span> kB</span><br><span class="line">VmPin:         <span class="number">0</span> kB</span><br><span class="line">VmHWM:    <span class="number">354920</span> kB</span><br><span class="line">VmRSS:    <span class="number">322600</span> kB</span><br><span class="line">VmData:   <span class="number">375124</span> kB</span><br><span class="line">VmStk:      <span class="number">8192</span> kB</span><br><span class="line">VmExe:        <span class="number">20</span> kB</span><br><span class="line">VmLib:    <span class="number">209888</span> kB</span><br><span class="line">VmPTE:      <span class="number">2024</span> kB</span><br><span class="line">VmSwap:     <span class="number">2952</span> kB</span><br><span class="line">Threads:        <span class="number">122</span></span><br><span class="line">SigQ:   <span class="number">2</span>/<span class="number">6517</span></span><br><span class="line">SigPnd: <span class="number">0000000000000000</span></span><br><span class="line">ShdPnd: <span class="number">0000000000000000</span></span><br><span class="line">SigBlk: <span class="number">0000000000001204</span></span><br><span class="line">SigIgn: <span class="number">0000000000000000</span></span><br><span class="line">SigCgt: <span class="number">00000006400096</span><span class="built_in">fc</span></span><br><span class="line">CapInh: <span class="number">0000000000000000</span></span><br><span class="line">CapPrm: <span class="number">0000000000000000</span></span><br><span class="line">CapEff: <span class="number">0000000000000000</span></span><br><span class="line">CapBnd: <span class="number">0000000000000000</span></span><br><span class="line">CapAmb: <span class="number">0000000000000000</span></span><br><span class="line">Seccomp:        <span class="number">2</span></span><br><span class="line">Cpus_allowed:   <span class="number">0</span>f</span><br><span class="line">Cpus_allowed_list:      <span class="number">0</span><span class="literal">-3</span></span><br><span class="line">Mems_allowed:   <span class="number">1</span></span><br><span class="line">Mems_allowed_list:      <span class="number">0</span></span><br><span class="line">voluntary_ctxt_switches:        <span class="number">123395</span></span><br><span class="line">nonvoluntary_ctxt_switches:     <span class="number">84141</span></span><br></pre></td></tr></table></figure><p>样本正是读取其中的Name，所以Unidbg补环境一定要心细和谨慎，处处可能出问题。看一下修改后的重定向方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span>+emulator.getPid()+<span class="string">&quot;/cmdline&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">           <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;ctrip.android.view&quot;</span>.getBytes()));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span> + emulator.getPid() + <span class="string">&quot;/status&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">           <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, (<span class="string">&quot;Name:   ip.android.view\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;State:  R (running)\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Tgid:   &quot;</span>+emulator.getPid()+<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Pid:    &quot;</span>+emulator.getPid()+<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;PPid:   17506\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;TracerPid:      0\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Uid:    10148   10148   10148   10148\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Gid:    10148   10148   10148   10148\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;FDSize: 512\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Groups: 3002 3003 9997 20148 50148\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmPeak:  2224800 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmSize:  2185240 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmLck:         0 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmPin:         0 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmHWM:    354920 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmRSS:    324572 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmData:   379340 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmStk:      8192 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmExe:        20 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmLib:    209888 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmPTE:      2020 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;VmSwap:     3012 kB\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Threads:        127\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;SigQ:   2/6517\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;SigPnd: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;ShdPnd: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;SigBlk: 0000000000001204\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;SigIgn: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;SigCgt: 00000006400096fc\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;CapInh: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;CapPrm: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;CapEff: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;CapBnd: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;CapAmb: 0000000000000000\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Seccomp:        2\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Cpus_allowed:   0f\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Cpus_allowed_list:      0-3\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Mems_allowed:   1\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;Mems_allowed_list:      0\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;voluntary_ctxt_switches:        21102\n&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;nonvoluntary_ctxt_switches:     20849&quot;</span>).getBytes()));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来步入正题——执行init方法！增改内容如下，并运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(vm.getJNIEnv());</span><br><span class="line">    list.add(<span class="number">0</span>);</span><br><span class="line">    DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);<span class="comment">// context</span></span><br><span class="line">    list.add(vm.addLocalObject(context));</span><br><span class="line">    <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x36a85</span>, list.toArray());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SecurityUtil test = <span class="keyword">new</span> SecurityUtil();</span><br><span class="line">    test.callInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210701203037380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>补JAVA环境是Unidbg中的基础活，但它是有技巧的，善用JNITrace可以补的又快又好，比如本篇的Unidbg环境，就是在1h内补好的。如果补环境有问题或者不会补，欢迎评论区或者课上交流讨论。</p><p>见招拆招补充几个后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/os/Environment-&gt;getExternalStorageDirectory()Ljava/io/File;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/io/File&quot;</span>).newObject(signature);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethod(vm, dvmClass, signature, varArg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethod(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/io/File-&gt;getPath()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;PATH:&quot;</span>+dvmObject.getValue());</span><br><span class="line">            <span class="keyword">if</span>(dvmObject.getValue().equals(<span class="string">&quot;android/os/Environment-&gt;getExternalStorageDirectory()Ljava/io/File;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/mnt/sdcard&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dvmObject.getValue()==<span class="string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/data/data/ctrip.android.view/files&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getPackageResourcePath()Ljava/lang/String;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/data/app/ctrip.android.view-fM4xyjk_eygpJsiITNW4JA==/base.apk&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/io/File&quot;</span>).newObject(signature);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getAssets()Landroid/content/res/AssetManager;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AssetManager(vm, signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错了，这次看不出啥明显错误<br><img src="https://img-blog.csdnimg.cn/20210701203056500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">日志全开再看看，好像更迷糊了<br><img src="https://img-blog.csdnimg.cn/20210701203115971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但其实这个问题我们早就讲过了，Android中通过libandroid.so对Assets资源文件进行操作，日志中可以看到”getAssets“等字眼，但是由于libandroid.so的依赖SO太多了，Unidbg很难一一处理，所以资源文件相关的处理会报错。为此Unidbg做了一个折中的解决防范——可以自己注册虚拟模块，或者叫虚拟SO，libandroid.so已经由作者实现了，实现了常用的几个Assets操作的API。只用加上这一行就行，需要注意必须在样本SO之前加载或者叫注册进去</p><p><img src="https://img-blog.csdnimg.cn/20210701203136363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续运行，为什么还报错</p><p><img src="https://img-blog.csdnimg.cn/20210701203150510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>是这样的，样本在通过虚拟SO读取资源文件，资源的读取有四种模式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/** Available access modes <span class="keyword">for</span> opening assets with &#123;@link AAssetManager_open&#125; */</span><br><span class="line"><span class="class"><span class="keyword">enum</span></span> &#123;</span><br><span class="line">    /** No specific information about how <span class="keyword">data</span> will be accessed. **/</span><br><span class="line">    AASSET_MODE_UNKNOWN      = <span class="number">0</span>,</span><br><span class="line">    /** Read chunks, and seek forward and backward. */</span><br><span class="line">    AASSET_MODE_RANDOM       = <span class="number">1</span>,</span><br><span class="line">    /** Read sequentially, with an occasional forward seek. */</span><br><span class="line">    AASSET_MODE_STREAMING    = <span class="number">2</span>,</span><br><span class="line">    /** Caller plans to ask <span class="keyword">for</span> a <span class="built_in">read-only</span> buffer with all <span class="keyword">data</span>. */</span><br><span class="line">    AASSET_MODE_BUFFER       = <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但作者只实现了模式1和2，而此处使用mode 0。mode 0 没有啥特殊处理要做，我们直接合并入mode 2和3的逻辑即可。<br><img src="https://img-blog.csdnimg.cn/20210701203227866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>继续运行，即已经过了这个坑。有的人可能会困惑，Native层读写资源文件做什么？其实这是常见做法，比如把key编码进资源文件的一张图片里，Native层去读取这个资源文件获取key。</p><p>下面就是继续补JAVA环境，使用JNItrace辅助，飞速补完。</p><p><img src="https://img-blog.csdnimg.cn/20210701203244136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>补完后代码整体长这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.article10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.FileResult;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.IOResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.linux.AndroidFileIO;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.AssetManager;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.file.ByteArrayFileIO;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.virtualmodule.android.AndroidModule;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtil</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> <span class="keyword">implements</span> <span class="title">IOResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        emulator.getSyscallHandler().addIOResolver(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;base.apk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> AndroidModule(emulator, vm).register(memory);</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;libscmain.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pid = emulator.getPid();</span><br><span class="line">        System.out.println(<span class="string">&quot;APP pid:&quot;</span>+pid);</span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callgetNameByPid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(emulator.getPid());</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xee01</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String name = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x36a85</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.unix.UnixSyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.AbstractEmulator&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.DalvikVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.BaseVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        SecurityUtil test = <span class="keyword">new</span> SecurityUtil();</span><br><span class="line">        test.callInit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/os/Environment-&gt;getExternalStorageDirectory()Ljava/io/File;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/io/File&quot;</span>).newObject(signature);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;okio/zz-&gt;b(I)Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">int</span> key = varArg.getInt(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;353626076466627&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;8cff8823cf19b5ec&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">101</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;25483&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">103</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;1920*1080&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">104</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">102</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;17637&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">105</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;WIFI&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">106</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;0.0.0.0:0&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">8</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;0.0.0.0:0&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">9</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;00:00:00:00:00:00&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">107</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;[full-100]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">108</span>:&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;78&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;okio/zz-&gt;b(I) Key:&quot;</span>+key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/net/NetworkInterface-&gt;getByName(Ljava/lang/String;)Ljava/net/NetworkInterface;&quot;</span>:&#123;</span><br><span class="line">                String name = <span class="keyword">null</span>;</span><br><span class="line">                DvmObject&lt;?&gt; namedvm = varArg.getObject(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(namedvm!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    name = (String) namedvm.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/net/NetworkInterface&quot;</span>).newObject(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethod(vm, dvmClass, signature, varArg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethod(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/io/File-&gt;getPath()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;PATH:&quot;</span>+dvmObject.getValue());</span><br><span class="line">                <span class="keyword">if</span>(dvmObject.getValue().equals(<span class="string">&quot;android/os/Environment-&gt;getExternalStorageDirectory()Ljava/io/File;&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/mnt/sdcard&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dvmObject.getValue()==<span class="string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/data/data/ctrip.android.view/files&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getPackageResourcePath()Ljava/lang/String;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/data/app/ctrip.android.view-fM4xyjk_eygpJsiITNW4JA==/base.apk&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;java/io/File&quot;</span>).newObject(signature);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getAssets()Landroid/content/res/AssetManager;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AssetManager(vm, signature);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/net/NetworkInterface-&gt;getHardwareAddress()[B&quot;</span>:</span><br><span class="line">                <span class="keyword">byte</span>[] result = hexStringToByteArray(<span class="string">&quot;64BC0C65AA1E&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArray(vm, result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStringToByteArray(String s) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[len / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">            data[i / <span class="number">2</span>] = (<span class="keyword">byte</span>) ((Character.digit(s.charAt(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">                    + Character.digit(s.charAt(i+<span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span>+emulator.getPid()+<span class="string">&quot;/cmdline&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;ctrip.android.view&quot;</span>.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;proc/&quot;</span> + emulator.getPid() + <span class="string">&quot;/status&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, (<span class="string">&quot;Name:   ip.android.view\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;State:  R (running)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Tgid:   &quot;</span>+emulator.getPid()+<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Pid:    &quot;</span>+emulator.getPid()+<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;PPid:   17506\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;TracerPid:      0\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Uid:    10148   10148   10148   10148\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Gid:    10148   10148   10148   10148\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;FDSize: 512\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Groups: 3002 3003 9997 20148 50148\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmPeak:  2224800 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmSize:  2185240 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmLck:         0 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmPin:         0 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmHWM:    354920 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmRSS:    324572 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmData:   379340 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmStk:      8192 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmExe:        20 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmLib:    209888 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmPTE:      2020 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VmSwap:     3012 kB\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Threads:        127\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SigQ:   2/6517\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SigPnd: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ShdPnd: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SigBlk: 0000000000001204\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SigIgn: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;SigCgt: 00000006400096fc\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CapInh: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CapPrm: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CapEff: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CapBnd: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CapAmb: 0000000000000000\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Seccomp:        2\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Cpus_allowed:   0f\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Cpus_allowed_list:      0-3\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Mems_allowed:   1\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Mems_allowed_list:      0\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;voluntary_ctxt_switches:        21102\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;nonvoluntary_ctxt_switches:     20849&quot;</span>).getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来遇到报错<br><img src="https://img-blog.csdnimg.cn/20210701203307345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>样本在读取apk文件，继续在resolve方法中做好重定向的工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="string">&quot;/data/app/ctrip.android.view-fM4xyjk_eygpJsiITNW4JA==/base.apk&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">       <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> SimpleFileIO(oflags, <span class="keyword">new</span> File(<span class="string">&quot;yourAPkpath\\xxx.apk&quot;</span>), pathname));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继续运行，可能再补充一些JAVA环境，整体没有报错了，似乎init补充完了。</p><p><img src="https://img-blog.csdnimg.cn/20210701203337845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>日志结尾看到样本对这些文件进行访问，虽然没有报错，但我们可能会好奇，它在做什么呢？事实上，如果存在这些文件，则说明手机已经Root，样本在试图访问这些文件，来判断系统是否被Root了。我们这里不做任何处理。</p><h3 id="四、Unidbg-模拟执行SimpleSign"><a href="#四、Unidbg-模拟执行SimpleSign" class="headerlink" title="四、Unidbg 模拟执行SimpleSign"></a>四、Unidbg 模拟执行SimpleSign</h3><p>先Frida call一下，参数二固定，参数一可自行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSimpleSign</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> securityUtil = <span class="literal">null</span>;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.choose(<span class="string">&quot;ctrip.android.security.SecurityUtil&quot;</span>, &#123;</span><br><span class="line">            <span class="comment">//枚举时调用</span></span><br><span class="line">            <span class="attr">onMatch</span>:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//打印实例</span></span><br><span class="line">                securityUtil = instance;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;find instance&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//枚举完成后调用</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">        <span class="keyword">var</span> input1 = stringToBytes(<span class="string">&quot;7be9f13e7f5426d139cb4e5dbb1fdba7&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> result = securityUtil.simpleSign(input1, <span class="string">&quot;getdata&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果恒为75位长度，且相同输入也会有不同输出，原因未知。</p><p>接下来Unidbg中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callSimpleSign</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(vm.getJNIEnv());</span><br><span class="line">    list.add(<span class="number">0</span>);</span><br><span class="line">    String input = <span class="string">&quot;7be9f13e7f5426d139cb4e5dbb1fdba7&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] inputByte = input.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    ByteArray inputByteArray = <span class="keyword">new</span> ByteArray(vm,inputByte);</span><br><span class="line">    list.add(vm.addLocalObject(inputByteArray));</span><br><span class="line">    list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;getdata&quot;</span>)));</span><br><span class="line">    Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x80735</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">    System.out.println(vm.getObject(number.intValue()).getValue().toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">    Logger.getLogger(<span class="string">&quot;com.github.unidbg.unix.UnixSyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">    Logger.getLogger(<span class="string">&quot;com.github.unidbg.AbstractEmulator&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">    Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.DalvikVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">    Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.BaseVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">    Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">    SecurityUtil test = <span class="keyword">new</span> SecurityUtil();</span><br><span class="line">    test.callInit();</span><br><span class="line">    System.out.println(<span class="string">&quot;call SimpleSign&quot;</span>);</span><br><span class="line">    test.callSimpleSign();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果也很顺利，如果报错，则根据缺失的JAVA环境继续补即可。</p><p><img src="https://img-blog.csdnimg.cn/20210701203402298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>考虑一个小问题，即使明文一致，结果也一直在变，这是为什么呢？有哪些原因可能导致这个结果呢？</p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>相关程序和资料放群里，防止遇到恶意举报。</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程九——blackbox</title>
      <link href="/2021/06/22/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B9%9D%E2%80%94%E2%80%94blackbox/"/>
      <url>/2021/06/22/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B9%9D%E2%80%94%E2%80%94blackbox/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><ul><li><a href="#_3">一、前言</a></li><li><a href="#_12">二、准备</a></li><li><a href="#Unidbg_17">三、Unidbg模拟执行</a></li><li><a href="#Unidbg_120">四、Unidbg算法还原</a></li><li><a href="#_712">五、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>上篇中，我们借AB之口，讨论了这样一个问题——<strong>Unidbg是否适合做算法分析的主力工具</strong>，这个问题没有标准答案，但我们会通过一系列样本探讨它，时间会证明一切。这一篇中，我们以Unidbg为主力工具去分析一个难度适宜的算法。坦白说，这篇的阅读体验不是特别好，原因来自两点：</p><ul><li>文章这种形式很难保证分析的连贯性</li><li>这篇有前置知识要求</li></ul><p>视频的形式才是最好的，而且我也需要一份收入，如果有朋友同侪想报名我即将开课的Unidbg课程，可是私信联系我。</p><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p>首先看一下目标函数<br><img src="https://img-blog.csdnimg.cn/20210622201829529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>入参分别是context，明文，时间戳，输出恒为七位长度。</p><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><p>前面讲过的内容就不多说了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">blackbox</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    blackbox() <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.blackbox&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession9\\小黑盒.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession9\\libnative-lib.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callEncode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        Object custom = <span class="keyword">null</span>;</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(custom);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;r0env&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;1622343722&quot;</span>)));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x3b41</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        blackbox test = <span class="keyword">new</span> blackbox();</span><br><span class="line">        System.out.println(test.callEncode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行，产生第一个报错</p><p><img src="https://img-blog.csdnimg.cn/20210622202111272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>callIntMethodV中有对于这个签名的处理，抄一下<br><img src="https://img-blog.csdnimg.cn/20210622202143119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">callIntMethod</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/pm/Signature-&gt;hashCode()I&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> (dvmObject <span class="keyword">instanceof</span> Signature) &#123;</span><br><span class="line">                Signature sig = (Signature) dvmObject;</span><br><span class="line">                <span class="keyword">return</span> sig.getHashCode();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callIntMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接跑出了结果<br><img src="https://img-blog.csdnimg.cn/20210622202205321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们使用Frida 主动调用验证一下结果，结果OK。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">callEncode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        <span class="keyword">var</span> NDKTools = Java.use(<span class="string">&#x27;com.max.xiaoheihe.utils.NDKTools&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> currentApplication= Java.use(<span class="string">&quot;android.app.ActivityThread&quot;</span>).currentApplication();</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.getApplicationContext();</span><br><span class="line">        <span class="comment">// 参数一 context</span></span><br><span class="line">        <span class="keyword">var</span> input1 = context;</span><br><span class="line">        <span class="comment">// 参数二 明文</span></span><br><span class="line">        <span class="keyword">var</span> input2 = <span class="string">&quot;r0env&quot;</span>;</span><br><span class="line">        <span class="comment">// 参数三 时间戳</span></span><br><span class="line">        <span class="keyword">var</span> input3 = <span class="string">&quot;1622343722&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = NDKTools.encode(input1, input2, input3);</span><br><span class="line">        console.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、Unidbg算法还原"><a href="#四、Unidbg算法还原" class="headerlink" title="四、Unidbg算法还原"></a>四、Unidbg算法还原</h3><p>这是本篇的重点，开始吧！IDA中跳转到encode函数起始处，我们遇到了第一个问题——代码无法F5<br><img src="https://img-blog.csdnimg.cn/20210622202657424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们可以选定一段汇编，按P强制转函数，但此处先不这么做，我们试一下换个思路。让我们尝试从Unidbg的角度来思考和解决问题，在传统分析中，我们有时会使用IDA的指令trace功能，但是呢，IDA trace常常不是我们的首选项，原因很多</p><ul><li>   对IDA的反调试常见于各类样本</li><li>   IDA trace 操作较复杂，IDA动态调试容易崩</li><li>trace 速度较慢<br>而在Unidbg中，code trace 稳定且容易获取，我们不妨把code trace这件事放在前面，如前几篇所展示的那样，将如下代码放在构造函数合适的位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 填入自己的path</span></span><br><span class="line">String traceFile = <span class="string">&quot;path/encode.txt&quot;</span>;</span><br><span class="line">PrintStream traceStream = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(traceFile), <span class="keyword">true</span>);</span><br><span class="line">emulator.traceCode(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base+<span class="keyword">module</span>.size).setRedirect(traceStream);</span><br></pre></td></tr></table></figure><p>运行代码，很快就出结果了，18000行。<br><img src="https://img-blog.csdnimg.cn/20210622203012864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个行数，既说明运算中不存在高度的OLLVM混淆，也说明运算逻辑不会太复杂，否则应该百万行起步。而且由于输出只有七位数，我们下意识想到哈希算法可能参与其中，哈希算法中的经典魔数 0x67452301，不管是MD5还是SHA1都在用，尝试搜索一下<br><img src="https://img-blog.csdnimg.cn/20210622203207678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>果然有戏，接下来定位到哈希算法的运算部分。</p><p><img src="https://img-blog.csdnimg.cn/20210622203308888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跳转到0x2098看一下<br><img src="https://img-blog.csdnimg.cn/20210622203327664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按H转成hex</p><p><img src="https://img-blog.csdnimg.cn/20210622203344455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是SHA1算法的五个魔数，换而言之这是函数是SHA1算法的实现。<br><img src="https://img-blog.csdnimg.cn/20210622203357274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们要辨别入参的含义，通常而言，可以静态分析来判断哪个入参是明文、长度等等，或者Frida Hook 以及 Unidbg中HookZz等Hook 验证。但Unidbg中提供了一种极其敏捷的Hook工具——<strong>console debugger</strong>，它是今天的主力。</p><p>初始化console debugger 并添加断点，看一下涉及的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">blackbox() <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.blackbox&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">    <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">    memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">    vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession9\\小黑盒.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">    vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">    DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession9\\libnative-lib.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">    dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化debugger</span></span><br><span class="line">    Debugger debugger = emulator.attach();</span><br><span class="line">    <span class="comment">// 添加断点</span></span><br><span class="line">    debugger.addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x1ecc</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行代码<br><img src="https://img-blog.csdnimg.cn/20210622203545810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码停下来了，可以发现，r1和r2都更像是指针。console debugger 支持如下指令，大家不用死记硬背，我们会在后面不断去使用它</p><blockquote><p>c: continue<br>n: step over<br>bt: back trace</p><p>st hex: search stack<br>shw hex: search writable heap<br>shr hex: search readable heap<br>shx hex: search executable heap</p><p>nb: break at next block<br>s|si: step into<br>s[decimal]: execute specified amount instruction<br>s(blx): execute util BLX mnemonic, low performance</p><p>m(op) [size]: show memory, default size is 0x70, size may hex or decimal<br>mr0-mr7, mfp, mip, msp [size]: show memory of specified register<br>m(address) [size]: show memory of specified address, address must start with 0x</p><p>wr0-wr7, wfp, wip, wsp : write specified register<br>wb(address), ws(address), wi(address) : write (byte, short, integer) memory of specified address, address must start with 0x<br>wx(address) : write bytes to memory at specified address, address must start with 0x</p><p>b(address): add temporarily breakpoint, address must start with 0x, can be module offset<br>b: add breakpoint of register PC<br>r: remove breakpoint of register PC<br>blr: add temporarily breakpoint of register LR</p><p>p (assembly): patch assembly at PC address<br>where: show java stack trace</p><p>trace [begin end]: Set trace instructions<br>traceRead [begin end]: Set trace memory read<br>traceWrite [begin end]: Set trace memory write<br>vm: view loaded modules<br>vbs: view breakpoints<br>d|dis: show disassemble<br>d(0x): show disassemble at specify address<br>stop: stop emulation<br>run [arg]: run test<br>cc size: convert asm from 0x40001ddc - 0x40001ddc + size bytes to c function<br>c: continue<br>n: step over<br>bt: back trace</p><p>st hex: search stack<br>shw hex: search writable heap<br>shr hex: search readable heap<br>shx hex: search executable heap</p><p>nb: break at next block<br>s|si: step into<br>s[decimal]: execute specified amount instruction<br>s(blx): execute util BLX mnemonic, low performance</p><p>m(op) [size]: show memory, default size is 0x70, size may hex or decimal<br>mr0-mr7, mfp, mip, msp [size]: show memory of specified register<br>m(address) [size]: show memory of specified address, address must start with 0x</p><p>wr0-wr7, wfp, wip, wsp : write specified register<br>wb(address), ws(address), wi(address) : write (byte, short, integer) memory of specified address, address must start with 0x<br>wx(address) : write bytes to memory at specified address, address must start with 0x</p><p>b(address): add temporarily breakpoint, address must start with 0x, can be module offset<br>b: add breakpoint of register PC<br>r: remove breakpoint of register PC<br>blr: add temporarily breakpoint of register LR</p><p>p (assembly): patch assembly at PC address<br>where: show java stack trace</p><p>trace [begin end]: Set trace instructions<br>traceRead [begin end]: Set trace memory read<br>traceWrite [begin end]: Set trace memory write<br>vm: view loaded modules<br>vbs: view breakpoints<br>d|dis: show disassemble<br>d(0x): show disassemble at specify address<br>stop: stop emulation<br>run [arg]: run test<br>cc size: convert asm from 0x40001ddc - 0x40001ddc + size bytes to c function</p></blockquote><p>mr0查看r0所指向的内存块，它等同于Frida native hook中的<code>hexdump(this.context.r0)</code>。<br><img src="https://img-blog.csdnimg.cn/20210622203821450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再看看r1所指向的内存<br><img src="https://img-blog.csdnimg.cn/20210622203841983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按C继续运行，再次断了下来<br>mr1<br><img src="https://img-blog.csdnimg.cn/20210622203942124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里涉及到一个知识问题，需要大家对HMAC方案有一定了解，内容中的0x5C 和 0x36 是它标志性的特征，其具体原理可以看课程中【SO基础课四月——最后两节】对HMAC的详解。</p><p>所以接下来找其上层函数，就是HAMC的主函数。我们可以在IDA中按x查看交叉引用：<br><img src="https://img-blog.csdnimg.cn/20210622204108306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但在一些情况下，交叉引用可能会找不到结果或者干扰项太多，这种时候可以使用Frida去打印调用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base_addr = Module.findBaseAddress(<span class="string">&quot;libnative-lib.so&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> real_addr = base_addr.add(<span class="number">0x1ECC</span>+<span class="number">1</span>);</span><br><span class="line">Interceptor.attach(real_addr, &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> backtrace = Thread.backtrace(<span class="built_in">this</span>.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(<span class="string">&quot;\n\t&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Backtrace:&quot;</span> + backtrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但在Unidbg console debugger中做这件事最快，再次运行代码——在断点处断下——输入bt指令回车（bt即backtrace缩写）。<br><img src="https://img-blog.csdnimg.cn/20210622204221371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IDA中查看0x1e81<br><img src="https://img-blog.csdnimg.cn/2021062220425828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个函数看着像一个标准的HMAC-SHA1，那输入一定包括 明文、Key，在1ddc 下断点，我们需要搞清楚这五个入参的意义<br><img src="https://img-blog.csdnimg.cn/20210622204315217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210622204337414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>r3即参数4，值是8，我们暂不清楚其意义，r0-r2即参数一、二、三，均为指针，mr0，mr1，mr2 逐个查看。<br><img src="https://img-blog.csdnimg.cn/20210622204510812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看出来是个buffer<br><img src="https://img-blog.csdnimg.cn/20210622204525719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看不出是Key 还是 输入明文，但是它的长度恰好是八字节，或许参数4的8就是它的长度，mr2 也看不啥</p><p>这对于逆向分析来说是常见的情况，试错和犯错是逆向分析中最主要的部分。既然不能通过入参简单分析，那就逐行看代码逻辑，需要注意，分析此函数需要对HMAC有一定理解。<br><img src="https://img-blog.csdnimg.cn/20210622204604368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在1ecc 处第一次断点处的mr1解释如下<br><img src="https://img-blog.csdnimg.cn/20210622204625233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>一共0x48长，前0x40个是ipad，来自于 (key补0后) xor 0x36，1ddc的参数2就是这个key。而明文就是这个一小截<br><img src="https://img-blog.csdnimg.cn/20210622204644824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个明文是啥呢？仔细观察会发现就是（00 00 00 00）+ （时间戳 +1）。下面验证结果<br><img src="https://img-blog.csdnimg.cn/20210622204709235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1ddc 即 hmacSHA1函数，参数1是buffer，所以我们需要hook 它的返回值。这件事在console debugger中也并不难做，blr 命令用于在函数返回时设置一个一次性断点，然后c 运行函数，它在返回处断下来，有个问题，mr0这时候并不代表入参时的r0了，但没关系，mr0的address即可。<br>调试流程如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">debugger <span class="keyword">break</span> at: <span class="number">0</span>x40001ddc</span><br><span class="line">&gt;&gt;&gt; r0=<span class="number">0</span>xbffff660(<span class="literal">-1073744288</span>) r1=<span class="number">0</span>x401d2000 r2=<span class="number">0</span>xbffff760 r3=<span class="number">0</span>x8 r4=<span class="number">0</span>x10a035a0 r5=<span class="number">0</span>x401d2000 r6=<span class="number">0</span>x400bec91 r7=<span class="number">0</span>xbffff788 r8=<span class="number">0</span>xfffe0ab0 sb=<span class="number">0</span>x0 <span class="built_in">sl</span>=<span class="number">0</span>x4016e000 fp=<span class="number">0</span>xbffff660 ip=<span class="number">0</span>x80808080 <span class="built_in">SP</span>=<span class="number">0</span>xbffff600 LR=RX@<span class="number">0</span>x40003c3b[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span>x3c3b PC=RX@<span class="number">0</span>x40001ddc[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span>x1ddc cpsr: N=<span class="number">0</span>, Z=<span class="number">0</span>, C=<span class="number">1</span>, V=<span class="number">0</span>, T=<span class="number">1</span>, mode=<span class="number">0</span>b10000</span><br><span class="line">=&gt; *[<span class="type">libnative</span>-<span class="type">lib.so</span>]*[<span class="number">0</span><span class="type">x01ddd</span>]*[*      <span class="type">f0</span> <span class="type">b5</span> ]*<span class="number">0</span>x40001ddc:*push &#123;r4, r5, r6, r7, lr&#125;</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01ddf</span>] [       <span class="number">03</span> <span class="type">af</span> ] <span class="number">0</span>x40001dde: add r7, <span class="built_in">sp</span>, <span class="comment">#0xc</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01de1</span>] [ <span class="number">2</span><span class="type">d</span> <span class="type">e9</span> <span class="number">00</span> <span class="number">07</span> ] <span class="number">0</span>x40001de0: push.w &#123;r8, sb, <span class="built_in">sl</span>&#125;</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01de5</span>] [       <span class="type">ce</span> <span class="type">b0</span> ] <span class="number">0</span>x40001de4: sub <span class="built_in">sp</span>, <span class="comment">#0x138</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01de7</span>] [       <span class="number">80</span> <span class="number">46</span> ] <span class="number">0</span>x40001de6: mov r8, r0</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01de9</span>] [       <span class="number">37</span> <span class="number">48</span> ] <span class="number">0</span>x40001de8: ldr r0, [<span class="type">pc</span>, <span class="comment">#0xdc]</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01deb</span>] [       <span class="number">3</span><span class="type">c</span> <span class="type">ac</span> ] <span class="number">0</span><span class="type">x40001dea</span>: <span class="type">add</span> <span class="type">r4</span>, <span class="type">sp</span>, <span class="comment">#0xf0</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01ded</span>] [ <span class="type">c0</span> <span class="type">ef</span> <span class="number">50</span> <span class="number">00</span> ] <span class="number">0</span><span class="type">x40001dec</span>: <span class="type">vmov.i32</span> <span class="type">q8</span>, <span class="comment">#0</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01df1</span>] [       <span class="number">78</span> <span class="number">44</span> ] <span class="number">0</span><span class="type">x40001df0</span>: <span class="type">add</span> <span class="type">r0</span>, <span class="type">pc</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01df3</span>] [       <span class="number">91</span> <span class="number">46</span> ] <span class="number">0</span><span class="type">x40001df2</span>: <span class="type">mov</span> <span class="type">sb</span>, <span class="type">r2</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01df5</span>] [       <span class="number">22</span> <span class="number">46</span> ] <span class="number">0</span><span class="type">x40001df4</span>: <span class="type">mov</span> <span class="type">r2</span>, <span class="type">r4</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01df7</span>] [       <span class="number">41</span> <span class="number">2</span><span class="type">b</span> ] <span class="number">0</span><span class="type">x40001df6</span>: <span class="type">cmp</span> <span class="type">r3</span>, <span class="comment">#0x41</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01df9</span>] [ <span class="type">d0</span> <span class="type">f8</span> <span class="number">00</span> <span class="type">a0</span> ] <span class="number">0</span><span class="type">x40001df8</span>: <span class="type">ldr.w</span> <span class="type">sl</span>, [<span class="type">r0</span>]</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01dfd</span>] [ <span class="type">da</span> <span class="type">f8</span> <span class="number">00</span> <span class="number">00</span> ] <span class="number">0</span><span class="type">x40001dfc</span>: <span class="type">ldr.w</span> <span class="type">r0</span>, [<span class="type">sl</span>]</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01e01</span>] [       <span class="number">4</span><span class="type">d</span> <span class="number">90</span> ] <span class="number">0</span><span class="type">x40001e00</span>: <span class="type">str</span> <span class="type">r0</span>, [<span class="type">sp</span>, <span class="comment">#0x134]</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x01e03</span>] [ <span class="number">04</span> <span class="type">f1</span> <span class="number">20</span> <span class="number">00</span> ] <span class="number">0</span><span class="type">x40001e02</span>: <span class="type">add.w</span> <span class="type">r0</span>, <span class="type">r4</span>, <span class="comment">#0x20</span></span><br><span class="line"></span><br><span class="line">// 我输入的命令</span><br><span class="line"><span class="type">mr0</span></span><br><span class="line"></span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">09</span>:<span class="number">27</span>:<span class="number">45</span> <span class="number">480</span>]<span class="type">r0</span>=<span class="type">unidbg</span>@<span class="number">0</span><span class="type">xbffff660</span>, <span class="type">md5</span>=<span class="type">c20019258ca235d2408334dfbc5e67e3</span>, <span class="type">hex</span>=<span class="number">00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="type">size</span>: <span class="number">112</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0010</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0020</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0030</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0040</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0050</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0060</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line">// 我输入的命令</span><br><span class="line"><span class="type">blr</span></span><br><span class="line"><span class="type">Add</span> <span class="type">breakpoint</span>: <span class="number">0</span><span class="type">x40003c3b</span> <span class="type">in</span> <span class="type">libnative</span>-<span class="type">lib.so</span> [<span class="number">0</span><span class="type">x3c3b</span>]</span><br><span class="line">// 我输入的命令</span><br><span class="line"><span class="type">c</span></span><br><span class="line"><span class="type">debugger</span> <span class="type">break</span> <span class="type">at</span>: <span class="number">0</span><span class="type">x40003c3a</span></span><br><span class="line">&gt;&gt;&gt; <span class="type">r0</span>=<span class="number">0</span><span class="type">x0</span> <span class="type">r1</span>=<span class="number">0</span><span class="type">x0</span> <span class="type">r2</span>=<span class="number">0</span><span class="type">x8</span> <span class="type">r3</span>=<span class="number">0</span><span class="type">x7</span> <span class="type">r4</span>=<span class="number">0</span><span class="type">x10a035a0</span> <span class="type">r5</span>=<span class="number">0</span><span class="type">x401d2000</span> <span class="type">r6</span>=<span class="number">0</span><span class="type">x400bec91</span> <span class="type">r7</span>=<span class="number">0</span><span class="type">xbffff788</span> <span class="type">r8</span>=<span class="number">0</span><span class="type">xfffe0ab0</span> <span class="type">sb</span>=<span class="number">0</span><span class="type">x0</span> <span class="type">sl</span>=<span class="number">0</span><span class="type">x4016e000</span> <span class="type">fp</span>=<span class="number">0</span><span class="type">xbffff660</span> <span class="type">ip</span>=<span class="number">0</span><span class="type">x401c20c0</span> <span class="type">SP</span>=<span class="number">0</span><span class="type">xbffff600</span> <span class="type">LR</span>=<span class="type">RX</span>@<span class="number">0</span><span class="type">x400fe617</span>[<span class="type">libc.so</span>]<span class="number">0</span><span class="type">x58617</span> <span class="type">PC</span>=<span class="type">RX</span>@<span class="number">0</span><span class="type">x40003c3a</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x3c3a</span> (<span class="type">_x3x_y2y1</span> + <span class="number">0</span><span class="type">xf9</span>) <span class="type">cpsr</span>: <span class="type">N</span>=<span class="number">0</span>, <span class="type">Z</span>=<span class="number">1</span>, <span class="type">C</span>=<span class="number">1</span>, <span class="type">V</span>=<span class="number">0</span>, <span class="type">T</span>=<span class="number">1</span>, <span class="type">mode</span>=<span class="number">0</span><span class="type">b10000</span></span><br><span class="line">=&gt; *[<span class="type">libnative</span>-<span class="type">lib.so</span>]*[<span class="number">0</span><span class="type">x03c3b</span>]*[*      <span class="number">68</span> <span class="number">48</span> ]*<span class="number">0</span><span class="type">x40003c3a</span>:*<span class="type">ldr</span> <span class="type">r0</span>, [<span class="type">pc</span>, <span class="comment">#0x1a0] [0x40003dde] =&gt; 0x248e</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c3d</span>] [       <span class="number">1</span><span class="type">a</span> <span class="number">26</span> ] <span class="number">0</span><span class="type">x40003c3c</span>: <span class="type">movs</span> <span class="type">r6</span>, <span class="comment">#0x1a</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c3f</span>] [ <span class="number">9</span><span class="type">d</span> <span class="type">f8</span> <span class="number">73</span> <span class="number">10</span> ] <span class="number">0</span><span class="type">x40003c3e</span>: <span class="type">ldrb.w</span> <span class="type">r1</span>, [<span class="type">sp</span>, <span class="comment">#0x73]</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c43</span>] [ <span class="number">0</span><span class="type">d</span> <span class="type">f1</span> <span class="number">38</span> <span class="number">0</span><span class="type">a</span> ] <span class="number">0</span><span class="type">x40003c42</span>: <span class="type">add.w</span> <span class="type">sl</span>, <span class="type">sp</span>, <span class="comment">#0x38</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c47</span>] [       <span class="number">78</span> <span class="number">44</span> ] <span class="number">0</span><span class="type">x40003c46</span>: <span class="type">add</span> <span class="type">r0</span>, <span class="type">pc</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c49</span>] [       <span class="number">01</span> <span class="number">60</span> ] <span class="number">0</span><span class="type">x40003c48</span>: <span class="type">str</span> <span class="type">r1</span>, [<span class="type">r0</span>]</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c4b</span>] [ <span class="number">01</span> <span class="type">f0</span> <span class="number">0</span><span class="type">f</span> <span class="number">00</span> ] <span class="number">0</span><span class="type">x40003c4a</span>: <span class="type">and</span> <span class="type">r0</span>, <span class="type">r1</span>, <span class="comment">#0xf</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c4f</span>] [       <span class="number">64</span> <span class="number">49</span> ] <span class="number">0</span><span class="type">x40003c4e</span>: <span class="type">ldr</span> <span class="type">r1</span>, [<span class="type">pc</span>, <span class="comment">#0x190]</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c51</span>] [       <span class="number">79</span> <span class="number">44</span> ] <span class="number">0</span><span class="type">x40003c50</span>: <span class="type">add</span> <span class="type">r1</span>, <span class="type">pc</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c53</span>] [       <span class="number">08</span> <span class="number">60</span> ] <span class="number">0</span><span class="type">x40003c52</span>: <span class="type">str</span> <span class="type">r0</span>, [<span class="type">r1</span>]</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c55</span>] [       <span class="number">52</span> <span class="type">a1</span> ] <span class="number">0</span><span class="type">x40003c54</span>: <span class="type">adr</span> <span class="type">r1</span>, <span class="comment">#0x148</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c57</span>] [ <span class="number">5</span><span class="type">b</span> <span class="type">f8</span> <span class="number">00</span> <span class="number">00</span> ] <span class="number">0</span><span class="type">x40003c56</span>: <span class="type">ldr.w</span> <span class="type">r0</span>, [<span class="type">fp</span>, <span class="type">r0</span>]</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c5b</span>] [ <span class="number">0</span><span class="type">d</span> <span class="type">f1</span> <span class="number">45</span> <span class="number">0</span><span class="type">b</span> ] <span class="number">0</span><span class="type">x40003c5a</span>: <span class="type">add.w</span> <span class="type">fp</span>, <span class="type">sp</span>, <span class="comment">#0x45</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c5f</span>] [ <span class="number">61</span> <span class="type">f9</span> <span class="type">cf</span> <span class="number">0</span><span class="type">a</span> ] <span class="number">0</span><span class="type">x40003c5e</span>: <span class="type">vld1.64</span> &#123;<span class="type">d16</span>, <span class="type">d17</span>&#125;, [<span class="type">r1</span>]</span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c63</span>] [       <span class="number">59</span> <span class="number">46</span> ] <span class="number">0</span><span class="type">x40003c62</span>: <span class="type">mov</span> <span class="type">r1</span>, <span class="type">fp</span></span><br><span class="line">    [<span class="type">libnative</span>-<span class="type">lib.so</span>] [<span class="number">0</span><span class="type">x03c65</span>] [ <span class="number">41</span> <span class="type">f9</span> <span class="number">06</span> <span class="number">0</span><span class="type">a</span> ] <span class="number">0</span><span class="type">x40003c64</span>: <span class="type">vst1.8</span> &#123;<span class="type">d16</span>, <span class="type">d17</span>&#125;, [<span class="type">r1</span>], <span class="type">r6</span></span><br><span class="line"></span><br><span class="line">// 我输入的命令</span><br><span class="line"><span class="type">m0xbffff660</span></span><br><span class="line"></span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">09</span>:<span class="number">27</span>:<span class="number">59</span> <span class="number">330</span>]<span class="type">unidbg</span>@<span class="number">0</span><span class="type">xbffff660</span>, <span class="type">md5</span>=<span class="number">4</span><span class="type">c435965fc9ed9add8e3611e66611a84</span>, <span class="type">hex</span>=<span class="type">bd398565074df83a3b84e14b4ea0f0b59480aeea0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"><span class="type">size</span>: <span class="number">112</span></span><br><span class="line"><span class="number">0000</span>: <span class="type">BD</span> <span class="number">39</span> <span class="number">85</span> <span class="number">65</span> <span class="number">07</span> <span class="number">4</span><span class="type">D</span> <span class="type">F8</span> <span class="number">3</span><span class="type">A</span> <span class="number">3</span><span class="type">B</span> <span class="number">84</span> <span class="type">E1</span> <span class="number">4</span><span class="type">B</span> <span class="number">4</span><span class="type">E</span> <span class="type">A0</span> <span class="type">F0</span> <span class="type">B5</span>    <span class="type">.9.e.M.</span>:;<span class="type">..KN...</span></span><br><span class="line"><span class="number">0010</span>: <span class="number">94</span> <span class="number">80</span> <span class="type">AE</span> <span class="type">EA</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0020</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0030</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0040</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0050</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line"><span class="number">0060</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="type">................</span></span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line">// 我输入的命令</span><br><span class="line"><span class="type">c</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">ReleaseStringUTFChars</span>(<span class="string">&quot;r0env&quot;</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x40003d69</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x3d69</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">ReleaseStringUTFChars</span>(<span class="string">&quot;1622343722&quot;</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x40003d79</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x3d79</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">FindClass</span>(<span class="type">java</span>/<span class="type">lang</span>/<span class="built_in">String</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x40001819</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x1819</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">NewStringUTF</span>(<span class="string">&quot;UTF-8&quot;</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x40001827</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x1827</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">GetMethodID</span>(<span class="type">java</span>/<span class="type">lang</span>/<span class="built_in">String</span><span class="type">.</span>&lt;<span class="type">init</span>&gt;([<span class="type">BLjava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;)<span class="type">V</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x4000183b</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x183b</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">NewByteArray</span>(<span class="number">7</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x40001847</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x1847</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">SetByteArrayRegion</span>([<span class="type">B</span>@<span class="number">3</span><span class="type">c41ed1d</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="type">unidbg</span>@<span class="number">0</span><span class="type">xbffff638</span>) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x4000185b</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x185b</span></span><br><span class="line"><span class="type">JNIEnv</span>-&gt;<span class="type">NewObject</span>(<span class="type">java</span>/<span class="type">lang</span>/<span class="built_in">String</span>, &lt;<span class="type">init</span>&gt;) <span class="type">was</span> <span class="type">called</span> <span class="type">from</span> <span class="type">RX</span>@<span class="number">0</span><span class="type">x4000186d</span>[<span class="type">libnative</span>-<span class="type">lib.so</span>]<span class="number">0</span><span class="type">x186d</span></span><br><span class="line"><span class="type">JCD2D38</span></span><br></pre></td></tr></table></figure><p>这个hmacSHA1算法就分析完了，它的唯一要点就是要对HMAC算法熟悉，用Frida Hook 还是 Unidbg debug 凭心而论，在此处影响不大。我们验证了此处是一个hmacSHA1算法，入参是时间戳+1，装满八个字节的那种，密钥也找到了，但不确定是静态保存还是动态生成的。但仔细看我们会发现,密钥其实就是输入明文的base64。<br><img src="https://img-blog.csdnimg.cn/20210622204832329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来做啥呢？HMAC的结果是20个字节，程序的返回值是7个十六进制数，风马牛不相及，显然离成功逆向还差得远呢。但既然HMAC SHA1已经被我们弄出来了，那就要汇编trace中把这部分删掉，这样好知道还剩下多少工作量。根据1ddc的头尾去检索。<br><img src="https://img-blog.csdnimg.cn/20210622204933109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2021062220494375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们惊喜的发现，去掉hmacSha1的部分，只剩下1600行！</p><p><img src="https://img-blog.csdnimg.cn/20210622204958553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这意味着什么呢？<br>这意味着目标函数中后续不存在标准加密算法了，比如大名鼎鼎的AES/DES/RSA等等，为什么呢？因为一个标准的、无混淆的MD5，都需要2000-3000行汇编才能实现。1600行容不下太多逻辑！剩下的内容很可能是异或循环？凯撒加密？等等自定义的基本变换。</p><p>让我们继续算法分析吧！接下来的突破口是哪儿呢？Unidbg没有做内存地址的随机化，所以从0xbffff660到0xbffff660+20 的地址就静静的放着我们的HMAC SHA1结果，先前我们也说了，18000行汇编，超过16000行都是这个函数，那好不容易算出来的结果，肯定不至于后面不使用吧？这不是胡闹嘛。</p><p>Unicorn天然提供了对内存读写/访问的trace，而Unidbg做了良好的封装 ,发扬光大。让我们感受一下trace的强大威力.</p><p><img src="https://img-blog.csdnimg.cn/20210622205246330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参数为起始地址与终止地址，入参<strong>必须</strong>声明为long类型，否则就会出错。运行代码，我们发现，在后续运算中，hmac-sha1的结果中，只有五个字节被使用到了。<br><img src="https://img-blog.csdnimg.cn/20210622205357265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>pc指针代表了调用位置,我们跳转到3c3e看看，真糟糕<br><img src="https://img-blog.csdnimg.cn/20210622205519296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个样本存在静态的分析对抗，IDA 无法确认函数的起始地址和终止地址，必须人为选定一个指令范围，然后按P强制转成函数。我们现在不得不这么做，否则分析就进入了死胡同。可以发现,IDA识别出了函数的起始点,但把握不住函数的终点.我们顺着飘红往下拉：<br><img src="https://img-blog.csdnimg.cn/20210622205649802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3D9C比较像函数的结尾，我们尝试一下，从3B40开始从上往下拖拽,一直覆盖选中到3D9C，按P</p><p><img src="https://img-blog.csdnimg.cn/20210622205737186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210622205746701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>现在已经被识别成了函数,F5看效果<br><img src="https://img-blog.csdnimg.cn/20210622205802855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>JUMPOUT真刺眼,看一下0x3C04这个位置怎么了</p><p><img src="https://img-blog.csdnimg.cn/20210622205836871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>0x3C04应该是代码段,但被误识别成了数据,选中这个区域<br><img src="https://img-blog.csdnimg.cn/20210622205851331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按C 转成code<br><img src="https://img-blog.csdnimg.cn/20210622205906323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210622205913661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将先前的反编译结果界面关掉,按F5 再次反编译<br><img src="https://img-blog.csdnimg.cn/2021062220593360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>总算可以看伪C代码了,没这玩意心里真发慌。我们在前面对hmacSha1的结果traceRead,第一处发生在0x3c3e,仔细观察执行流和值我们会发现,这里是取出来hmacSha1结果的最后一位</p><p><img src="https://img-blog.csdnimg.cn/2021062221002787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>另外一处是在0x3c56，从结果中读取出来a04e4be1,内存要倒着看,即第10到第13个字节<br><img src="https://img-blog.csdnimg.cn/20210622210101762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看汇编流程<br><img src="https://img-blog.csdnimg.cn/20210622210123936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-l56IhgM2-1624366803958)(C:\Users\pr0214\AppData\Roaming\Typora\typora-user-images\image-20210622142123951.png)]"><br>attach debugger 一梭子<br><img src="https://img-blog.csdnimg.cn/202106222102032.png" alt="在这里插入图片描述"><br>r0是index,r11即fp,就是指针了,康康内存数据<br><img src="https://img-blog.csdnimg.cn/20210622210218365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即从hmacSha1的结果中取出四字节,那么index是谁决定的呢?<br><img src="https://img-blog.csdnimg.cn/20210622210238261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>and 即按位与运算，对应的C代码<br><img src="https://img-blog.csdnimg.cn/20210622210301373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&amp;f 意味着取低八位,举例如下：<br>0x321 &amp; 0xf = 0x1<br>0x57 &amp; 0xf = 0x7</p><p>所以逻辑是这样的:取hmacSha1结果的最后一位出来,其低八位作为index再次在hmacSHA1的结果中取出四字节，那后面拿这四字节干啥呢?<br>和0x7fffffff按位与后进入了这个函数</p><p>注意78-85行这个循环，我们对结果的输出 traceWrite<br><img src="https://img-blog.csdnimg.cn/20210622210442368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以发现,前五个字节都来自3cba位置,即这个循环体内<br><img src="https://img-blog.csdnimg.cn/20210622210459974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>换句话说,我们离结果的前五个字节的真相已经很近了</p><p>分析一下37a0处的r0<br><img src="https://img-blog.csdnimg.cn/20210622210517105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210622210525744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们的分析没错，0x614b4ea0 即 0xe14b4ea0 &amp; 0x7fffffff</p><p>使用hookZz 查看sub_37A0其参数和返回值(这是今天第一次用hookZz,在大部分情况下,console debugger 更灵敏更好用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook37a0</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取HookZz对象</span></span><br><span class="line">    IHookZz hookZz = HookZz.getInstance(emulator); <span class="comment">// 加载HookZz，支持inline hook，文档看https://github.com/jmpews/HookZz</span></span><br><span class="line">    <span class="comment">// enable hook</span></span><br><span class="line">    hookZz.enable_arm_arm64_b_branch(); <span class="comment">// 测试enable_arm_arm64_b_branch，可有可无</span></span><br><span class="line">    <span class="comment">// hook MDStringOld</span></span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x37a0</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 方法执行前</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;input:&quot;</span>+ctx.getR0Int());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 方法执行后</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;output:&quot;</span>+ctx.getR0Int());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    hookZz.disable_arm_arm64_b_branch();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210622210605222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们观察到，后面四次的入参一，就是前一次的输出结果，而第一次入参一是我们的hmac中变换处的四个字节&amp;0xfffffff，这一点在汇编或者伪C代码中同样可以清晰验证.</p><p>那前五个字节,和这个输出有什么关系呢?<br><img src="https://img-blog.csdnimg.cn/20210622210705398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1632325280 - 26*62781741 = 14，然后将结果，即此处的14作为index，从v35中取值，静态分析或者Hook都可以验证,v35是固定字符串”23456789BCDFGHJKMNPQRTVWXY”<br><img src="https://img-blog.csdnimg.cn/2021062221075155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210622210758727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以输出的前五个字节,已经明了,关键就在sub_37A0这个函数里，它需要传入两个参数,参数2总是26,参数1一直在变，进入这个函数看看<br><img src="https://img-blog.csdnimg.cn/20210622210827302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入37A4的逻辑时，突然想到一个问题，37a4的两个参数没有被正确识别出来，右键set item type给它正确的函数声明.<br><img src="https://img-blog.csdnimg.cn/20210622210900844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_37A4</span><span class="params">(<span class="keyword">int</span> result, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// nf</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">bool</span> v8; <span class="comment">// zf</span></span><br><span class="line"></span><br><span class="line">  v3 = result ^ a2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">    a2 = -a2;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (v3 ^ result) &lt; <span class="number">0</span> )</span><br><span class="line">      result = -result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = result;</span><br><span class="line">    <span class="keyword">if</span> ( result &lt; <span class="number">0</span> )</span><br><span class="line">      v4 = -result;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt;= a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt; a2 )</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == a2 )</span><br><span class="line">        result = (v3 &gt;&gt; <span class="number">31</span>) | <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( (a2 &amp; (a2 - <span class="number">1</span>)) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = __clz(a2) - __clz(v4);</span><br><span class="line">      v6 = a2 &lt;&lt; v5;</span><br><span class="line">      v7 = <span class="number">1</span> &lt;&lt; v5;</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v4 &gt;= v6 )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 -= v6;</span><br><span class="line">          result |= v7;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 &gt;= v6 &gt;&gt; <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 -= v6 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">          result |= v7 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 &gt;= v6 &gt;&gt; <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 -= v6 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">          result |= v7 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 &gt;= v6 &gt;&gt; <span class="number">3</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 -= v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">          result |= v7 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v8 = v4 == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v4 )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">          v8 = v7 == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v8 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v6 &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> )</span><br><span class="line">        result = -result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = v4 &gt;&gt; (<span class="number">31</span> - __clz(a2));</span><br><span class="line">      <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> )</span><br><span class="line">        result = -result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的逻辑看着不复杂，我们在JAVA中尝试实现一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+sub_37A4(<span class="number">1632325280</span>, <span class="number">26</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sub_37A4</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a1_eor_a2 = a1 ^ a2;</span><br><span class="line">        <span class="keyword">if</span> ( a2 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( (a1_eor_a2 ^ a1) &lt; <span class="number">0</span> )</span><br><span class="line">                a1 = -a1;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a1;</span><br><span class="line">            <span class="keyword">if</span> ( a1 &lt; <span class="number">0</span> )</span><br><span class="line">                temp = -a1;</span><br><span class="line">            <span class="keyword">if</span> ( temp &lt;= a2 )                             <span class="comment">// 如果input1 不大于 input2</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ( temp &lt; a2 )</span><br><span class="line">                    a1 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ( temp == a2 )</span><br><span class="line">                    a1 = (a1_eor_a2 &gt;&gt; <span class="number">31</span>) | <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( (a2 &amp; (a2 - <span class="number">1</span>)) != <span class="number">0</span> )&#123;</span><br><span class="line">                <span class="keyword">int</span> v5 = __clz(a2) - __clz(temp);</span><br><span class="line">                <span class="keyword">int</span> v6 = a2 &lt;&lt; v5;</span><br><span class="line">                <span class="keyword">int</span> v7 = <span class="number">1</span> &lt;&lt; v5;</span><br><span class="line">                a1 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( temp &gt;= v6 )</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp -= v6;</span><br><span class="line">                        a1 |= v7;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ( temp &gt;= v6 &gt;&gt; <span class="number">1</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp -= v6 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                        a1 |= v7 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ( temp &gt;= v6 &gt;&gt; <span class="number">2</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp -= v6 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">                        a1 |= v7 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ( temp &gt;= v6 &gt;&gt; <span class="number">3</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp -= v6 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">                        a1 |= v7 &gt;&gt; <span class="number">3</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Boolean v8 = temp == <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (temp!=<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v7 &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">                        v8 = v7 == <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ( v8 )</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    v6 &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( a1_eor_a2 &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                    a1 = -a1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                a1 = temp &gt;&gt; (<span class="number">31</span> - __clz(a2));</span><br><span class="line">                <span class="keyword">if</span> ( a1_eor_a2 &lt; <span class="number">0</span> )</span><br><span class="line">                    a1 = -a1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">__clz</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total_bits = <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((x &amp; (<span class="number">1</span> &lt;&lt; (total_bits - <span class="number">1</span>))) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们的实现不一定靠谱，需要验证一下，主动调用测试1w次调用的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">call37A4</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(num1);</span><br><span class="line">    list.add(num2);</span><br><span class="line">    Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x37A4</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> number.intValue();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">    blackbox test = <span class="keyword">new</span> blackbox();</span><br><span class="line">    <span class="comment">//        test.hook37a0();</span></span><br><span class="line">    <span class="comment">//        System.out.println(test.callEncode());</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10000</span>; i += <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> d = Math.random();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> temp = (<span class="keyword">int</span>)(d*<span class="number">1000000</span>);</span><br><span class="line">        <span class="keyword">if</span>(test.call37A4(temp, <span class="number">26</span>)!=utils.sub_37A4(temp, <span class="number">26</span>))&#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没出什么幺蛾子，到此我们可以说，前五个字节的来源和生成已经搞清楚了，样本的后两个字节，其生成也依赖于一系列的字节运算,感兴趣的话快试试吧!</p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>链接：<a href="https://pan.baidu.com/s/1zAe4KqIh3yBkf3FGafbe9Q">https://pan.baidu.com/s/1zAe4KqIh3yBkf3FGafbe9Q</a><br>提取码：0djf</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程八：文件读写</title>
      <link href="/2021/06/18/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%85%AB%EF%BC%9A%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
      <url>/2021/06/18/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%85%AB%EF%BC%9A%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><ul><li><a href="#_2">一、前言</a></li><li><a href="#demo1_10">二、demo1设计</a></li><li><a href="#Unidbgdemo1_223">三、Unidbg模拟执行demo1</a></li><li><a href="#demo2_507">四、demo2设计</a></li><li><a href="#Unidbgdemo2_892">五、Unidbg模拟执行demo2</a></li><li><a href="#_1094">六、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>本篇分析的是自写demo，帮助大家熟悉Unidbg中对文件读写的处理，例子中主要涉及</p><ul><li>Sharedpreference 读写</li><li>Assets 读写</li><li>文件 读写</li></ul><h3 id="二、demo1设计"><a href="#二、demo1设计" class="headerlink" title="二、demo1设计"></a>二、demo1设计</h3><blockquote><p>Sharedpreferences是Android平台上常用的存储方式，用来保存应用程序的各种配置信息，其本质是一个以“键-值”对的方式保存数据的xml文件，其文件保存在/data/data/selfPackage/shared_prefs目录下。</p></blockquote><p>在APP刚启动时，我们新建两个Sharedpreference 文件，分别填入两个键值对，name-lilac和location-china，代码实现</p><p>（如果对开发不感兴趣，也可以直接去百度网盘中获取demo文件的apk进行分析）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.roysue.readsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the &#x27;native-lib&#x27; library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//步骤1：创建SharedPreferences对象</span></span><br><span class="line">        SharedPreferences sharedPreferences1= getSharedPreferences(<span class="string">&quot;one&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">        SharedPreferences sharedPreferences2= getSharedPreferences(<span class="string">&quot;two&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//步骤2： 实例化SharedPreferences.Editor对象</span></span><br><span class="line">        SharedPreferences.Editor editor1 = sharedPreferences1.edit();</span><br><span class="line">        SharedPreferences.Editor editor2 = sharedPreferences2.edit();</span><br><span class="line">        <span class="comment">//步骤3：将获取过来的值放入文件</span></span><br><span class="line">        editor1.putString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lilac&quot;</span>);</span><br><span class="line">        editor2.putString(<span class="string">&quot;location&quot;</span>, <span class="string">&quot;china&quot;</span>);</span><br><span class="line">        <span class="comment">//步骤4：提交</span></span><br><span class="line">        editor1.apply();</span><br><span class="line">        editor2.apply();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TextView tv = findViewById(R.id.sample_text);</span><br><span class="line">        Button btn = findViewById(R.id.button);</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                tv.setText(stringFromJNI(getApplicationContext()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A native method that is implemented by the &#x27;native-lib&#x27; native library,</span></span><br><span class="line"><span class="comment">     * which is packaged with this application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在shared_prefs下反映为两个如下的xml</p><p>one.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span>lilac<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>two.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在程序逻辑中，我们打算在stringFromJni中做一件很简单的事：在1.xml中读取gt_m的值，在2.xml中读取gt_fp的值，然后拼接后打印。</p><p>但在代码实现上，我们打算绕个弯</p><p>在读取1.xml的name上，我们使用JNI去调用JAVA层对SharedPreference操纵的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射Context类</span></span><br><span class="line">jclass cls_Context = env-&gt;FindClass(<span class="string">&quot;android/content/Context&quot;</span>);</span><br><span class="line"><span class="comment">//反射Context类getSharedPreferences方法</span></span><br><span class="line">jmethodID mid_getSharedPreferences = env-&gt;GetMethodID(cls_Context,</span><br><span class="line">                                                      <span class="string">&quot;getSharedPreferences&quot;</span>,</span><br><span class="line">                                                      <span class="string">&quot;(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>);</span><br><span class="line"><span class="comment">//获取Context类MODE_PRIVATE属性值</span></span><br><span class="line"><span class="comment">//执行反射方法</span></span><br><span class="line">jobject obj_sharedPreferences = env-&gt;CallObjectMethod(mycontext,</span><br><span class="line">                                                      mid_getSharedPreferences, env-&gt;NewStringUTF(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">                                                      <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">jclass cls_SharedPreferences = env-&gt;FindClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>);</span><br><span class="line"><span class="comment">//反射SharedPreferences类的getString方法</span></span><br><span class="line">jmethodID mid_getString = env-&gt;GetMethodID(cls_SharedPreferences,</span><br><span class="line">                                           <span class="string">&quot;getString&quot;</span>,</span><br><span class="line">                                           <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>);</span><br><span class="line"><span class="comment">//参数类型转换</span></span><br><span class="line">jstring key_name = env-&gt;NewStringUTF(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//参数类型转换</span></span><br><span class="line">jstring default_value = env-&gt;NewStringUTF(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//执行反射方法</span></span><br><span class="line">jstring key_value1 = (jstring) env-&gt;CallObjectMethod(obj_sharedPreferences,</span><br><span class="line">                                                              mid_getString, key_name, default_value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *c_key_value1 =  env-&gt;GetStringUTFChars(key_value1, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在读取2.xml的location上，我们换个方式，既然Sharedpreference本质上是个xml文件，那么用native中原生的open函数去读可能会更隐蔽，可是open本质上也是通过底层系统调用open的方式实现，那我们直截了当通过系统调用open打开这个xml也是一样。（处理时，我懒得切割字符串，所以直接拼接two.xml整个xml吧。）</p><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;sys/syscall.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line"></span><br><span class="line">__attribute__((naked))</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">raw_syscall</span><span class="params">(<span class="keyword">long</span> _number,...)</span></span>&#123;</span><br><span class="line">    <span class="function">__asm__ <span class="title">__volatile__</span> <span class="params">(<span class="string">&quot;MOV R12,SP\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;STMFD SP!,&#123;R4-R7&#125;\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;MOV R7,R0\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;MOV R0,R1\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;MOV R1,R2\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;MOV R2,R3\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;LDMIA R12,&#123;R3-R6&#125;\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;SVC 0\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;LDMFD SP!,&#123;R4-R7&#125;\r\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="string">&quot;mov pc,lr&quot;</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* test_syscall(<span class="keyword">const</span> <span class="keyword">char</span>* file_path)&#123;</span><br><span class="line">    <span class="keyword">char</span> *result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">long</span> fd = raw_syscall(<span class="number">5</span>,file_path, O_RDONLY | O_CREAT, <span class="number">400</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        raw_syscall(<span class="number">3</span>, fd, buffer, <span class="number">0x100</span>);</span><br><span class="line">        result = buffer;</span><br><span class="line">        raw_syscall(<span class="number">6</span>, fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extern <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_roysue_readsp_MainActivity_stringFromJNI</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject <span class="comment">/* this */</span>, jobject mycontext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射Context类</span></span><br><span class="line">    jclass cls_Context = env-&gt;FindClass(<span class="string">&quot;android/content/Context&quot;</span>);</span><br><span class="line">    <span class="comment">//反射Context类getSharedPreferences方法</span></span><br><span class="line">    jmethodID mid_getSharedPreferences = env-&gt;GetMethodID(cls_Context,</span><br><span class="line">                                                          <span class="string">&quot;getSharedPreferences&quot;</span>,</span><br><span class="line">                                                          <span class="string">&quot;(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>);</span><br><span class="line">    <span class="comment">//获取Context类MODE_PRIVATE属性值</span></span><br><span class="line">    <span class="comment">//执行反射方法</span></span><br><span class="line">    jobject obj_sharedPreferences = env-&gt;CallObjectMethod(mycontext,</span><br><span class="line">                                                          mid_getSharedPreferences, env-&gt;NewStringUTF(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">                                                          <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    jclass cls_SharedPreferences = env-&gt;FindClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>);</span><br><span class="line">    <span class="comment">//反射SharedPreferences类的getString方法</span></span><br><span class="line">    jmethodID mid_getString = env-&gt;GetMethodID(cls_SharedPreferences,</span><br><span class="line">                                               <span class="string">&quot;getString&quot;</span>,</span><br><span class="line">                                               <span class="string">&quot;(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="comment">//参数类型转换</span></span><br><span class="line">    jstring key_name = env-&gt;NewStringUTF(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="comment">//参数类型转换</span></span><br><span class="line">    jstring default_value = env-&gt;NewStringUTF(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="comment">//执行反射方法</span></span><br><span class="line">    jstring key_value1 = (jstring) env-&gt;CallObjectMethod(obj_sharedPreferences,</span><br><span class="line">                                                                  mid_getString, key_name, default_value);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *c_key_value1 =  env-&gt;GetStringUTFChars(key_value1, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *path = <span class="string">&quot;/data/data/com.roysue.readsp/shared_prefs/two.xml&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *result = test_syscall(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> dest[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line">    strcpy(dest,c_key_value1);</span><br><span class="line">    strcat(dest,result);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果即</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lilac<span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，因为只是一个demo，所以有些地方采用了硬编码，自己跑代码的时候，如果无法顺利跑出结果，请检查是否是路径等硬编码与本机环境不符，或者在微信联系我，很荣幸和同侪交流互动。</p><h3 id="三、Unidbg模拟执行demo1"><a href="#三、Unidbg模拟执行demo1" class="headerlink" title="三、Unidbg模拟执行demo1"></a>三、Unidbg模拟执行demo1</h3><p>首先想一下我们可能遇到的问题，应该就是两个</p><ul><li>补JAVA环境（one.xml的读取是通过JNI调用JAVA层API实现的）</li><li>补文件访问/重定向 (two.xml的读取，最终通过open系统调用实现，需要将文件重定向到本机某个位置</li></ul><p>快开干</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    demo1()&#123;</span><br><span class="line">        <span class="comment">// 防止进程名检测</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.readSp&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\pr0214\\Desktop\\DTA\\unidbg\\versions\\unidbg-2021-5-17\\unidbg-master\\unidbg-android\\src\\test\\java\\com\\lession8\\libnative-lib.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        </span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        Object custom = <span class="keyword">null</span>;</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(custom);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xAAC</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        demo1 test = <span class="keyword">new</span> demo1();</span><br><span class="line">        System.out.println(test.call());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://img-blog.csdnimg.cn/20210618132454781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>JAVA环境缺失，在获取getSharedPreferences，对应于开发中的这一步</p><p><img src="https://img-blog.csdnimg.cn/20210618132510134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法参数1是Sharedpreference的名字，参数2默认为0即可，返回SharedPreferences对象。</p><p>我们补一个空的SharedPreferences返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们需要思考一下，这样真的好吗？</p><p>假设APP在JNI中从五个SharedPreferences里读了十五个键值对，并且不同xml的键名有重复，如果每次取SharedPreferences时我们都返回空对象，那后面怎么区分a.xml和b.xml里键名都是name的数据呢？</p><p>先前我们说，参数1是想要获取的SharedPreferences的名字，应该把它放对象里返回，这样就有了”标识性“</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>).newObject(vaList.getObject(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续运行</p><p><img src="https://img-blog.csdnimg.cn/20210618132525627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>显然，这儿就是在获取one.xml的name所对应的值，我们应该返回lilac</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>).newObject(vaList.getObject(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/SharedPreferences-&gt;getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;lilac&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做固然可以，但能不能更严谨规范一些呢？当然可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>).newObject(vaList.getObject(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/SharedPreferences-&gt;getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">// 如果是one.xml</span></span><br><span class="line">            <span class="keyword">if</span>(((StringObject) dvmObject.getValue()).getValue().equals(<span class="string">&quot;one&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 如果键是name</span></span><br><span class="line">                <span class="keyword">if</span> (vaList.getObject(<span class="number">0</span>).getValue().equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;lilac&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着运行</p><p><img src="https://img-blog.csdnimg.cn/20210618132535497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>显然，对one.xml的读取已经顺利完成了，可是千万别忘了，two.xml呢？</p><p>为什么没有做拼接？或者说，为什么Unidbg没有提醒我们对文件进行重定向？two.xml 我们还没操作呢！</p><p>这是因为我们对two.xml的操作采用系统调用的方式完成，但我们没有打开Unidbg中系统调用的日志显示。</p><p>如下打开对arm32中系统调用的日志显示</p><p><img src="https://img-blog.csdnimg.cn/20210618132544212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再次运行<br><img src="https://img-blog.csdnimg.cn/20210618132557819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>事实上，我建议运行真实样本时，开启所有的日志以防错过重要的环境缺失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">Logger.getLogger(<span class="string">&quot;com.github.unidbg.unix.UnixSyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">Logger.getLogger(<span class="string">&quot;com.github.unidbg.AbstractEmulator&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.DalvikVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.BaseVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm&quot;</span>).setLevel(Level.DEBUG);</span><br></pre></td></tr></table></figure><p>上篇中，我们讲了两种方式补文件访问</p><p>1是Unidbg提供的rootfs虚拟文件系统，2是代码方式文件重定向 大家自行选择，有人可能会问，如果我不想传入文件，能不能只传入”字符串“，当然可以，从SimpleFileIO换成ByteArrayFileIO即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;/data/data/com.roysue.readsp/shared_prefs/two.xml&quot;</span>.equals(pathname)) &#123;</span><br><span class="line">        <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;mytest&quot;</span>.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.FileResult;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.IOResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.file.ByteArrayFileIO;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> <span class="keyword">implements</span> <span class="title">IOResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    demo1()&#123;</span><br><span class="line">        <span class="comment">// 防止进程名检测</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.readSp&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        emulator.getSyscallHandler().addIOResolver(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession8\\libnative-lib.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        Object custom = <span class="keyword">null</span>;</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(custom);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xAAC</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/SharedPreferences&quot;</span>).newObject(vaList.getObject(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/SharedPreferences-&gt;getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">                <span class="comment">// 如果是one.xml</span></span><br><span class="line">                <span class="keyword">if</span>(((StringObject) dvmObject.getValue()).getValue().equals(<span class="string">&quot;one&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">// 如果键是name</span></span><br><span class="line">                    <span class="keyword">if</span> (vaList.getObject(<span class="number">0</span>).getValue().equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;lilac&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        demo1 test = <span class="keyword">new</span> demo1();</span><br><span class="line">        System.out.println(test.call());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;/data/data/com.roysue.readsp/shared_prefs/two.xml&quot;</span>.equals(pathname)) &#123;</span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> ByteArrayFileIO(oflags, pathname, <span class="string">&quot;mytest&quot;</span>.getBytes()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210618132625361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四、demo2设计"><a href="#四、demo2设计" class="headerlink" title="四、demo2设计"></a>四、demo2设计</h3><p>各类加密算法大部分都有密钥的存在，非对称加密算法还有公钥私钥之分，所以加密算法运算时需要传入密钥，但是直接参数方式传递很容易被分析者意识到这是密钥，有没有办法更隐蔽一些呢？</p><p>比如我们把密钥放在xml中，在native中读取它，就类似于demo1</p><p>有没有更隐蔽一些些的呢，我们可以把密钥藏在资源文件的图片里，即在so里读取资源文件里的某张图片，以它的某部分或者整体的md5结果作为密钥？这是一个更好的方案。</p><p>demo2就是这个方案的简单实现——native中读取资源文件的1.jpg，并求其md5值，返回JAVA层。</p><p>看一下代码</p><p>JAVA层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.roysue.readasset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.res.AssetManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the &#x27;native-lib&#x27; library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        TextView tv = findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(setNativeAssetManager(getAssets()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">setNativeAssetManager</span><span class="params">(AssetManager assetManager)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Native层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include <span class="string">&quot;android/asset_manager.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;android/asset_manager_jni.h&quot;</span></span><br><span class="line"></span><br><span class="line">#define MD5_LONG unsigned <span class="keyword">long</span></span><br><span class="line"><span class="comment">// 分组大小</span></span><br><span class="line">#define MD5_CBLOCK<span class="number">64</span></span><br><span class="line"><span class="comment">// 分块个数</span></span><br><span class="line">#<span class="function">define <span class="title">MD5_LBLOCK</span><span class="params">(MD5_CBLOCK/<span class="number">4</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 摘要长度（字节）</span></span></span><br><span class="line"><span class="function">#define MD5_DIGEST_LENGTH 16</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#define MD32_REG_T <span class="keyword">long</span></span></span><br><span class="line"><span class="function"><span class="comment">// 小端序</span></span></span><br><span class="line"><span class="function">#define DATA_ORDER_IS_LITTLE_ENDIAN</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 四个初始化常量</span></span></span><br><span class="line"><span class="function">#define <span class="title">INIT_DATA_A</span> <span class="params">(unsigned <span class="keyword">long</span>)</span>0x67452301L</span></span><br><span class="line"><span class="function">#define <span class="title">INIT_DATA_B</span> <span class="params">(unsigned <span class="keyword">long</span>)</span>0xefcdab89L</span></span><br><span class="line"><span class="function">#define <span class="title">INIT_DATA_C</span> <span class="params">(unsigned <span class="keyword">long</span>)</span>0x98badcfeL</span></span><br><span class="line"><span class="function">#define <span class="title">INIT_DATA_D</span> <span class="params">(unsigned <span class="keyword">long</span>)</span>0x10325476L</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 循环左移以及取低64位</span></span></span><br><span class="line"><span class="function">#define <span class="title">ROTATE</span><span class="params">(a,n)</span>     <span class="params">(((a)</span>&lt;&lt;<span class="params">(n)</span>)|<span class="params">(((a)</span>&amp;0xffffffff)&gt;&gt;<span class="params">(<span class="number">32</span>-(n)</span>)))</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 大小端序互转</span></span></span><br><span class="line"><span class="function">#define <span class="title">HOST_c2l</span><span class="params">(c,l)</span><span class="params">(l =(((unsigned <span class="keyword">long</span>)</span><span class="params">(*((c)</span>++)))    ),\</span></span><br><span class="line"><span class="function"> l|</span>=(((unsigned <span class="keyword">long</span>)(*((c)++)))&lt;&lt; <span class="number">8</span>),\</span><br><span class="line"> l|=(((unsigned <span class="keyword">long</span>)(*((c)++)))&lt;&lt;<span class="number">16</span>),\</span><br><span class="line"> l|=(((unsigned <span class="keyword">long</span>)(*((c)++)))&lt;&lt;<span class="number">24</span>))</span><br><span class="line"></span><br><span class="line">#<span class="function">define <span class="title">HOST_l2c</span><span class="params">(l,c)</span><span class="params">(*((c)</span>++)</span>=(unsigned <span class="keyword">char</span>)(((l)    )&amp;<span class="number">0xff</span>),\</span><br><span class="line"> *((c)++)=(unsigned <span class="keyword">char</span>)(((l)&gt;&gt; <span class="number">8</span>)&amp;<span class="number">0xff</span>),\</span><br><span class="line"> *((c)++)=(unsigned <span class="keyword">char</span>)(((l)&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>),\</span><br><span class="line"> *((c)++)=(unsigned <span class="keyword">char</span>)(((l)&gt;&gt;<span class="number">24</span>)&amp;<span class="number">0xff</span>),\</span><br><span class="line"> l)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新链接变量值</span></span><br><span class="line">#<span class="function">define<span class="title">HASH_MAKE_STRING</span><span class="params">(c,s)</span><span class="keyword">do</span> </span>&#123;\</span><br><span class="line">unsigned <span class="keyword">long</span> ll;\</span><br><span class="line">ll=(c)-&gt;A; (<span class="keyword">void</span>)HOST_l2c(ll,(s));\</span><br><span class="line">ll=(c)-&gt;B; (<span class="keyword">void</span>)HOST_l2c(ll,(s));\</span><br><span class="line">ll=(c)-&gt;C; (<span class="keyword">void</span>)HOST_l2c(ll,(s));\</span><br><span class="line">ll=(c)-&gt;D; (<span class="keyword">void</span>)HOST_l2c(ll,(s));\</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四个初始化非线性函数，或者叫逻辑函数</span></span><br><span class="line">#<span class="function">define<span class="title">F</span><span class="params">(b,c,d)</span><span class="params">((((c)</span> ^ <span class="params">(d)</span>) &amp; <span class="params">(b)</span>) ^ <span class="params">(d)</span>)</span></span><br><span class="line"><span class="function">#define<span class="title">G</span><span class="params">(b,c,d)</span><span class="params">((((b)</span> ^ <span class="params">(c)</span>) &amp; <span class="params">(d)</span>) ^ <span class="params">(c)</span>)</span></span><br><span class="line"><span class="function">#define<span class="title">H</span><span class="params">(b,c,d)</span><span class="params">((b)</span> ^ <span class="params">(c)</span> ^ <span class="params">(d)</span>)</span></span><br><span class="line"><span class="function">#define<span class="title">I</span><span class="params">(b,c,d)</span><span class="params">(((~(d)</span>) | <span class="params">(b)</span>) ^ <span class="params">(c)</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// F函数，每隔16步/轮 换下一个</span></span></span><br><span class="line"><span class="function">#define <span class="title">R0</span><span class="params">(a,b,c,d,k,s,t)</span> </span>&#123; \</span><br><span class="line">a+=((k)+(t)+F((b),(c),(d))); \</span><br><span class="line">a=ROTATE(a,s); \</span><br><span class="line">a+=b; &#125;;</span><br><span class="line"></span><br><span class="line">#<span class="function">define <span class="title">R1</span><span class="params">(a,b,c,d,k,s,t)</span> </span>&#123; \</span><br><span class="line">a+=((k)+(t)+G((b),(c),(d))); \</span><br><span class="line">a=ROTATE(a,s); \</span><br><span class="line">a+=b;&#125;;</span><br><span class="line"></span><br><span class="line">#<span class="function">define <span class="title">R2</span><span class="params">(a,b,c,d,k,s,t)</span> </span>&#123; \</span><br><span class="line">a+=((k)+(t)+H((b),(c),(d))); \</span><br><span class="line">a=ROTATE(a,s); \</span><br><span class="line">a+=b; &#125;;</span><br><span class="line"></span><br><span class="line">#<span class="function">define <span class="title">R3</span><span class="params">(a,b,c,d,k,s,t)</span> </span>&#123; \</span><br><span class="line">a+=((k)+(t)+I((b),(c),(d))); \</span><br><span class="line">a=ROTATE(a,s); \</span><br><span class="line">a+=b; &#125;;</span><br><span class="line"></span><br><span class="line">typedef struct MD5state_st1&#123;</span><br><span class="line">    MD5_LONG A,B,C,D; <span class="comment">// ABCD</span></span><br><span class="line">    MD5_LONG Nl,Nh; <span class="comment">// 数据的bit数计数器(对2^64取余)，Nh存储高32位，Nl存储低32位。这种设计是服务于32位处理器，MD5的设计就是为了服务于32位处理器的。</span></span><br><span class="line">    MD5_LONG data[MD5_LBLOCK];<span class="comment">//数据缓冲区</span></span><br><span class="line">    unsigned <span class="keyword">int</span> num;</span><br><span class="line">&#125;MD5_CTX; <span class="comment">// 存放MD5算法相关信息的结构体定义</span></span><br><span class="line"></span><br><span class="line">unsigned <span class="keyword">char</span> cleanse_ctr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链接变量/幻数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5_Init</span><span class="params">(MD5_CTX *c)</span></span>&#123;</span><br><span class="line">    memset (c,<span class="number">0</span>,sizeof(*c));</span><br><span class="line">    c-&gt;A=INIT_DATA_A;</span><br><span class="line">    c-&gt;B=INIT_DATA_B;</span><br><span class="line">    c-&gt;C=INIT_DATA_C;</span><br><span class="line">    c-&gt;D=INIT_DATA_D;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// md5 一个分组中的全部运算</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">md5_block_data_order</span><span class="params">(MD5_CTX *c, <span class="keyword">const</span> <span class="keyword">void</span> *data_, unsigned <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> unsigned <span class="keyword">char</span> *data= static_cast&lt;<span class="keyword">const</span> unsigned <span class="keyword">char</span> *&gt;(data_);</span><br><span class="line">    register unsigned MD32_REG_T A,B,C,D,l;</span><br><span class="line">#ifndef MD32_XARRAY</span><br><span class="line">    unsigned MD32_REG_TXX0, XX1, XX2, XX3, XX4, XX5, XX6, XX7,</span><br><span class="line">            XX8, XX9,XX10,XX11,XX12,XX13,XX14,XX15;</span><br><span class="line"># <span class="function">define <span class="title">X</span><span class="params">(i)</span>XX##i</span></span><br><span class="line"><span class="function">#<span class="keyword">else</span></span></span><br><span class="line"><span class="function">    MD5_LONG XX[MD5_LBLOCK]</span>;</span><br><span class="line"># <span class="function">define <span class="title">X</span><span class="params">(i)</span>XX[i]</span></span><br><span class="line"><span class="function">#endif</span></span><br><span class="line"><span class="function">    A</span>=c-&gt;A;</span><br><span class="line">    B=c-&gt;B;</span><br><span class="line">    C=c-&gt;C;</span><br><span class="line">    D=c-&gt;D;</span><br><span class="line">    <span class="comment">// 64轮</span></span><br><span class="line">    <span class="comment">// 前16轮需要改变分组中每个分块的</span></span><br><span class="line">    <span class="keyword">for</span> (;num--;)&#123;</span><br><span class="line">        HOST_c2l(data,l); X( <span class="number">0</span>)=l;HOST_c2l(data,l); X( <span class="number">1</span>)=l;</span><br><span class="line">        <span class="comment">/* Round 0 */</span></span><br><span class="line">        R0(A,B,C,D,X( <span class="number">0</span>), <span class="number">7</span>,<span class="number">0xd76aa478L</span>);HOST_c2l(data,l); X( <span class="number">2</span>)=l;</span><br><span class="line">        R0(D,A,B,C,X( <span class="number">1</span>),<span class="number">12</span>,<span class="number">0xe8c7b756L</span>);HOST_c2l(data,l); X( <span class="number">3</span>)=l;</span><br><span class="line">        R0(C,D,A,B,X( <span class="number">2</span>),<span class="number">17</span>,<span class="number">0x242070dbL</span>);HOST_c2l(data,l); X( <span class="number">4</span>)=l;</span><br><span class="line">        R0(B,C,D,A,X( <span class="number">3</span>),<span class="number">22</span>,<span class="number">0xc1bdceeeL</span>);HOST_c2l(data,l); X( <span class="number">5</span>)=l;</span><br><span class="line">        R0(A,B,C,D,X( <span class="number">4</span>), <span class="number">7</span>,<span class="number">0xf57c0fafL</span>);HOST_c2l(data,l); X( <span class="number">6</span>)=l;</span><br><span class="line">        R0(D,A,B,C,X( <span class="number">5</span>),<span class="number">12</span>,<span class="number">0x4787c62aL</span>);HOST_c2l(data,l); X( <span class="number">7</span>)=l;</span><br><span class="line">        R0(C,D,A,B,X( <span class="number">6</span>),<span class="number">17</span>,<span class="number">0xa8304613L</span>);HOST_c2l(data,l); X( <span class="number">8</span>)=l;</span><br><span class="line">        R0(B,C,D,A,X( <span class="number">7</span>),<span class="number">22</span>,<span class="number">0xfd469501L</span>);HOST_c2l(data,l); X( <span class="number">9</span>)=l;</span><br><span class="line">        R0(A,B,C,D,X( <span class="number">8</span>), <span class="number">7</span>,<span class="number">0x698098d8L</span>);HOST_c2l(data,l); X(<span class="number">10</span>)=l;</span><br><span class="line">        R0(D,A,B,C,X( <span class="number">9</span>),<span class="number">12</span>,<span class="number">0x8b44f7afL</span>);HOST_c2l(data,l); X(<span class="number">11</span>)=l;</span><br><span class="line">        R0(C,D,A,B,X(<span class="number">10</span>),<span class="number">17</span>,<span class="number">0xffff5bb1L</span>);HOST_c2l(data,l); X(<span class="number">12</span>)=l;</span><br><span class="line">        R0(B,C,D,A,X(<span class="number">11</span>),<span class="number">22</span>,<span class="number">0x895cd7beL</span>);HOST_c2l(data,l); X(<span class="number">13</span>)=l;</span><br><span class="line">        R0(A,B,C,D,X(<span class="number">12</span>), <span class="number">7</span>,<span class="number">0x6b901122L</span>);HOST_c2l(data,l); X(<span class="number">14</span>)=l;</span><br><span class="line">        R0(D,A,B,C,X(<span class="number">13</span>),<span class="number">12</span>,<span class="number">0xfd987193L</span>);HOST_c2l(data,l); X(<span class="number">15</span>)=l;</span><br><span class="line">        R0(C,D,A,B,X(<span class="number">14</span>),<span class="number">17</span>,<span class="number">0xa679438eL</span>);</span><br><span class="line">        R0(B,C,D,A,X(<span class="number">15</span>),<span class="number">22</span>,<span class="number">0x49b40821L</span>);</span><br><span class="line">        <span class="comment">/* Round 1 */</span></span><br><span class="line">        R1(A,B,C,D,X( <span class="number">1</span>), <span class="number">5</span>,<span class="number">0xf61e2562L</span>);</span><br><span class="line">        R1(D,A,B,C,X( <span class="number">6</span>), <span class="number">9</span>,<span class="number">0xc040b340L</span>);</span><br><span class="line">        R1(C,D,A,B,X(<span class="number">11</span>),<span class="number">14</span>,<span class="number">0x265e5a51L</span>);</span><br><span class="line">        R1(B,C,D,A,X( <span class="number">0</span>),<span class="number">20</span>,<span class="number">0xe9b6c7aaL</span>);</span><br><span class="line">        R1(A,B,C,D,X( <span class="number">5</span>), <span class="number">5</span>,<span class="number">0xd62f105dL</span>);</span><br><span class="line">        R1(D,A,B,C,X(<span class="number">10</span>), <span class="number">9</span>,<span class="number">0x02441453L</span>);</span><br><span class="line">        R1(C,D,A,B,X(<span class="number">15</span>),<span class="number">14</span>,<span class="number">0xd8a1e681L</span>);</span><br><span class="line">        R1(B,C,D,A,X( <span class="number">4</span>),<span class="number">20</span>,<span class="number">0xe7d3fbc8L</span>);</span><br><span class="line">        R1(A,B,C,D,X( <span class="number">9</span>), <span class="number">5</span>,<span class="number">0x21e1cde6L</span>);</span><br><span class="line">        R1(D,A,B,C,X(<span class="number">14</span>), <span class="number">9</span>,<span class="number">0xc33707d6L</span>);</span><br><span class="line">        R1(C,D,A,B,X( <span class="number">3</span>),<span class="number">14</span>,<span class="number">0xf4d50d87L</span>);</span><br><span class="line">        R1(B,C,D,A,X( <span class="number">8</span>),<span class="number">20</span>,<span class="number">0x455a14edL</span>);</span><br><span class="line">        R1(A,B,C,D,X(<span class="number">13</span>), <span class="number">5</span>,<span class="number">0xa9e3e905L</span>);</span><br><span class="line">        R1(D,A,B,C,X( <span class="number">2</span>), <span class="number">9</span>,<span class="number">0xfcefa3f8L</span>);</span><br><span class="line">        R1(C,D,A,B,X( <span class="number">7</span>),<span class="number">14</span>,<span class="number">0x676f02d9L</span>);</span><br><span class="line">        R1(B,C,D,A,X(<span class="number">12</span>),<span class="number">20</span>,<span class="number">0x8d2a4c8aL</span>);</span><br><span class="line">        <span class="comment">/* Round 2 */</span></span><br><span class="line">        R2(A,B,C,D,X( <span class="number">5</span>), <span class="number">4</span>,<span class="number">0xfffa3942L</span>);</span><br><span class="line">        R2(D,A,B,C,X( <span class="number">8</span>),<span class="number">11</span>,<span class="number">0x8771f681L</span>);</span><br><span class="line">        R2(C,D,A,B,X(<span class="number">11</span>),<span class="number">16</span>,<span class="number">0x6d9d6122L</span>);</span><br><span class="line">        R2(B,C,D,A,X(<span class="number">14</span>),<span class="number">23</span>,<span class="number">0xfde5380cL</span>);</span><br><span class="line">        R2(A,B,C,D,X( <span class="number">1</span>), <span class="number">4</span>,<span class="number">0xa4beea44L</span>);</span><br><span class="line">        R2(D,A,B,C,X( <span class="number">4</span>),<span class="number">11</span>,<span class="number">0x4bdecfa9L</span>);</span><br><span class="line">        R2(C,D,A,B,X( <span class="number">7</span>),<span class="number">16</span>,<span class="number">0xf6bb4b60L</span>);</span><br><span class="line">        R2(B,C,D,A,X(<span class="number">10</span>),<span class="number">23</span>,<span class="number">0xbebfbc70L</span>);</span><br><span class="line">        R2(A,B,C,D,X(<span class="number">13</span>), <span class="number">4</span>,<span class="number">0x289b7ec6L</span>);</span><br><span class="line">        R2(D,A,B,C,X( <span class="number">0</span>),<span class="number">11</span>,<span class="number">0xeaa127faL</span>);</span><br><span class="line">        R2(C,D,A,B,X( <span class="number">3</span>),<span class="number">16</span>,<span class="number">0xd4ef3085L</span>);</span><br><span class="line">        R2(B,C,D,A,X( <span class="number">6</span>),<span class="number">23</span>,<span class="number">0x04881d05L</span>);</span><br><span class="line">        R2(A,B,C,D,X( <span class="number">9</span>), <span class="number">4</span>,<span class="number">0xd9d4d039L</span>);</span><br><span class="line">        R2(D,A,B,C,X(<span class="number">12</span>),<span class="number">11</span>,<span class="number">0xe6db99e5L</span>);</span><br><span class="line">        R2(C,D,A,B,X(<span class="number">15</span>),<span class="number">16</span>,<span class="number">0x1fa27cf8L</span>);</span><br><span class="line">        R2(B,C,D,A,X( <span class="number">2</span>),<span class="number">23</span>,<span class="number">0xc4ac5665L</span>);</span><br><span class="line">        <span class="comment">/* Round 3 */</span></span><br><span class="line">        R3(A,B,C,D,X( <span class="number">0</span>), <span class="number">6</span>,<span class="number">0xf4292244L</span>);</span><br><span class="line">        R3(D,A,B,C,X( <span class="number">7</span>),<span class="number">10</span>,<span class="number">0x432aff97L</span>);</span><br><span class="line">        R3(C,D,A,B,X(<span class="number">14</span>),<span class="number">15</span>,<span class="number">0xab9423a7L</span>);</span><br><span class="line">        R3(B,C,D,A,X( <span class="number">5</span>),<span class="number">21</span>,<span class="number">0xfc93a039L</span>);</span><br><span class="line">        R3(A,B,C,D,X(<span class="number">12</span>), <span class="number">6</span>,<span class="number">0x655b59c3L</span>);</span><br><span class="line">        R3(D,A,B,C,X( <span class="number">3</span>),<span class="number">10</span>,<span class="number">0x8f0ccc92L</span>);</span><br><span class="line">        R3(C,D,A,B,X(<span class="number">10</span>),<span class="number">15</span>,<span class="number">0xffeff47dL</span>);</span><br><span class="line">        R3(B,C,D,A,X( <span class="number">1</span>),<span class="number">21</span>,<span class="number">0x85845dd1L</span>);</span><br><span class="line">        R3(A,B,C,D,X( <span class="number">8</span>), <span class="number">6</span>,<span class="number">0x6fa87e4fL</span>);</span><br><span class="line">        R3(D,A,B,C,X(<span class="number">15</span>),<span class="number">10</span>,<span class="number">0xfe2ce6e0L</span>);</span><br><span class="line">        R3(C,D,A,B,X( <span class="number">6</span>),<span class="number">15</span>,<span class="number">0xa3014314L</span>);</span><br><span class="line">        R3(B,C,D,A,X(<span class="number">13</span>),<span class="number">21</span>,<span class="number">0x4e0811a1L</span>);</span><br><span class="line">        R3(A,B,C,D,X( <span class="number">4</span>), <span class="number">6</span>,<span class="number">0xf7537e82L</span>);</span><br><span class="line">        R3(D,A,B,C,X(<span class="number">11</span>),<span class="number">10</span>,<span class="number">0xbd3af235L</span>);</span><br><span class="line">        R3(C,D,A,B,X( <span class="number">2</span>),<span class="number">15</span>,<span class="number">0x2ad7d2bbL</span>);</span><br><span class="line">        R3(B,C,D,A,X( <span class="number">9</span>),<span class="number">21</span>,<span class="number">0xeb86d391L</span>);</span><br><span class="line"></span><br><span class="line">        A = c-&gt;A += A;</span><br><span class="line">        B = c-&gt;B += B;</span><br><span class="line">        C = c-&gt;C += C;</span><br><span class="line">        D = c-&gt;D += D;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入需要哈希的明文,支持多次调用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5_Update</span><span class="params">(MD5_CTX *c, <span class="keyword">const</span> <span class="keyword">void</span> *data_, size_t len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> unsigned <span class="keyword">char</span> *data= static_cast&lt;<span class="keyword">const</span> unsigned <span class="keyword">char</span> *&gt;(data_);</span><br><span class="line">    unsigned <span class="keyword">char</span> *p;</span><br><span class="line">    MD5_LONG l;</span><br><span class="line">    size_t n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 低位</span></span><br><span class="line">    l=(c-&gt;Nl+(((MD5_LONG)len)&lt;&lt;<span class="number">3</span>))&amp;0xffffffffUL;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; c-&gt;Nl)</span><br><span class="line">        c-&gt;Nh++;</span><br><span class="line">    <span class="comment">// 高位</span></span><br><span class="line">    c-&gt;Nh+=(MD5_LONG)(len&gt;&gt;<span class="number">29</span>);</span><br><span class="line">    c-&gt;Nl=l;</span><br><span class="line"></span><br><span class="line">    n = c-&gt;num;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">0</span>)&#123;</span><br><span class="line">        p=(unsigned <span class="keyword">char</span> *)c-&gt;data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len &gt;= MD5_CBLOCK || len+n &gt;= MD5_CBLOCK)&#123;</span><br><span class="line">            memcpy (p+n,data,MD5_CBLOCK-n);</span><br><span class="line">            md5_block_data_order(c,p,<span class="number">1</span>);</span><br><span class="line">            n      = MD5_CBLOCK-n;</span><br><span class="line">            data  += n;</span><br><span class="line">            len   -= n;</span><br><span class="line">            c-&gt;num = <span class="number">0</span>;</span><br><span class="line">            memset (p,<span class="number">0</span>,MD5_CBLOCK);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            memcpy (p+n,data,len);</span><br><span class="line">            c-&gt;num += (unsigned <span class="keyword">int</span>)len;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n = len/MD5_CBLOCK;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        md5_block_data_order(c,data,n);</span><br><span class="line">        n    *= MD5_CBLOCK;</span><br><span class="line">        data += n;</span><br><span class="line">        len  -= n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len != <span class="number">0</span>)&#123;</span><br><span class="line">        p = (unsigned <span class="keyword">char</span> *)c-&gt;data;</span><br><span class="line">        c-&gt;num = (unsigned <span class="keyword">int</span>)len;</span><br><span class="line">        memcpy (p,data,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得出最终结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5_Final</span><span class="params">(unsigned <span class="keyword">char</span> *md, MD5_CTX *c)</span></span>&#123;</span><br><span class="line">    unsigned <span class="keyword">char</span> *p = (unsigned <span class="keyword">char</span> *)c-&gt;data;</span><br><span class="line">    size_t n = c-&gt;num;</span><br><span class="line"></span><br><span class="line">    p[n] = <span class="number">0x80</span>; <span class="comment">/* there is always room for one */</span></span><br><span class="line">    n++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; (MD5_CBLOCK-<span class="number">8</span>))&#123;</span><br><span class="line">        memset (p+n,<span class="number">0</span>,MD5_CBLOCK-n);</span><br><span class="line">        n=<span class="number">0</span>;</span><br><span class="line">        md5_block_data_order(c,p,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    memset (p+n,<span class="number">0</span>,MD5_CBLOCK-<span class="number">8</span>-n);</span><br><span class="line"></span><br><span class="line">    p += MD5_CBLOCK-<span class="number">8</span>;</span><br><span class="line">#<span class="function"><span class="keyword">if</span>   <span class="title">defined</span><span class="params">(DATA_ORDER_IS_BIG_ENDIAN)</span></span></span><br><span class="line"><span class="function">    <span class="params">(<span class="keyword">void</span>)</span><span class="title">HOST_l2c</span><span class="params">(c-&gt;Nh,p)</span></span>;</span><br><span class="line">(<span class="keyword">void</span>)HOST_l2c(c-&gt;Nl,p);</span><br><span class="line">#<span class="function">elif <span class="title">defined</span><span class="params">(DATA_ORDER_IS_LITTLE_ENDIAN)</span></span></span><br><span class="line"><span class="function">    <span class="params">(<span class="keyword">void</span>)</span><span class="title">HOST_l2c</span><span class="params">(c-&gt;Nl,p)</span></span>;</span><br><span class="line">    (<span class="keyword">void</span>)HOST_l2c(c-&gt;Nh,p);</span><br><span class="line">#endif</span><br><span class="line">    p -= MD5_CBLOCK;</span><br><span class="line">    md5_block_data_order(c,p,<span class="number">1</span>);</span><br><span class="line">    c-&gt;num=<span class="number">0</span>;</span><br><span class="line">    memset (p,<span class="number">0</span>,MD5_CBLOCK);</span><br><span class="line"></span><br><span class="line">#ifndef HASH_MAKE_STRING</span><br><span class="line">#error <span class="string">&quot;HASH_MAKE_STRING must be defined!&quot;</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">    HASH_MAKE_STRING(c,md);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除加载的各种算法，包括对称算法、摘要算法以及 PBE 算法，并清除这些算法相关的哈希表的内容。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OPENSSL_cleanse</span><span class="params">(<span class="keyword">void</span> *ptr, size_t len)</span></span>&#123;</span><br><span class="line">    unsigned <span class="keyword">char</span> *p = static_cast&lt;unsigned <span class="keyword">char</span> *&gt;(ptr);</span><br><span class="line">    size_t loop = len, ctr = cleanse_ctr;</span><br><span class="line">    <span class="keyword">while</span>(loop--)&#123;</span><br><span class="line">        *(p++) = (unsigned <span class="keyword">char</span>)ctr;</span><br><span class="line">        ctr += (<span class="number">17</span> + ((size_t)p &amp; <span class="number">0xF</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    p= static_cast&lt;unsigned <span class="keyword">char</span> *&gt;(memchr(ptr, (unsigned <span class="keyword">char</span>) ctr, len));</span><br><span class="line">    <span class="keyword">if</span>(p)</span><br><span class="line">        ctr += (<span class="number">63</span> + (size_t)p);</span><br><span class="line">    cleanse_ctr = (unsigned <span class="keyword">char</span>)ctr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算图片的md5值并返回</span></span><br><span class="line">extern <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_roysue_readasset_MainActivity_setNativeAssetManager</span><span class="params">(JNIEnv *env, jobject thiz,jobject asset_manager)</span> </span>&#123;</span><br><span class="line">    AAssetManager *nativeasset = AAssetManager_fromJava(env, asset_manager);</span><br><span class="line">    </span><br><span class="line">    AAsset *assetFile = AAssetManager_open(nativeasset, <span class="string">&quot;1.png&quot;</span>, AASSET_MODE_BUFFER);</span><br><span class="line">    size_t fileLength = AAsset_getLength(assetFile);</span><br><span class="line">    <span class="keyword">char</span> *dataBuffer = (<span class="keyword">char</span> *) malloc(fileLength);</span><br><span class="line">    <span class="comment">//read file data</span></span><br><span class="line">    AAsset_read(assetFile, dataBuffer, fileLength);</span><br><span class="line">    <span class="comment">//the data has been copied to dataBuffer2, so , close it</span></span><br><span class="line">    AAsset_close(assetFile);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化MD5的上下文结构体</span></span><br><span class="line">    MD5_CTX context = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    MD5_Init(&amp;context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入待处理的内容以及内容的长度</span></span><br><span class="line">    MD5_Update(&amp;context, dataBuffer, fileLength);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收尾和输出</span></span><br><span class="line">    <span class="comment">// 输出的缓冲区</span></span><br><span class="line">    unsigned <span class="keyword">char</span> dest[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    MD5_Final(dest, &amp;context);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果转成十六进制字符串</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> szMd5[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++)&#123;</span><br><span class="line">        sprintf(szMd5, <span class="string">&quot;%s%02x&quot;</span>, szMd5, dest[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//free malloc</span></span><br><span class="line">    free(dataBuffer);</span><br><span class="line">    <span class="comment">// 传回Java世界</span></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(szMd5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdnimg.cn/20210618132838300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="五、Unidbg模拟执行demo2"><a href="#五、Unidbg模拟执行demo2" class="headerlink" title="五、Unidbg模拟执行demo2"></a>五、Unidbg模拟执行demo2</h3><p>模拟执行demo2会出现什么问题呢？<br>先看一下IDA F5 效果<br><img src="https://img-blog.csdnimg.cn/20210618132924964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再写一下Unidbg代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    demo2()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.readAssets&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession8\\demo2.apk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession8\\libnative-lib.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        Object custom = <span class="keyword">null</span>;</span><br><span class="line">        DvmObject&lt;?&gt; assetManager = vm.resolveClass(<span class="string">&quot;android/content/res/AssetManager&quot;</span>).newObject(custom);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(assetManager));</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x207C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.unix.UnixSyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.AbstractEmulator&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.DalvikVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.BaseVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        demo2 test = <span class="keyword">new</span> demo2();</span><br><span class="line">        System.out.println(<span class="string">&quot;call demo2&quot;</span>);</span><br><span class="line">        System.out.println(test.call());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://img-blog.csdnimg.cn/20210618132952419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直截了当的报错，根据traceCode定位<br><img src="https://img-blog.csdnimg.cn/20210618133004387.png" alt="在这里插入图片描述"><br>AAssetManager_fromJava函数哪来的？为什么报错？这需要我们思考两个问题</p><p>1.Android开发中，Native层如何读取Assets文件<br>2.Unidbg如何处理这情况</p><p>首先，apk资源文件的读取与demo1不同，并非简单的open了事。<br><img src="https://img-blog.csdnimg.cn/20210618133030487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210618133039120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Assets加载相关的API，比如AAssetManager_fromJava，就是由libandroid.so这个系统SO实现，但是呢，Unidbg并没有内置加载这个系统SO，我们首先看一下Unidbg完整支持的系统SO</p><p><img src="https://img-blog.csdnimg.cn/20210618133057694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以发现，其实并不是很多。</p><p>考虑两个个问题</p><ol><li> 为什么Unidbg不内置支持所有系统SO的加载</li><li> 如果一个SO的依赖SO里包含Unidbg尚未支持的系统SO，那该怎么办？</li></ol><p>先讨论第一个问题</p><p>一部分原因是大部分SO中主要的依赖项，就是Unidbg已经支持的这些，即已经够用了。把Android系统中全部SO都成功加载进Unidbg虚拟内存中，既是很大的工作量，又会占用过多内存。</p><p>另一个更主要的原因是，比如libandroid.so，其依赖SO实在太多了，想顺利加载整个SO确确实实是个苦差事！</p><p><img src="https://img-blog.csdnimg.cn/20210618133116258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再看问题2</p><p>如果SO的依赖项中有Unidbg不支持的系统SO，怎么办？</p><p>首先，Unidbg会给予提示</p><p><img src="https://img-blog.csdnimg.cn/2021061813313088.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其次，尽管SO加载了Unidbg不支持的SO，但有可能我们的目标函数并没有使用到这个系统SO，这种情况下就不用理会，当作不存在就行。</p><p>但如果目标函数使用到了这个系统SO，那就麻烦了，我们就得直面这个问题，一般有两种处理办法</p><ul><li>Patch/Hook 这个不支持的SO所使用的函数</li><li>使用Unidbg VirtualModule</li></ul><p>方法一没什么技术含量而且并不总是能用，我们主要看一下方法二。</p><p>VirtualModule是Unidbg为此种情况所提供的官方解决方案，并在代码中提供了两个示例</p><p><img src="https://img-blog.csdnimg.cn/20210618133148902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">分别是对libandroid.so以及libJniGraphics的处理<br>我们使用一下<br><img src="https://img-blog.csdnimg.cn/20210618133211197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>只用这一句即可，需要注意，一定要在样本SO加载前加载它，道理也很简单，系统SO肯定比用户SO加载早鸭。</p><p>Unidbg如何实现一个VirtualModule？此类问题我们在更后面的文章去讨论它。需要注意的是，VirtualModule并不是一种真正意义上的加载SO，它本质上也是Hook，只不过实现了SO中少数几个函数罢了。</p><p>比如AndroidModule中，只实现了libandroid中这几个常用的导出函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInitialize</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="keyword">final</span> VM vm, Map&lt;String, UnidbgPointer&gt; symbols)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> is64Bit = emulator.is64Bit();</span><br><span class="line">    SvcMemory svcMemory = emulator.getSvcMemory();</span><br><span class="line">    symbols.put(<span class="string">&quot;AAssetManager_fromJava&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> Arm64Svc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fromJava(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; : <span class="keyword">new</span> ArmSvc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fromJava(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    symbols.put(<span class="string">&quot;AAssetManager_open&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> Arm64Svc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> open(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; : <span class="keyword">new</span> ArmSvc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> open(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    symbols.put(<span class="string">&quot;AAsset_close&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> Arm64Svc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> close(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; : <span class="keyword">new</span> ArmSvc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> close(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    symbols.put(<span class="string">&quot;AAsset_getBuffer&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> Arm64Svc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getBuffer(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; : <span class="keyword">new</span> ArmSvc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getBuffer(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    symbols.put(<span class="string">&quot;AAsset_getLength&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> Arm64Svc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getLength(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; : <span class="keyword">new</span> ArmSvc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getLength(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    symbols.put(<span class="string">&quot;AAsset_read&quot;</span>, svcMemory.registerSvc(is64Bit ? <span class="keyword">new</span> Arm64Svc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BackendException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; : <span class="keyword">new</span> ArmSvc() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">handle</span><span class="params">(Emulator&lt;?&gt; emulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> read(emulator, vm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、尾声"><a href="#六、尾声" class="headerlink" title="六、尾声"></a>六、尾声</h3><p>链接：<a href="https://pan.baidu.com/s/14MNPM3Rayb2RYgDS/_T5pnw">https://pan.baidu.com/s/14MNPM3Rayb2RYgDS\_T5pnw</a><br>提取码：4974</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程七：main</title>
      <link href="/2021/06/17/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B8%83%EF%BC%9Amain/"/>
      <url>/2021/06/17/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B8%83%EF%BC%9Amain/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>一个较好的综合性样本。本篇抛砖引玉分析一下。</p><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p>这是我们的目标方法</p><p><img src="https://img-blog.csdnimg.cn/20210617192735110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参数1是203</p><p>参数2是一个对象数组</p><ul><li>9b69f861-e054-4bc4-9daf-d36ae205ed3e (String)</li><li>GET /aggroup/homepage/display __xxxxx（byte数组形式）</li><li>2 （int包装类）</li></ul><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><p>首先搭一个架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.PackageInfo;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.Signature;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.wrapper.DvmInteger;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBridge</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    NBridge()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.meituan&quot;</span>).build();</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession7\\mt.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession7\\libmtguard.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NBridge test = <span class="keyword">new</span> NBridge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210617192752197.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>从日志看，主要做了函数的动态绑定，接下来执行目标方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.PackageInfo;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.Signature;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.wrapper.DvmInteger;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBridge</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    NBridge()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.meituan&quot;</span>).build();</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession7\\mt.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession7\\libmtguard.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NBridge test = <span class="keyword">new</span> NBridge();</span><br><span class="line">        test.main203();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main203</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        list.add(<span class="number">203</span>);</span><br><span class="line">        StringObject input2_1 = <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>);</span><br><span class="line">        ByteArray input2_2 = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;GET /aggroup/homepage/display __r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        DvmInteger input2_3 = DvmInteger.valueOf(vm, <span class="number">2</span>);</span><br><span class="line">        vm.addLocalObject(input2_1);</span><br><span class="line">        vm.addLocalObject(input2_2);</span><br><span class="line">        vm.addLocalObject(input2_3);</span><br><span class="line">        <span class="comment">// 完整的参数2</span></span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> ArrayObject(input2_1, input2_2, input2_3)));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x5a38d</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边的注意点有2</p><p>1.参数如何构造</p><p>2.我没有用Unidbg封装的方式去call，其实那样可以简单一些，但是！地址！yyds！</p><p><img src="https://img-blog.csdnimg.cn/20210617192805938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>非常快的就报错退出了</p><p>这个时候使用JNItrace + Frida Call的方式看一下真实样本中的JNI执行流。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">        /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">134794</span> ms [+] JNIEnv-&gt;GetObjectArrayElement</span><br><span class="line"><span class="number">134794</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">134794</span> ms |- jobjectArray     : <span class="number">0</span>xd1c48a40</span><br><span class="line"><span class="number">134794</span> ms |- jsize            : <span class="number">0</span></span><br><span class="line"><span class="number">134794</span> ms |= jobject          : <span class="number">0</span>x11</span><br><span class="line"></span><br><span class="line"><span class="number">134794</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">134794</span> ms |-&gt; <span class="number">0</span>xc64dfeab: libmtguard.so!<span class="number">0</span>x5beab (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135008</span> ms [+] JNIEnv-&gt;GetObjectArrayElement</span><br><span class="line"><span class="number">135008</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135008</span> ms |- jobjectArray     : <span class="number">0</span>xd1c48a40</span><br><span class="line"><span class="number">135008</span> ms |- jsize            : <span class="number">1</span></span><br><span class="line"><span class="number">135008</span> ms |= jobject          : <span class="number">0</span>x21</span><br><span class="line"></span><br><span class="line"><span class="number">135008</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135008</span> ms |-&gt; <span class="number">0</span>xc64df07b: libmtguard.so!<span class="number">0</span>x5b07b (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135223</span> ms [+] JNIEnv-&gt;GetObjectArrayElement</span><br><span class="line"><span class="number">135223</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135223</span> ms |- jobjectArray     : <span class="number">0</span>xd1c48a40</span><br><span class="line"><span class="number">135223</span> ms |- jsize            : <span class="number">2</span></span><br><span class="line"><span class="number">135223</span> ms |= jobject          : <span class="number">0</span>x35</span><br><span class="line"></span><br><span class="line"><span class="number">135223</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135223</span> ms |-&gt; <span class="number">0</span>xc64df555: libmtguard.so!<span class="number">0</span>x5b555 (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135434</span> ms [+] JNIEnv-&gt;GetObjectClass</span><br><span class="line"><span class="number">135434</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135434</span> ms |- jobject          : <span class="number">0</span>x35</span><br><span class="line"><span class="number">135434</span> ms |= jclass           : <span class="number">0</span>x49</span><br><span class="line"></span><br><span class="line"><span class="number">135434</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135434</span> ms |-&gt; <span class="number">0</span>xc64df24d: libmtguard.so!<span class="number">0</span>x5b24d (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135602</span> ms [+] JNIEnv-&gt;GetMethodID</span><br><span class="line"><span class="number">135602</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135602</span> ms |- jclass           : <span class="number">0</span>x49</span><br><span class="line"><span class="number">135602</span> ms |- char*            : <span class="number">0</span>xc6569650</span><br><span class="line"><span class="number">135602</span> ms |:     intValue</span><br><span class="line"><span class="number">135602</span> ms |- char*            : <span class="number">0</span>xc6569659</span><br><span class="line"><span class="number">135602</span> ms |:     ()I</span><br><span class="line"><span class="number">135602</span> ms |= jmethodID        : <span class="number">0</span>x708253b0    &#123; intValue()I &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">135602</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135602</span> ms |-&gt; <span class="number">0</span>xc64df321: libmtguard.so!<span class="number">0</span>x5b321 (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135700</span> ms [+] JNIEnv-&gt;ExceptionCheck</span><br><span class="line"><span class="number">135700</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135700</span> ms |= jboolean         : <span class="number">0</span>    &#123; false &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">135700</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135700</span> ms |-&gt; <span class="number">0</span>xc64efa1f: libmtguard.so!<span class="number">0</span>x6ba1f (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135797</span> ms [+] JNIEnv-&gt;CallIntMethodV</span><br><span class="line"><span class="number">135797</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135797</span> ms |- jobject          : <span class="number">0</span>x35</span><br><span class="line"><span class="number">135797</span> ms |- jmethodID        : <span class="number">0</span>x708253b0    &#123; intValue()I &#125;</span><br><span class="line"><span class="number">135797</span> ms |- va_list          : <span class="number">0</span>xd1c489bc</span><br><span class="line"><span class="number">135797</span> ms |= jint             : <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">135797</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135797</span> ms |-&gt; <span class="number">0</span>xc64e0369: libmtguard.so!<span class="number">0</span>x5c369 (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">135991</span> ms [+] JNIEnv-&gt;GetStringUTFChars</span><br><span class="line"><span class="number">135991</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">135991</span> ms |- jstring          : <span class="number">0</span>x11</span><br><span class="line"><span class="number">135991</span> ms |- jboolean*        : <span class="number">0</span>x0</span><br><span class="line"><span class="number">135991</span> ms |= char*            : <span class="number">0</span>xc804d4b8</span><br><span class="line"></span><br><span class="line"><span class="number">135991</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">135991</span> ms |-&gt; <span class="number">0</span>xc64eb2c1: libmtguard.so!<span class="number">0</span>x672c1 (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136088</span> ms [+] JNIEnv-&gt;ReleaseStringUTFChars</span><br><span class="line"><span class="number">136088</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136088</span> ms |- jstring          : <span class="number">0</span>xc804d4b8</span><br><span class="line"><span class="number">136088</span> ms |- char*            : <span class="number">0</span>xc804d4b8</span><br><span class="line"><span class="number">136088</span> ms |:     <span class="number">9</span>b69f861<span class="literal">-e054</span><span class="literal">-4bc4</span><span class="literal">-9daf</span><span class="literal">-d36ae205ed3e</span></span><br><span class="line"></span><br><span class="line"><span class="number">136088</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136088</span> ms |-&gt; <span class="number">0</span>xc64e8f07: libmtguard.so!<span class="number">0</span>x64f07 (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136179</span> ms [+] JNIEnv-&gt;GetArrayLength</span><br><span class="line"><span class="number">136179</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136179</span> ms |- jarray           : <span class="number">0</span>x21</span><br><span class="line"><span class="number">136179</span> ms |= jsize            : <span class="number">754</span></span><br><span class="line"></span><br><span class="line"><span class="number">136179</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136179</span> ms |-&gt; <span class="number">0</span>xc64df6ef: libmtguard.so!<span class="number">0</span>x5b6ef (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136369</span> ms [+] JNIEnv-&gt;GetByteArrayRegion</span><br><span class="line"><span class="number">136369</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136369</span> ms |- jbyteArray       : <span class="number">0</span>x21</span><br><span class="line"><span class="number">136369</span> ms |- jsize            : <span class="number">0</span></span><br><span class="line"><span class="number">136369</span> ms |- jsize            : <span class="number">754</span></span><br><span class="line"><span class="number">136369</span> ms |- jbyte*           : <span class="number">0</span>xc8037700</span><br><span class="line"><span class="number">136369</span> ms |:     <span class="number">0000000</span>: <span class="number">47</span> <span class="number">45</span> <span class="number">54</span> <span class="number">20</span> <span class="number">2</span>F <span class="number">61</span> <span class="number">67</span> <span class="number">67</span>  <span class="number">72</span> <span class="number">6</span>F <span class="number">75</span> <span class="number">70</span> <span class="number">2</span>F <span class="number">68</span> <span class="number">6</span>F <span class="number">6</span>D  GET /aggroup/hom</span><br><span class="line"><span class="number">136369</span> ms |:     <span class="number">0000010</span>: <span class="number">65</span> <span class="number">70</span> <span class="number">61</span> <span class="number">67</span> <span class="number">65</span> <span class="number">2</span>F <span class="number">64</span> <span class="number">69</span>  <span class="number">73</span> <span class="number">70</span> <span class="number">6</span>C <span class="number">61</span> <span class="number">79</span> <span class="number">20</span> <span class="number">5</span>F <span class="number">5</span>F  epage/display __</span><br><span class="line"><span class="number">136369</span> ms |:     <span class="number">0000020</span>: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">136369</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136369</span> ms |-&gt; <span class="number">0</span>xc64df12b: libmtguard.so!<span class="number">0</span>x5b12b (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136479</span> ms [+] JNIEnv-&gt;ExceptionCheck</span><br><span class="line"><span class="number">136479</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136479</span> ms |= jboolean         : <span class="number">0</span>    &#123; false &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">136479</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136479</span> ms |-&gt; <span class="number">0</span>xc64efa1f: libmtguard.so!<span class="number">0</span>x6ba1f (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136584</span> ms [+] JNIEnv-&gt;FindClass</span><br><span class="line"><span class="number">136584</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136584</span> ms |- char*            : <span class="number">0</span>xc656a2b0</span><br><span class="line"><span class="number">136584</span> ms |:     java/lang/String</span><br><span class="line"><span class="number">136584</span> ms |= jclass           : <span class="number">0</span>x55    &#123; java/lang/String &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">136584</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136584</span> ms |-&gt; <span class="number">0</span>xc64eb013: libmtguard.so!<span class="number">0</span>x67013 (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136696</span> ms [+] JNIEnv-&gt;ExceptionCheck</span><br><span class="line"><span class="number">136696</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136696</span> ms |= jboolean         : <span class="number">0</span>    &#123; false &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">136696</span> ms ---------------------------<span class="literal">-Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136696</span> ms |-&gt; <span class="number">0</span>xc64efa1f: libmtguard.so!<span class="number">0</span>x6ba1f (libmtguard.so:<span class="number">0</span>xc6484000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* TID <span class="number">12169</span> */</span><br><span class="line"><span class="number">136811</span> ms [+] JNIEnv-&gt;GetMethodID</span><br><span class="line"><span class="number">136811</span> ms |- JNIEnv*          : <span class="number">0</span>xe385fdc0</span><br><span class="line"><span class="number">136811</span> ms |- jclass           : <span class="number">0</span>x55    &#123; java/lang/String &#125;</span><br><span class="line"><span class="number">136811</span> ms |- char*            : <span class="number">0</span>xc656a2c1</span><br><span class="line"><span class="number">136811</span> ms |:     &lt;init&gt;</span><br><span class="line"><span class="number">136811</span> ms |- char*            : <span class="number">0</span>xc656a2c8</span><br><span class="line"><span class="number">136811</span> ms |:     ([<span class="type">BLjava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;)<span class="type">V</span></span><br><span class="line"><span class="number">136811</span> <span class="type">ms</span> |= <span class="type">jmethodID</span>        : <span class="number">0</span><span class="type">x708504a4</span>    &#123; &lt;<span class="type">init</span>&gt;([<span class="type">BLjava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;)<span class="type">V</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">136811</span> <span class="type">ms</span> ----------------------------<span class="type">Backtrace</span>----------------------------</span><br><span class="line"><span class="number">136811</span> <span class="type">ms</span> |-&gt; <span class="number">0</span><span class="type">xc64eb097</span>: <span class="type">libmtguard.so</span>!<span class="number">0</span><span class="type">x67097</span> (<span class="type">libmtguard.so</span>:<span class="number">0</span><span class="type">xc6484000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* <span class="type">TID</span> <span class="number">12169</span> */</span><br><span class="line"><span class="number">137033</span> <span class="type">ms</span> [+] <span class="type">JNIEnv</span>-&gt;<span class="type">NewByteArray</span></span><br><span class="line"><span class="number">137033</span> <span class="type">ms</span> |- <span class="type">JNIEnv</span>*          : <span class="number">0</span><span class="type">xe385fdc0</span></span><br><span class="line"><span class="number">137033</span> <span class="type">ms</span> |- <span class="type">jsize</span>            : <span class="number">506</span></span><br><span class="line"><span class="number">137033</span> <span class="type">ms</span> |= <span class="type">jbyteArray</span>       : <span class="number">0</span><span class="type">x65</span></span><br><span class="line"></span><br><span class="line"><span class="number">137033</span> <span class="type">ms</span> ----------------------------<span class="type">Backtrace</span>----------------------------</span><br><span class="line"><span class="number">137033</span> <span class="type">ms</span> |-&gt; <span class="number">0</span><span class="type">xc64eb0c5</span>: <span class="type">libmtguard.so</span>!<span class="number">0</span><span class="type">x670c5</span> (<span class="type">libmtguard.so</span>:<span class="number">0</span><span class="type">xc6484000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          /* <span class="type">TID</span> <span class="number">12169</span> */</span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> [+] <span class="type">JNIEnv</span>-&gt;<span class="type">SetByteArrayRegion</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |- <span class="type">JNIEnv</span>*          : <span class="number">0</span><span class="type">xe385fdc0</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |- <span class="type">jbyteArray</span>       : <span class="number">0</span><span class="type">x65</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |- <span class="type">jsize</span>            : <span class="number">0</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |- <span class="type">jsize</span>            : <span class="number">506</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |- <span class="type">jbyte</span>*           : <span class="number">0</span><span class="type">xc5a1620c</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |:     <span class="number">0000000</span>: <span class="number">7</span><span class="type">B</span> <span class="number">22</span> <span class="number">61</span> <span class="number">30</span> <span class="number">22</span> <span class="number">3</span><span class="type">A</span> <span class="number">22</span> <span class="number">31</span>  <span class="number">2</span><span class="type">E</span> <span class="number">35</span> <span class="number">22</span> <span class="number">2</span><span class="type">C</span> <span class="number">22</span> <span class="number">61</span> <span class="number">31</span> <span class="number">22</span>  &#123;<span class="string">&quot;a0&quot;</span>:<span class="string">&quot;1.5&quot;</span>,<span class="string">&quot;a1&quot;</span></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |:     <span class="number">0000010</span>: <span class="number">3</span><span class="type">A</span> <span class="number">22</span> <span class="number">39</span> <span class="number">62</span> <span class="number">36</span> <span class="number">39</span> <span class="number">66</span> <span class="number">38</span>  <span class="number">36</span> <span class="number">31</span> <span class="number">2</span><span class="type">D</span> <span class="number">65</span> <span class="number">30</span> <span class="number">35</span> <span class="number">34</span> <span class="number">2</span><span class="type">D</span>  :<span class="string">&quot;9b69f861-e054-</span></span><br><span class="line"><span class="string">137222 ms |:     0000020: 34 62 63 34 2D 39 64 61  66 2D 64 33 36 61 65 32  4bc4-9daf-d36ae2</span></span><br><span class="line"><span class="string">137222 ms |:     0000030: 30 35 65 64 33 65 22 2C  22 61 32 22 3A 22 34 36  05ed3e&quot;</span>,<span class="string">&quot;a2&quot;</span>:<span class="string">&quot;46</span></span><br><span class="line"><span class="string">137222 ms |:     0000040: 30 65 32 30 31 35 30 66  64 37 33 32 36 39 33 66  0e20150fd732693f</span></span><br><span class="line"><span class="string">137222 ms |:     0000050: 37 31 31 39 66 39 31 64  61 37 36 35 66 39 35 39  7119f91da765f959</span></span><br><span class="line"><span class="string">137222 ms |:     0000060: 65 31 36 66 30 66 22 2C  22 61 33 22 3A 32 2C 22  e16f0f&quot;</span>,<span class="string">&quot;a3&quot;</span>:<span class="number">2</span>,<span class="string">&quot;</span></span><br><span class="line"><span class="string">137222 ms |:     0000070: 61 34 22 3A 31 36 31 36  36 35 31 39 34 34 2C 22  a4&quot;</span>:<span class="number">1616651944</span>,<span class="string">&quot;</span></span><br><span class="line"><span class="string">137222 ms |:     0000080: 61 35 22 3A 22 76 49 79  66 63 38 7A 54 58 51 41  a5&quot;</span>:<span class="string">&quot;vIyfc8zTXQA</span></span><br><span class="line"><span class="string">137222 ms |:     0000090: 6F 53 58 6B 78 4E 6B 4E  38 74 4E 44 69 36 48 73  oSXkxNkN8tNDi6Hs</span></span><br><span class="line"><span class="string">137222 ms |:     00000A0: 76 4C 70 37 5A 6C 6E 70  44 43 38 47 49 77 50 61  vLp7ZlnpDC8GIwPa</span></span><br><span class="line"><span class="string">137222 ms |:     00000B0: 4C 72 55 4C 2B 79 71 76  54 74 2B 39 51 76 30 35  LrUL+yqvTt+9Qv05</span></span><br><span class="line"><span class="string">137222 ms |:     00000C0: 36 54 33 6D 44 36 52 6B  36 6A 4F 42 42 66 42 37  6T3mD6Rk6jOBBfB7</span></span><br><span class="line"><span class="string">137222 ms |:     00000D0: 65 5A 6E 6E 54 71 42 35  56 48 6F 4E 37 4F 33 36  eZnnTqB5VHoN7O36</span></span><br><span class="line"><span class="string">137222 ms |:     00000E0: 41 62 73 6B 32 4C 48 42  30 43 4E 42 55 35 34 2B  Absk2LHB0CNBU54+</span></span><br><span class="line"><span class="string">137222 ms |:     00000F0: 63 32 63 51 33 6D 50 7A  56 59 70 59 4D 2B 61 5A  c2cQ3mPzVYpYM+aZ</span></span><br><span class="line"><span class="string">137222 ms |:     0000100: 42 69 64 4B 72 74 31 79  46 6C 66 2F 42 51 72 68  BidKrt1yFlf/BQrh</span></span><br><span class="line"><span class="string">137222 ms |:     0000110: 74 79 4F 66 77 46 65 67  47 33 53 75 4A 4D 35 52  tyOfwFegG3SuJM5R</span></span><br><span class="line"><span class="string">137222 ms |:     0000120: 56 4A 6C 71 52 43 4D 53  67 77 67 6D 4C 44 5A 4F  VJlqRCMSgwgmLDZO</span></span><br><span class="line"><span class="string">137222 ms |:     0000130: 66 32 7A 32 2F 38 6D 69  72 4B 56 4D 48 66 71 73  f2z2/8mirKVMHfqs</span></span><br><span class="line"><span class="string">137222 ms |:     0000140: 68 6C 2B 35 74 52 50 79  7A 46 55 67 30 75 4B 76  hl+5tRPyzFUg0uKv</span></span><br><span class="line"><span class="string">137222 ms |:     0000150: 36 50 55 2B 78 54 35 72  43 59 71 55 2B 62 4D 4D  6PU+xT5rCYqU+bMM</span></span><br><span class="line"><span class="string">137222 ms |:     0000160: 48 73 70 47 52 55 43 71  44 64 65 79 41 74 6E 6F  HspGRUCqDdeyAtno</span></span><br><span class="line"><span class="string">137222 ms |:     0000170: 66 71 4F 4F 55 74 62 4B  31 73 72 4C 36 48 6C 46  fqOOUtbK1srL6HlF</span></span><br><span class="line"><span class="string">137222 ms |:     0000180: 31 37 6D 55 67 2F 2F 44  7A 4F 2F 30 6F 51 49 4F  17mUg//DzO/0oQIO</span></span><br><span class="line"><span class="string">137222 ms |:     0000190: 35 33 38 6A 49 6B 30 55  67 32 32 34 48 38 6B 37  538jIk0Ug224H8k7</span></span><br><span class="line"><span class="string">137222 ms |:     00001A0: 39 57 6F 6A 39 43 75 62  4A 30 52 6B 65 36 54 6C  9Woj9CubJ0Rke6Tl</span></span><br><span class="line"><span class="string">137222 ms |:     00001B0: 5A 2F 50 70 72 56 4D 66  71 37 72 4F 34 34 57 64  Z/PprVMfq7rO44Wd</span></span><br><span class="line"><span class="string">137222 ms |:     00001C0: 30 22 2C 22 61 36 22 3A  30 2C 22 64 31 22 3A 22  0&quot;</span>,<span class="string">&quot;a6&quot;</span>:<span class="number">0</span>,<span class="string">&quot;d1&quot;</span>:<span class="string">&quot;</span></span><br><span class="line"><span class="string">137222 ms |:     00001D0: 38 66 65 62 35 34 33 63  30 30 65 36 63 35 64 64  8feb543c00e6c5dd</span></span><br><span class="line"><span class="string">137222 ms |:     00001E0: 32 32 33 33 37 39 65 33  31 61 39 63 30 61 34 39  223379e31a9c0a49</span></span><br><span class="line"><span class="string">137222 ms |:     00001F0: 31 63 37 36 35 36 62 61  22 7D                    1c7656ba&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> ----------------------------<span class="type">Backtrace</span>----------------------------</span><br><span class="line"><span class="number">137222</span> <span class="type">ms</span> |-&gt; <span class="number">0</span><span class="type">xc64eb107</span>: <span class="type">libmtguard.so</span>!<span class="number">0</span><span class="type">x67107</span> (<span class="type">libmtguard.so</span>:<span class="number">0</span><span class="type">xc6484000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现，我们在参数还没完全转换完的情况下，Unidbg就退出了。</p><p>这种情况下，可能的原因有很多，但可能性较大的是两个</p><ul><li>上下文环境缺失</li></ul><ul><li>样本使用某种手段检测或反制了Unidbg</li></ul><p>先看一下是否是上下文的问题，假设是上下文缺失，通俗的讲就是在SO加载后到我们的main函数调用前的这段时间里，样本需要调用一些函数对SO进行初始化，而我们没有注意也没做这个事，这导致了Unidbg无法顺利运行。</p><p>既然提出了假设，就需要去验证。</p><p>使用Frida主动调用main，可以顺利得到结果，那如果换个时机呢？</p><p>我们在目标SO的JNIOnLoad刚执行完时再尝试一下call，如果存在初始化函数，这个时机点样本的初始化函数应该也还没来得及运行，call 应该是没有结果的。</p><p>为了实现在这个时机点 hook 和 call，我们还需要借助一下android_dlopen_ext和Frida 的spawn模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> android_dlopen_ext = Module.findExportByName(<span class="keyword">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (android_dlopen_ext != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Interceptor.attach(android_dlopen_ext, &#123;</span><br><span class="line">        onEnter: function (args) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hook = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">var</span> soName = args[<span class="number">0</span>].readCString();</span><br><span class="line">            <span class="keyword">if</span> (soName.indexOf(<span class="string">&quot;libmtguard.so&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.hook = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        onLeave: function (retval) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.hook) &#123;</span><br><span class="line">                <span class="keyword">var</span> jniOnload = Module.findExportByName(<span class="string">&quot;libmtguard.so&quot;</span>, <span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">                Interceptor.attach(jniOnload, &#123;</span><br><span class="line">                    onEnter: function (args) &#123;</span><br><span class="line">                        console.log(<span class="string">&quot;Enter Mtguard JNI OnLoad&quot;</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    onLeave: function (retval) &#123;</span><br><span class="line">                        console.log(<span class="string">&quot;After Mtguard JNI OnLoad&quot;</span>);</span><br><span class="line">                        call_mtgsig();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">call_mtgsig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        <span class="keyword">var</span> jinteger = Java.use(<span class="string">&quot;java.lang.Integer&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> jstring = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> NBridge = Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> objArr = [jstring.$<span class="keyword">new</span>(<span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>), jstring.$<span class="keyword">new</span>(<span class="string">&quot;GET /aggroup/homepage/display __reqTraceID=5ca01019-fafc-4f92-a80e-82ce1389aab7&amp;abStrategy=d&amp;allowToTrack=1&amp;ci=1&amp;cityId=1&amp;clearTimeStamp=-1&amp;clientName=android&amp;clientType=android&amp;firstPageAbtest=old&amp;globalId=&amp;limitForYouXuan=25&amp;msid=96E3002678491E51616650388270&amp;offsetForYouXuan=0&amp;os_version=8.1.0&amp;phone_model=Nexus%205X&amp;scene=youxuanZhuanqu&amp;showStyle=1&amp;topic_session_id=4324505e-ccc6-4f7a-9943-d65223bbb9a7&amp;userid=-1&amp;utm_campaign=AgroupBgroupC0E0Ghomepage&amp;utm_content=96E3002678491E5&amp;utm_medium=android&amp;utm_source=wandoujia&amp;utm_term=1100090405&amp;uuid=00000000000005FB514BD2BA040ABADC24C8D31AD4F18A162330366877733119&amp;version_name=11.9.405&amp;wifi-cur=0&amp;wifi-mac=02%3A00%3A00%3A00%3A00%3A00%08&amp;wifi-name=%3Cunknown%20ssid%3E%08&amp;wifi-strength=-10%08&amp;withRegion=0&quot;</span>).getBytes(), jinteger.valueOf(<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">var</span> result = NBridge.main(<span class="number">203</span>, objArr);</span><br><span class="line">        console.log(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Nexus</span> <span class="number">5</span><span class="type">X</span>::<span class="type">com.sankuai.meituan</span>]-&gt; %resume</span><br><span class="line">[<span class="type">Nexus</span> <span class="number">5</span><span class="type">X</span>::<span class="type">com.sankuai.meituan</span>]-&gt; </span><br><span class="line">Enter Mtguard JNI OnLoad</span><br><span class="line">After Mtguard JNI OnLoad</span><br><span class="line">result:null</span><br></pre></td></tr></table></figure><p>返回确实是null，这一定程度上验证了我们的猜想——上下文环境缺失</p><p>但这并不是绝对的原因，也可能是别的原因导致的，逻辑链并没有完全导向我们的猜想。但是相对来说，上下文缺失有重大嫌疑。</p><p>在分析和研究商用APP而不是demo时，我们需要意识到三点</p><ul><li>构建完全严丝合缝的分析逻辑是很难的，需要猜测和试错</li><li>构建完全严丝合缝的分析逻辑是很难的，需要猜测和试错</li><li>构建完全严丝合缝的分析逻辑是很难的，需要猜测和试错</li></ul><p>我们初步确认存在某种初始化操作，接下来尝试去找它。先试一下偷懒的办法，如果不成再用Jadx把相关的类仔细看一遍。</p><p>能做初始化验证，并导致单独执行main函数无法返回结果的，大概率是native函数。以下是Unibdg日志中显示的Libmtguard中注册的native函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">JNIEnv-&gt;FindClass(com/meituan/android/common/mtguard/NBridge) was called from RX@<span class="number">0x400039f9</span>[libmtguard.so]<span class="number">0x39f9</span></span><br><span class="line">JNIEnv-&gt;RegisterNatives(com/meituan/android/common/mtguard/NBridge, RW@<span class="number">0x400e1004</span>[libmtguard.so]<span class="number">0xe1004</span>, <span class="number">1</span>) was called from RX@<span class="number">0x40003947</span>[libmtguard.so]<span class="number">0x3947</span></span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge, main(I[Ljava/lang/Object;)[Ljava/lang/Object;, RX@<span class="number">0x4005a38d</span>[libmtguard.so]<span class="number">0x5a38d</span>)</span><br><span class="line">JNIEnv-&gt;FindClass(com/meituan/android/common/mtguard/NBridge$SIUACollector) was called from RX@<span class="number">0x40003a99</span>[libmtguard.so]<span class="number">0x3a99</span></span><br><span class="line">JNIEnv-&gt;RegisterNatives(com/meituan/android/common/mtguard/NBridge$SIUACollector, RW@<span class="number">0x4031305c</span>, <span class="number">10</span>) was called from RX@<span class="number">0x40003acf</span>[libmtguard.so]<span class="number">0x3acf</span></span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getHWProperty()Ljava/lang/String;, RX@<span class="number">0x40008ea9</span>[libmtguard.so]<span class="number">0x8ea9</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getEnvironmentInfoExtra()Ljava/lang/String;, RX@<span class="number">0x4000567d</span>[libmtguard.so]<span class="number">0x567d</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getEnvironmentInfo()Ljava/lang/String;, RX@<span class="number">0x40005379</span>[libmtguard.so]<span class="number">0x5379</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getHWStatus()Ljava/lang/String;, RX@<span class="number">0x40018e05</span>[libmtguard.so]<span class="number">0x18e05</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getHWEquipmentInfo()Ljava/lang/String;, RX@<span class="number">0x40026dcd</span>[libmtguard.so]<span class="number">0x26dcd</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getExternalEquipmentInfo()Ljava/lang/String;, RX@<span class="number">0x40033971</span>[libmtguard.so]<span class="number">0x33971</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getUserAction()Ljava/lang/String;, RX@<span class="number">0x4003e4a9</span>[libmtguard.so]<span class="number">0x3e4a9</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getPlatformInfo()Ljava/lang/String;, RX@<span class="number">0x400447f1</span>[libmtguard.so]<span class="number">0x447f1</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, getLocationInfo()Ljava/lang/String;, RX@<span class="number">0x4004dc3d</span>[libmtguard.so]<span class="number">0x4dc3d</span>)</span><br><span class="line">RegisterNative(com/meituan/android/common/mtguard/NBridge$SIUACollector, startCollection()Ljava/lang/String;, RX@<span class="number">0x40058e75</span>[libmtguard.so]<span class="number">0x58e75</span>)</span><br><span class="line">JNIEnv-&gt;FindClass(com/meituan/android/common/dfingerprint/v3/DFPTest) was called from RX@<span class="number">0x4006b999</span>[libmtguard.so]<span class="number">0x6b999</span></span><br><span class="line">JNIEnv-&gt;RegisterNatives(com/meituan/android/common/dfingerprint/v3/DFPTest, RW@<span class="number">0x400e6650</span>[libmtguard.so]<span class="number">0xe6650</span>, <span class="number">1</span>) was called from RX@<span class="number">0x4006b9b7</span>[libmtguard.so]<span class="number">0x6b9b7</span></span><br><span class="line">RegisterNative(com/meituan/android/common/dfingerprint/v3/DFPTest, interface0(I[Ljava/lang/Object;)Ljava/lang/String;, RX@<span class="number">0x4006b82d</span>[libmtguard.so]<span class="number">0x6b82d</span>)</span><br></pre></td></tr></table></figure><p>这里面所有函数都有嫌疑，甚至是main函数自己，甚至应该说，main函数的嫌疑最大。因为我们的参数1是203，可是参数1的潜在选择可不止这一种，或许其中某一个数作为参数1时，就充当着”激活函数“或者叫”初始化函数“。</p><p><img src="https://img-blog.csdnimg.cn/20210617192900107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以，我们需要在JNIOnLoad结束之后的这个时机做更多事</p><p>1.对所有动态注册的函数，在JAVA层进行HOOK，看一下到底是哪些函数，在SO刚加载进来就开始执行。</p><p>2.Call main203，在每一个Hook 触发的时候call main203</p><p>简而言之，我们想知道在谁之后，call main就可以顺利执行，在这之前的所有调用就是初始化函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> android_dlopen_ext = Module.findExportByName(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (android_dlopen_ext != <span class="literal">null</span>) &#123;</span><br><span class="line">    Interceptor.attach(android_dlopen_ext, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.hook = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">var</span> soName = args[<span class="number">0</span>].readCString();</span><br><span class="line">            <span class="keyword">if</span> (soName.indexOf(<span class="string">&quot;libmtguard.so&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.hook = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.hook) &#123;</span><br><span class="line">                <span class="keyword">var</span> jniOnload = Module.findExportByName(<span class="string">&quot;libmtguard.so&quot;</span>, <span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">                Interceptor.attach(jniOnload, &#123;</span><br><span class="line">                    <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;Enter Mtguard JNI OnLoad&quot;</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;After Mtguard JNI OnLoad&quot;</span>);</span><br><span class="line">                        hook_mtso();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_mtso</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge&quot;</span>).main.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;call com/meituan/android/common/mtguard/NBridge, main(I[Ljava/lang/Object;)[Ljava/lang/Object;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.main(arg1, arg2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getHWProperty.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getHWProperty()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getHWProperty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getEnvironmentInfo.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getEnvironmentInfo()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getEnvironmentInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getEnvironmentInfoExtra.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getEnvironmentInfoExtra()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getEnvironmentInfoExtra();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getHWStatus.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getHWStatus()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getHWStatus();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getHWEquipmentInfo.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getHWEquipmentInfo()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getHWEquipmentInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getUserAction.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getUserAction()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getUserAction();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getPlatformInfo.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getPlatformInfo()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getPlatformInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getLocationInfo.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getLocationInfo()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getLocationInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).startCollection.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, startCollection()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.startCollection();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge$SIUACollector&quot;</span>).getExternalEquipmentInfo.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;com/meituan/android/common/mtguard/NBridge$SIUACollector, getExternalEquipmentInfo()Ljava/lang/String;&quot;</span>);</span><br><span class="line">            call_mtgsig();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getExternalEquipmentInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call_mtgsig</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> jinteger = Java.use(<span class="string">&quot;java.lang.Integer&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> jstring = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> NBridge = Java.use(<span class="string">&quot;com.meituan.android.common.mtguard.NBridge&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> objArr = [jstring.$new(<span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>), jstring.$new(<span class="string">&quot;GET /aggroup/homepage/display __reqTraceID=5ca01019-fafc-4f92-a80e-82ce1389aab7&amp;abStrategy=d&amp;allowToTrack=1&amp;ci=1&amp;cityId=1&amp;clearTimeStamp=-1&amp;clientName=android&amp;clientType=android&amp;firstPageAbtest=old&amp;globalId=&amp;limitForYouXuan=25&amp;msid=96E3002678491E51616650388270&amp;offsetForYouXuan=0&amp;os_version=8.1.0&amp;phone_model=Nexus%205X&amp;scene=youxuanZhuanqu&amp;showStyle=1&amp;topic_session_id=4324505e-ccc6-4f7a-9943-d65223bbb9a7&amp;userid=-1&amp;utm_campaign=AgroupBgroupC0E0Ghomepage&amp;utm_content=96E3002678491E5&amp;utm_medium=android&amp;utm_source=wandoujia&amp;utm_term=1100090405&amp;uuid=00000000000005FB514BD2BA040ABADC24C8D31AD4F18A162330366877733119&amp;version_name=11.9.405&amp;wifi-cur=0&amp;wifi-mac=02%3A00%3A00%3A00%3A00%3A00%08&amp;wifi-name=%3Cunknown%20ssid%3E%08&amp;wifi-strength=-10%08&amp;withRegion=0&quot;</span>).getBytes(), jinteger.valueOf(<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">var</span> result = NBridge.main(<span class="number">203</span>, objArr);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// frida -U -f com.sankuai.meituan -l C:\Users\pr0214\Desktop\DTA\Unidbg学习指南\Unidbg进阶篇\Unidbg的五个大实例\mtguard\new\mt10\lession10\testOnJniOnLoad.js</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Nexus</span> <span class="number">5</span><span class="type">X</span>::<span class="type">com.sankuai.meituan</span>]-&gt; Enter Mtguard JNI OnLoad</span><br><span class="line">After Mtguard JNI OnLoad</span><br><span class="line">call com/meituan/android/common/mtguard/NBridge, main(I[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;)[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;</span><br><span class="line"><span class="type">result</span>:<span class="type">null</span></span><br><span class="line"><span class="type">call</span> <span class="type">com</span>/<span class="type">meituan</span>/<span class="type">android</span>/<span class="type">common</span>/<span class="type">mtguard</span>/<span class="type">NBridge</span>, <span class="type">main</span>(<span class="type">I</span>[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;)[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;</span><br><span class="line"><span class="type">result</span>:&#123;<span class="string">&quot;a0&quot;</span>:<span class="string">&quot;1.5&quot;</span>,<span class="string">&quot;a1&quot;</span>:<span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>,<span class="string">&quot;a2&quot;</span>:<span class="string">&quot;460e20150fd732693f7119f91da765f959e16f0f&quot;</span>,<span class="string">&quot;a3&quot;</span>:<span class="number">2</span>,<span class="string">&quot;a4&quot;</span>:<span class="number">1617023178</span>,<span class="string">&quot;a5&quot;</span>:<span class="string">&quot;fSdm2rcaszWJ/GEN2Q2AjRHumgC7NCXqDt60WlBeuz9u9L+0DyV1Xew5wjn3DEvtF4rSTrOjHAh6ARJ8+DLhP41U3Ayxks9ZTaNMpzMzrkop/PDYkaOJOxpwc9oA9ebwEKzwtnjP0R0S3ZXqtKLrclykX7MLWs9bpWAqTxpPiTAnf1pUYKfH0rn2xzSXryofL1y9ostXEKzV+dveF5zZVpdsiJHiAY1yNp/MJLamFZTirM2/cj9uBC2JisxcGISPjqf+VYbdKgoQLOs6+GJtyA/h6S3xLkU0uoIKHplutHcInHpXViC/tYlzpnO+p+02DUb8qCtnh/sz7/sDHETYT6h4JF5da2I3EC7ypdNj3VP4UK0E9ekKBA==&quot;</span>,<span class="string">&quot;a6&quot;</span>:<span class="number">0</span>,<span class="string">&quot;d1&quot;</span>:<span class="string">&quot;0a33910a22d3002db06f8ad2b4977c8379dd3f0a&quot;</span>&#125;</span><br><span class="line"><span class="type">call</span> <span class="type">com</span>/<span class="type">meituan</span>/<span class="type">android</span>/<span class="type">common</span>/<span class="type">mtguard</span>/<span class="type">NBridge</span>, <span class="type">main</span>(<span class="type">I</span>[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;)[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;</span><br><span class="line"><span class="type">com</span>/<span class="type">meituan</span>/<span class="type">android</span>/<span class="type">common</span>/<span class="type">mtguard</span>/<span class="type">NBridge</span><span class="variable">$SIUACollector</span>, <span class="type">startCollection</span>()<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;</span><br><span class="line"><span class="type">call</span> <span class="type">com</span>/<span class="type">meituan</span>/<span class="type">android</span>/<span class="type">common</span>/<span class="type">mtguard</span>/<span class="type">NBridge</span>, <span class="type">main</span>(<span class="type">I</span>[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;)[<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="type">Object</span>;</span><br><span class="line"><span class="type">result</span>:&#123;<span class="string">&quot;a0&quot;</span>:<span class="string">&quot;1.5&quot;</span>,<span class="string">&quot;a1&quot;</span>:<span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>,<span class="string">&quot;a2&quot;</span>:<span class="string">&quot;460e20150fd732693f7119f91da765f959e16f0f&quot;</span>,<span class="string">&quot;a3&quot;</span>:<span class="number">2</span>,<span class="string">&quot;a4&quot;</span>:<span class="number">1617023179</span>,<span class="string">&quot;a5&quot;</span>:<span class="string">&quot;FHyKQ0QJaH7NvwkVuDYTKIKJ+XlahtybcECQh4CTRgOlENk40NTsFHH/T429PgP2h6OgSL2lzNONPFbbALchHi3E7eGhWwgwt8PjECE/S5BkwbBk+/axHZdabfdOJhThxTLLeyJ8198buPO2HZ1ojU8RM/Wdh+TThMyahbgbk6jXH+h+tDFqEaecBQmjCN3wax1DcuEToPF2peHnmcyMQQT82m5OSVgzrMzKGol6OlJfnEVXufs789yqrRu5ZaXl+caF0Z8NYPOdgNgDitQ+uuRsFQnM6qGdQW8SdaenPn+6K4Pw9bApk5+obL4=&quot;</span>,<span class="string">&quot;a6&quot;</span>:<span class="number">0</span>,<span class="string">&quot;d1&quot;</span>:<span class="string">&quot;086c225497d75442f882e23634d6350e101c5f8d&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>可以发现，只有一次result:null，后面就可以顺利call出结果。</p><p>这说明两点</p><p>1.SO加载后首先执行main函数</p><p>2.第一个main函数是初始化函数。</p><p>更详细的打印main函数，显示其参数和返回值。我们发现第一个main函数参数1是111，我们称之为main111</p><p><img src="https://img-blog.csdnimg.cn/20210617192916330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参数2就是一个对象数组，长度为1，没指定，也就是对象数组里一个空对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.PackageInfo;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.api.Signature;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.wrapper.DvmInteger;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBridge</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    NBridge()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.meituan&quot;</span>).build();</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession7\\mt.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession7\\libmtguard.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NBridge test = <span class="keyword">new</span> NBridge();</span><br><span class="line">        test.main111();</span><br><span class="line">        test.main203();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main203</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        list.add(<span class="number">203</span>);</span><br><span class="line">        StringObject input2_1 = <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>);</span><br><span class="line">        ByteArray input2_2 = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;GET /aggroup/homepage/display __r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        DvmInteger input2_3 = DvmInteger.valueOf(vm, <span class="number">2</span>);</span><br><span class="line">        vm.addLocalObject(input2_1);</span><br><span class="line">        vm.addLocalObject(input2_2);</span><br><span class="line">        vm.addLocalObject(input2_3);</span><br><span class="line">        <span class="comment">// 完整的参数2</span></span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> ArrayObject(input2_1, input2_2, input2_3)));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x5a38d</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main111</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        list.add(<span class="number">111</span>);</span><br><span class="line">        DvmObject&lt;?&gt; obj = vm.resolveClass(<span class="string">&quot;java/lang/object&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        vm.addLocalObject(obj);</span><br><span class="line">        ArrayObject myobject = <span class="keyword">new</span> ArrayObject(obj);</span><br><span class="line">        vm.addLocalObject(myobject);</span><br><span class="line">        list.add(vm.addLocalObject(myobject));</span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x5a38d</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210617193002347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>产生了一些报错，JAVA环境缺失，中规中矩补就是了。</p><p>有人会比较困扰怎么得到正确的值，其实很简单，使用JNItrace trace三分钟，保存在本地，直接搜索，需要用的基本都在里面。不熟悉具体流程的可以来报课鸭，直播互动教学。</p><p><img src="https://img-blog.csdnimg.cn/20210617193015122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>通过这种方式补全JAVA环境的缺失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/meituan/android/common/mtguard/NBridge-&gt;getPicName()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;ms_com.sankuai.meituan&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/meituan/android/common/mtguard/NBridge-&gt;getSecName()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;ppd_com.sankuai.meituan.xbt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/meituan/android/common/mtguard/NBridge-&gt;getAppContext()Landroid/content/Context;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/meituan/android/common/mtguard/NBridge-&gt;getMtgVN()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;4.4.7.3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature,vaList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getPackageCodePath()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/data/app/com.sankuai.meituan-TEfTAIBttUmUzuVbwRK1DQ==/base.apk&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIntField</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/pm/PackageInfo-&gt;versionCode:I&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1100090405</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getIntField(vm, dvmObject, signature);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; newObjectV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/lang/Integer-&gt;&lt;init&gt;(I)V&quot;</span>:</span><br><span class="line">            <span class="keyword">int</span> input = vaList.getInt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DvmInteger(vm, input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.newObjectV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://img-blog.csdnimg.cn/20210617193025618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>前面的实例中，我们主要补的是JAVA环境，这里补的是文件访问。</p><p>文件访问的情况各种各样，比如从app的某个xml文件中读取key，读取某个资源文件的图片做运算，读取proc/self 目录下的文件反调试等等。</p><p>可是我们哪来的手机文件目录，哪来的系统路径呢？我们只是一个虚拟的模拟器罢了。所以Unidbg对文件访问的相关API进行了重定向。</p><p>当样本做文件访问时，Unidbg重定向到本机的某个位置，进入 src/main/java/com/github/unidbg/file/BaseFileSystem.java</p><p>打印一下路径</p><p><img src="https://img-blog.csdnimg.cn/20210617193036714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210617193046730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接下来我们按照要求，在data目录下新建对应文件夹，并把我们的apk复制进去，改名成base.apk。</p><p><img src="https://img-blog.csdnimg.cn/20210617193057668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个文件访问就补好了，再运行代码时，就已经跨过这个坑，进行下一个流程了。</p><p>除此之外，也可以通过代码的方式进行操作</p><p>我们的类实现文件重定向的接口即可，只需要三个步骤，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBridge</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span> <span class="keyword">implements</span> <span class="title">IOResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    NBridge()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.meituan&quot;</span>).build();</span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\pr0214\\Desktop\\DTA\\unidbg\\versions\\unidbg-2021-5-17\\unidbg-master\\unidbg-android\\src\\test\\java\\com\\lession7\\mt.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        emulator.getSyscallHandler().addIOResolver(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\pr0214\\Desktop\\DTA\\unidbg\\versions\\unidbg-2021-5-17\\unidbg-master\\unidbg-android\\src\\test\\java\\com\\lession7\\libmtguard.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileResult <span class="title">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="keyword">int</span> oflags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&quot;/data/app/com.sankuai.meituan-TEfTAIBttUmUzuVbwRK1DQ==/base.apk&quot;</span>).equals(pathname)) &#123;</span><br><span class="line">            <span class="comment">// 填入想要重定位的文件</span></span><br><span class="line">            <span class="keyword">return</span> FileResult.success(<span class="keyword">new</span> SimpleFileIO(oflags, <span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession10\\mt.apk&quot;</span>), pathname));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两种方法各有其最佳的使用场景，如果两种都设置，代码方式设置的优先级更高。</p><p>继续往下补JAVA环境</p><p><img src="https://img-blog.csdnimg.cn/20210617193109324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210617193121381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>好像结果出来了，再修改一下输出函数，打印一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main203</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">    list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">    list.add(<span class="number">203</span>);</span><br><span class="line">    StringObject input2_1 = <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;9b69f861-e054-4bc4-9daf-d36ae205ed3e&quot;</span>);</span><br><span class="line">    ByteArray input2_2 = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;GET /aggroup/homepage/display __r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    DvmInteger input2_3 = DvmInteger.valueOf(vm, <span class="number">2</span>);</span><br><span class="line">    vm.addLocalObject(input2_1);</span><br><span class="line">    vm.addLocalObject(input2_2);</span><br><span class="line">    vm.addLocalObject(input2_3);</span><br><span class="line">    <span class="comment">// 完整的参数2</span></span><br><span class="line">    list.add(vm.addLocalObject(<span class="keyword">new</span> ArrayObject(input2_1, input2_2, input2_3)));</span><br><span class="line">    Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x5a38d</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">    StringObject result = (StringObject) ((DvmObject[])((ArrayObject)vm.getObject(number.intValue())).getValue())[<span class="number">0</span>];</span><br><span class="line">    System.out.println(result.getValue());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210617193136224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>大功告成。</p><h3 id="四、尾声"><a href="#四、尾声" class="headerlink" title="四、尾声"></a>四、尾声</h3><p>这是上下文缺失和补充的一个例子<br>资源链接：<a href="https://pan.baidu.com/s/1e-u8hbHqCFnS9P0vVM8GbQ">https://pan.baidu.com/s/1e-u8hbHqCFnS9P0vVM8GbQ</a><br>提取码：igcw</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程六：s</title>
      <link href="/2021/06/15/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%85%AD%EF%BC%9As/"/>
      <url>/2021/06/15/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%85%AD%EF%BC%9As/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#_0"></a></li><li><ul><li><ul><li><a href="#_3">一、前言</a></li><li><a href="#_7">二、准备</a></li><li><a href="#Undibg_56">三、Undibg模拟执行</a></li><li><a href="#_527">四、算法还原</a></li><li><a href="#_533">五、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>第六篇，主要内容是简单JAVA环境的填补。</p><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210615143315785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如图红框是我们的目标函数，入参是sortedMap接口的实现类对象，比如TreeMap对象，返回值是SignedQuery类对象。</p><p><img src="https://img-blog.csdnimg.cn/20210615143402442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参数和返回值都比较特殊，不是我们前面处理过的基本类型和对象，所以举个例子，这是Frida 的callSign代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Call Sign 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callsign</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ClassName = <span class="string">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> Bilibili = Java.use(ClassName);</span><br><span class="line">        <span class="keyword">var</span> targetMethod = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> TreeMap = Java.use(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> map = TreeMap.$new();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;ad_extra&quot;</span>, <span class="string">&quotquot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;appkey&quot;</span>, <span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;autoplay_card&quot;</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;banner_hash&quot;</span>,<span class="string">&quot;10687342131252771522&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;build&quot;</span>,<span class="string">&quot;6180500&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c_locale&quot;</span>,<span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;channel&quot;</span>,<span class="string">&quot;shenma117&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;column&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;device_name&quot;</span>,<span class="string">&quot;MIX2S&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;device_type&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;flush&quot;</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ts&quot;</span>,<span class="string">&quot;1612693177&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = Bilibili.s(map);</span><br><span class="line">        <span class="comment">// 打印结果，不需要做什么额外处理，这儿会隐式调用toString。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;\n返回结果：&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们传入了一个treemap对象，返回SignedQuery对象，后续App通过调用其toString方法使用。</p><p><img src="https://img-blog.csdnimg.cn/20210615143518499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="三、Undibg模拟执行"><a href="#三、Undibg模拟执行" class="headerlink" title="三、Undibg模拟执行"></a>三、Undibg模拟执行</h3><p>首先搭一个架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibBili</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    LibBili()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.bilibili.app&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession6\\bilibili.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession6\\libbili.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        LibBili test = <span class="keyword">new</span> LibBili();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行没问题</p><p><img src="https://img-blog.csdnimg.cn/20210615143657135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接下来考虑参数如何构造——treemap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TreeMap&lt;String, String&gt; keymap = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">    keymap.put(<span class="string">&quot;ad_extra&quot;</span>, <span class="string">&quotquot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;appkey&quot;</span>, <span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;autoplay_card&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;banner_hash&quot;</span>, <span class="string">&quot;10687342131252771522&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;build&quot;</span>, <span class="string">&quot;6180500&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;c_locale&quot;</span>, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;channel&quot;</span>, <span class="string">&quot;shenma117&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;column&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;device_name&quot;</span>, <span class="string">&quot;MIX2S&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;device_type&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;flush&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;ts&quot;</span>, <span class="string">&quot;1612693177&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该怎么使用这个treemap呢？</p><p>在先前，我们遇到过字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String input = <span class="string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8&quot;</span> +</span><br><span class="line">    <span class="string">&quot;uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B529501&quot;</span> +</span><br><span class="line">    <span class="string">&quot;0&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1&quot;</span> +</span><br><span class="line">    <span class="string">&quot;X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp&quot;</span> +</span><br><span class="line">    <span class="string">&quot;=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8_&quot;</span> +</span><br><span class="line">    <span class="string">&quot;_Android__Android10&amp;version=3.5.8&amp;vid=10190135&quot;</span> +</span><br><span class="line">    <span class="string">&quot;94003&amp;wm=20004_90024&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] inputByte = input.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">ByteArray inputByteArray = <span class="keyword">new</span> ByteArray(vm,inputByte);</span><br></pre></td></tr></table></figure><p>ByteArray是Unidbg对字节数组的封装，除此之外还有StringObject等，那么treemap呢？我们可以照着StringObject重新写一个，也可以不这么麻烦，直接返回一个“空壳”，Native中对treemap做了操作再补对应的方法，这样比较经济实惠。</p><p>需要注意的是，代码中补齐了treeMap的继承关系：map→AbstractMap→TreeMap，这么做是必要的，否则在有些情况下会报错，具体讨论此处略过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">    list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line"></span><br><span class="line">    TreeMap&lt;String, String&gt; keymap = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">    keymap.put(<span class="string">&quot;ad_extra&quot;</span>, <span class="string">&quotquot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;appkey&quot;</span>, <span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;autoplay_card&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;banner_hash&quot;</span>, <span class="string">&quot;10687342131252771522&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;build&quot;</span>, <span class="string">&quot;6180500&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;c_locale&quot;</span>, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;channel&quot;</span>, <span class="string">&quot;shenma117&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;column&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;device_name&quot;</span>, <span class="string">&quot;MIX2S&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;device_type&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;flush&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">    keymap.put(<span class="string">&quot;ts&quot;</span>, <span class="string">&quot;1612693177&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DvmClass Map = vm.resolveClass(<span class="string">&quot;java/util/Map&quot;</span>);</span><br><span class="line">    DvmClass AbstractMap = vm.resolveClass(<span class="string">&quot;java/util/AbstractMap&quot;</span>,Map);</span><br><span class="line">    DvmObject&lt;?&gt; input_map = vm.resolveClass(<span class="string">&quot;java/util/TreeMap&quot;</span>, AbstractMap).newObject(keymap);</span><br><span class="line">    list.add(vm.addLocalObject(input_map));</span><br><span class="line">    Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1c97</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">    DvmObject result = vm.getObject(number.intValue());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以发现，我们并没有对返回值做什么处理，因为SignedQuery对象，还没想好怎么处理。</p><p>运行测试</p><p><img src="https://img-blog.csdnimg.cn/20210615143749243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>补JNI环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callBooleanMethod</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;java/util/Map-&gt;isEmpty()Z&quot;</span>.equals(signature)) &#123;</span><br><span class="line">        TreeMap&lt;String, String&gt; treeMap = (TreeMap&lt;String, String&gt;)dvmObject.getValue();</span><br><span class="line">        <span class="keyword">return</span> treeMap.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callBooleanMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错，补下一个JAVA环境</p><p><img src="https://img-blog.csdnimg.cn/20210615143836990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethod(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&quot;java/util/Map-&gt;get(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>:</span><br><span class="line">              StringObject keyobject = varArg.getObjectArg(<span class="number">0</span>);</span><br><span class="line">              String key = keyobject.getValue();</span><br><span class="line">              TreeMap&lt;String, String&gt; treeMap = (TreeMap&lt;String, String&gt;)dvmObject.getValue();</span><br><span class="line">              String value = treeMap.get(key);</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下</p><p><img src="https://img-blog.csdnimg.cn/20210615143847490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看一下JADX</p><p><img src="https://img-blog.csdnimg.cn/20210615143858819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们可以直接Hook返回对应结果，但硬编码显然不合理，参数一变结果就不同，怎么能硬编码呢？</p><p>新建一个util工具类，负责补充这个方法以及后续可能出现的各种方法。</p><p><img src="https://img-blog.csdnimg.cn/20210615143915205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>先把飘红的库导一下，导完还有这些有问题</p><p><img src="https://img-blog.csdnimg.cn/20210615143925454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>TextUtils是Android中的工具类，既然只是想判断字符串是否为空，那不用它也没什么</p><p><img src="https://img-blog.csdnimg.cn/20210615143934681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>b方法是什么？Jadx中看一下</p><p><img src="https://img-blog.csdnimg.cn/20210615143954192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>把b方法以及对应的c方法也放进来，导入对应类库，这是什么？</p><p><img src="https://img-blog.csdnimg.cn/20210615144013564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="20210615132449042"></p><p>Jadx中看一下</p><p><img src="https://img-blog.csdnimg.cn/2021061514403080.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>除此之外还有a方法报错了，不断copy jadx代码补过来</p><p>cv.m是什么？原来是15</p><p>这是最后补好的样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] f14934c = <span class="string">&quot;0123456789ABCDEF&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_VALUE_DELIMITER = <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD_DELIMITER = <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">a</span><span class="params">(<span class="keyword">char</span> c2, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (c2 &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c2 &lt;= <span class="string">&#x27;Z&#x27;</span>) || (c2 &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c2 &lt;= <span class="string">&#x27;z&#x27;</span>) || !((c2 &lt; <span class="string">&#x27;0&#x27;</span> || c2 &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; <span class="string">&quot;-_.~&quot;</span>.indexOf(c2) == -<span class="number">1</span> &amp;&amp; (str == <span class="keyword">null</span> || str.indexOf(c2) == -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">r</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">if</span> (!(map <span class="keyword">instanceof</span> SortedMap)) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> TreeMap(map);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span> (!key.isEmpty()) &#123;</span><br><span class="line">                sb.append(b(key));</span><br><span class="line">                sb.append(KEY_VALUE_DELIMITER);</span><br><span class="line">                String value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    str = b(value);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(str);</span><br><span class="line">                sb.append(FIELD_DELIMITER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = sb.length();</span><br><span class="line">        <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.deleteCharAt(length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">b</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c(str, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">c</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = str.length();</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i2 &lt; length) &#123;</span><br><span class="line">            <span class="keyword">int</span> i3 = i2;</span><br><span class="line">            <span class="keyword">while</span> (i3 &lt; length &amp;&amp; a(str.charAt(i3), str2)) &#123;</span><br><span class="line">                i3++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i3 != length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i3 &gt; i2) &#123;</span><br><span class="line">                    sb.append((CharSequence) str, i2, i3);</span><br><span class="line">                &#125;</span><br><span class="line">                i2 = i3 + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (i2 &lt; length &amp;&amp; !a(str.charAt(i2), str2)) &#123;</span><br><span class="line">                    i2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = str.substring(i3, i2).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">                <span class="keyword">int</span> length2 = bytes.length;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i4 = <span class="number">0</span>; i4 &lt; length2; i4++) &#123;</span><br><span class="line">                    sb.append(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">                    sb.append(f14934c[(bytes[i4] &amp; <span class="number">240</span>) &gt;&gt; <span class="number">4</span>]);</span><br><span class="line">                    sb.append(f14934c[bytes[i4] &amp; <span class="number">15</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i2 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> str;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append((CharSequence) str, i2, length);</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb == <span class="keyword">null</span> ? str : sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补其实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/bilibili/nativelibrary/SignedQuery-&gt;r(Ljava/util/Map;)Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">            DvmObject&lt;?&gt; mapObject = varArg.getObjectArg(<span class="number">0</span>);</span><br><span class="line">            TreeMap&lt;String, String&gt; mymap = (TreeMap&lt;String, String&gt;) mapObject.getValue();</span><br><span class="line">            String result = utils.r(mymap);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethod(vm, dvmClass, signature, varArg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功，继续往下跑，跳出新的错误</p><p><img src="https://img-blog.csdnimg.cn/20210615144044441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>糟了，竟然让我们初始化一个SignedQuery对象。。不慌不慌，随便搞一个简化版的内部类给它用</p><p><img src="https://img-blog.csdnimg.cn/20210615144053768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; newObject(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/bilibili/nativelibrary/SignedQuery-&gt;&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V&quot;</span>:</span><br><span class="line">            StringObject stringObject1 = varArg.getObjectArg(<span class="number">0</span>);</span><br><span class="line">            StringObject stringObject2 = varArg.getObjectArg(<span class="number">1</span>);</span><br><span class="line">            String str1 = stringObject1.getValue();</span><br><span class="line">            String str2 = stringObject2.getValue();</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;com/bilibili/nativelibrary/SignedQuery&quot;</span>).newObject(<span class="keyword">new</span> SignedQuery(str1, str2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.newObject(vm, dvmClass, signature, varArg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignedQuery</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SignedQuery</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = str;</span><br><span class="line">        <span class="keyword">this</span>.b = str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://img-blog.csdnimg.cn/20210615144105227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们发现结果已经跑出来了，返回一个对象。</p><p>init中有两个参数，参数2就是sign。</p><p>接下来我们考虑一个问题，在这个样本中，主要涉及的环境缺失是JAVA环境，具体地说，主要就是com.bilibili.nativelibrary.SignedQuery这个类的问题。</p><p>那能不能直接JADX中复制这个类，直接拿过来用呢？</p><p>事实上，确实是可以的，Unidbg提供了另外一种模拟Native调用JAVA的方式——缺啥补啥，其原理是JAVA的反射。</p><p>另起炉灶，新建Bilibili1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.jni.ProxyClassFactory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LibBili1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    LibBili1()&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.bilibili.app&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession6\\bilibili.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setDvmClassFactory(<span class="keyword">new</span> ProxyClassFactory());</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession6\\libbili.so&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line"></span><br><span class="line">        TreeMap&lt;String, String&gt; keymap = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">        keymap.put(<span class="string">&quot;ad_extra&quot;</span>, <span class="string">&quotquot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;appkey&quot;</span>, <span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;autoplay_card&quot;</span>, <span class="string">&quot;11&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;banner_hash&quot;</span>, <span class="string">&quot;10687342131252771522&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;build&quot;</span>, <span class="string">&quot;6180500&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;c_locale&quot;</span>, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;channel&quot;</span>, <span class="string">&quot;shenma117&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;column&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;device_name&quot;</span>, <span class="string">&quot;MIX2S&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;device_type&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;flush&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">        keymap.put(<span class="string">&quot;ts&quot;</span>, <span class="string">&quot;1612693177&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DvmClass Map = vm.resolveClass(<span class="string">&quot;java/util/Map&quot;</span>);</span><br><span class="line">        DvmClass AbstractMap = vm.resolveClass(<span class="string">&quot;java/util/AbstractMap&quot;</span>,Map);</span><br><span class="line">        DvmObject&lt;?&gt; input_map = vm.resolveClass(<span class="string">&quot;java/util/TreeMap&quot;</span>, AbstractMap).newObject(keymap);</span><br><span class="line">        list.add(vm.addLocalObject(input_map));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1c97</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        DvmObject result = vm.getObject(number.intValue());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        LibBili1 test = <span class="keyword">new</span> LibBili1();</span><br><span class="line">        System.out.println(<span class="string">&quot;Start call&quot;</span>);</span><br><span class="line">        test.s();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要两点改变</p><ul><li>LibBili1 不继承自AbstractJni</li><li>vm.setJni(this);改成 vm.setDvmClassFactory(new ProxyClassFactory());</li></ul><p>运行LibBili1</p><p><img src="https://img-blog.csdnimg.cn/20210615144117703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>报错显示找不到类，这味儿对了。</p><p>接下来补充SIgnedQuery整个类以及其中涉及到的类，红框即为我们补充的三个类</p><p><img src="https://img-blog.csdnimg.cn/20210615144126739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>运行后一步到位出结果</p><p>除此之外，因为SignedQuery整个类已经补齐了，我们可以直接toString出结果</p><p><img src="https://img-blog.csdnimg.cn/20210615144135783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四、算法还原"><a href="#四、算法还原" class="headerlink" title="四、算法还原"></a>四、算法还原</h3><p>见 我之前的《逆向指北》(一) ，很简单的算法。</p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>资料</p><p>链接：<a href="https://pan.baidu.com/s/1FgOd-mmUbTOv5V/_onz-Tpw">https://pan.baidu.com/s/1FgOd-mmUbTOv5V\_onz-Tpw</a><br>提取码：2qtk</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程五：qxs</title>
      <link href="/2021/06/11/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%BA%94%EF%BC%9Aqxs/"/>
      <url>/2021/06/11/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%BA%94%EF%BC%9Aqxs/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><ul><li><a href="#_2">一、前言</a></li><li><a href="#_11">二、准备</a></li><li><a href="#Unidbg_27">三、Unidbg模拟执行</a></li><li><a href="#_127">四、算法还原</a></li><li><a href="#_468">五、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>久违了，这是SO逆向实战教程的第五篇，最近忙于即将开讲的Unidbg课程内容的设计，所以疏忽了博客的更新，这篇的重点是一个MD5的炫技操作，需要对哈希算法原理有较深理解，本篇中不讲算法原理（可以自己看文档，或者看我在SO基础课里对MD5算法的手算），不懂算法原理的话，看起来一头雾水。</p><ul><li>侧重<strong>新工具、新思路、新方法</strong>的使用，算法分析的常见路子是Frida Hook + IDA ，在本系列中，会淡化Frida 的作用，采用Unidbg Hook + IDA 的路线。</li><li>主打入门，但<strong>并不限于入门</strong>，你会在样本里看到有浅有深的魔改加密算法、以及OLLVM、SO对抗等内容。</li><li>对样本的分析仅限于学习和研究，坚决抵制黑灰产。</li><li>一共十三篇，1-2天更新一篇。每篇的资料放在文末的百度网盘中。</li></ul><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210611232931585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>只有两个参数，context和明文，结果是一长串。</p><p>例：</p><p>input1：context</p><p>input2：r0ysue</p><p>输出：nonce=32DAB5DB-A036-4B83-8884-1E95A552C4B2&amp;timestamp=1623412271283&amp;devicetoken=r0ysue&amp;sign=5B0FF50A89C8704E3B3149A9E0EF2679</p><p>可以发现，输出的就是devicetoken，在输出中，有nonce和sign两个未知的键值对，timestamp应该就只是时间戳。</p><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">qxs</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    qxs() <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.qxs&quot;</span>).build(); <span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line"></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession5\\轻小说.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 设置是否打印Jni调用细节</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession5\\libsfdata.so&quot;</span>), <span class="keyword">false</span>); <span class="comment">// 加载libttEncrypt.so到unicorn虚拟内存，加载成功以后会默认调用init_array等函数</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先把JNI Onload跑起来，里面做了大量的初始化工作</span></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        qxs test = <span class="keyword">new</span> qxs();</span><br><span class="line">        System.out.println(test.getSFsecurity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSFsecurity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        Object custom = <span class="keyword">null</span>;</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(custom);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;F1517503-9779-32B7-9C78-F5EF501102BC&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xA944</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://img-blog.csdnimg.cn/20210611232947218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/util/UUID-&gt;randomUUID()Ljava/util/UUID;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> dvmClass.newObject(UUID.randomUUID());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202106112329569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;java/util/UUID-&gt;toString()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">            String uuid = dvmObject.getValue().toString();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, uuid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210611233005605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出结果</p><p>验证可以发现，nonce即uuid生成的随机数，timestamp就是当前时间戳，deviceToken就是传入的参数，sign就是生成的结果，问题来了，sign哪来的？</p><h3 id="四、算法还原"><a href="#四、算法还原" class="headerlink" title="四、算法还原"></a>四、算法还原</h3><p>这个SO存在一定的保护，没办法通过F5反编译，findHash插件也没有给出结果，那该怎么办？</p><p><img src="https://img-blog.csdnimg.cn/20210611233021580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这让人不禁思考一个问题</p><p><strong>Unidbg已经把加密结果正确跑出来了，那么，这个算法的所有细节应该尽收眼底，可是为什么现在emmm，我们连它用了什么加密都一无所知呢？这显然是不合理的呀！</strong></p><p>让我们打开Unidbg 的traceCode功能，追踪一下汇编指令流。</p><p><img src="https://img-blog.csdnimg.cn/2021061123303465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参数是起始地址和终止地址，此处指只追踪SO内的汇编流程，我们并不想跟着去libc里。</p><p>运行代码，这次足足跑了一两分钟才出结果</p><p><img src="https://img-blog.csdnimg.cn/20210611233044372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们将trace的汇编执行流保存到文件中，这样更直观，也好分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存的path</span></span><br><span class="line">String traceFile = <span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession5\\qxstrace.txt&quot;</span>;</span><br><span class="line">PrintStream traceStream = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(traceFile), <span class="keyword">true</span>);</span><br><span class="line">emulator.traceCode(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base+<span class="keyword">module</span>.size).setRedirect(traceStream);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210611233057161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>运行完成后，查看trace文件</p><p><img src="https://img-blog.csdnimg.cn/20210611233110964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>trace文件共11w行，但我们对这个trace其实并不满意，相比较IDA trace，它少了非常关键的寄存器值信息。</p><p>在指令trace这方面，ExAndroidNativeemu做的非常好，我们后面会做一下分析，现在我们先简单实现一下Unidbg的指令trace(ARM32)。</p><p>找到代码文件 src/main/java/com/github/unidbg/arm/AbstractARMEmulator.java</p><p><img src="https://img-blog.csdnimg.cn/20210611233122687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 添加值显示</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printAssemble</span><span class="params">(PrintStream out, Capstone.CsInsn[] insns, <span class="keyword">long</span> address, <span class="keyword">boolean</span> thumb)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (Capstone.CsInsn ins : insns) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;### Trace Instruction &quot;</span>);</span><br><span class="line">        sb.append(ARM.assembleDetail(<span class="keyword">this</span>, ins, address, thumb));</span><br><span class="line">        <span class="comment">// 打印每条汇编指令里参与运算的寄存器的值</span></span><br><span class="line">        Set&lt;Integer&gt; regset = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        Arm.OpInfo opInfo = (Arm.OpInfo) ins.operands;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;opInfo.op.length; i++)&#123;</span><br><span class="line">            regset.add(opInfo.op[i].value.reg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String RegChange = ARM.SaveRegs(<span class="keyword">this</span>, regset);</span><br><span class="line">        sb.append(RegChange);</span><br><span class="line">        sb.append(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        address += ins.size;</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>src/main/java/com/github/unidbg/arm/ARM.java 中，新建SaveRegs方法，实际上就是showregs的代码，只不过从print改成return回来而已。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">SaveRegs</span><span class="params">(Emulator&lt;?&gt; emulator, Set&lt;Integer&gt; regs)</span> </span>&#123;</span><br><span class="line">        Backend backend = emulator.getBackend();</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.append(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">        Iterator it = regs.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> reg = (<span class="keyword">int</span>) it.next();</span><br><span class="line">            Number number;</span><br><span class="line">            <span class="keyword">int</span> value;</span><br><span class="line">            <span class="keyword">switch</span> (reg) &#123;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R0:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r0=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R1:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r1=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R2:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r2=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R3:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r3=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R4:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r4=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R5:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r5=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R6:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r6=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R7:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r7=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R8:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; r8=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R9: <span class="comment">// UC_ARM_REG_SB</span></span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; sb=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_R10: <span class="comment">// UC_ARM_REG_SL</span></span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; sl=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_FP:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; fp=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_IP:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; ip=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_SP:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; SP=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_LR:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; LR=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ArmConst.UC_ARM_REG_PC:</span><br><span class="line">                    number = backend.reg_read(reg);</span><br><span class="line">                    value = number.intValue();</span><br><span class="line">                    builder.append(String.format(Locale.US, <span class="string">&quot; PC=0x%x&quot;</span>, value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码存在一些小bug，但勉强能用，让我们来看一下结果。</p><p>Sign是三十二位十六进制数，这让人想到MD5。</p><p>MD5在前面的篇幅中已经讲了很多了，它有两组标志性的数可以用于确认自身身份。</p><p>1.是0x67452301 0xefcdab89 等四个魔术，但单靠这四个数证明不了是MD5，也可能是别的哈希算法，除此之外，算法可能魔改常数。</p><p>2.MD5的64个K，K1-K64是MD5独特的标志，简单的魔改也不会改K值。（其实K表也可以随便改，但一般的开发人员也不懂K的意义，不敢乱改。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 魔数</span></span><br><span class="line">A = <span class="number">0x67452301</span></span><br><span class="line">B = <span class="number">0xefcdab89</span></span><br><span class="line">C = <span class="number">0x98badcfe</span></span><br><span class="line">D = <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># K表</span></span><br><span class="line">Ktable = [<span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>,</span><br><span class="line">      <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>, <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>,</span><br><span class="line">      <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>,</span><br><span class="line">      <span class="number">0x49b40821</span>, <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>,</span><br><span class="line">      <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>, <span class="number">0x21e1cde6</span>,</span><br><span class="line">      <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>,</span><br><span class="line">      <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>, <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>,</span><br><span class="line">      <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">      <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>,</span><br><span class="line">      <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>, <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>,</span><br><span class="line">      <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>,</span><br><span class="line">      <span class="number">0x85845dd1</span>, <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>,</span><br><span class="line">      <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>]</span><br></pre></td></tr></table></figure><p>看一下汇编trace文件</p><p><img src="https://img-blog.csdnimg.cn/20210611233249477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/20210611233313460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以搜索到K表中的值以及魔数，所以可以断定是一个MD5或者MD5的魔改版本。</p><p>考虑一个问题，我们是否可以直接从汇编中”析出”明文和密文？实际上对于标准算法来说是完全可以的，接下来的思路需要对MD5算法具有较深的了解。</p><p>首先，我们明确了样本算法中使用到了MD5</p><p>接下来我们做两件事</p><ul><li>从汇编trace中析出MD5的结果——用于确认输出是否与MD5有直接关系</li><li>从汇编trace中析出MD5的输入——用于确认函数的输入和MD5的输入的关系</li></ul><p>首先做第一件事</p><p>找0x67452301最后和谁相加</p><p><img src="https://img-blog.csdnimg.cn/20210611233328126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>计算两者相加的结果（如果大于0xffffffff则取低的32比特） 即 E8D87616</p><p>如果输入小于512比特，那么调整一下端序，1676D8E8，这就是MD5前8个数字的结果</p><p>我们搜索一下 E8D87616，发现后面还有它参与的运算，这说明明文长度超过一个分组长，需要进行第二个分组的运算</p><p><img src="https://img-blog.csdnimg.cn/20210611233337686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同样找0xE8D87616最后和谁相加</p><p>0xE8D87616 + 0xda40fcd8</p><p><img src="https://img-blog.csdnimg.cn/20210611233351371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>取C319 72EE</p><p>倒转端序 即EE72 19C3</p><p><img src="https://img-blog.csdnimg.cn/20210611233402809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们发现这就是加密结果的前8个数，读者可以自行验证第二第三第四部分，同理。</p><p>我们通过这种方式确认了，MD5的结果就是加密的结果。</p><p>那么做另一件事——Trace汇编中析出MD5的明文，这不是一件简单的事</p><p><img src="https://img-blog.csdnimg.cn/202106112334146.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在MD5具体流程中，每轮运算都需要64步，每步的第三个操作是选取明文的一截进行加法运算，第四个操作是和K相加。我们无法定位第三个操作，但因为第四个操作的K都是已知的，所以可以这样描述“第四个操作上方第一个add运算就是明文的一截+中间结果”</p><p>但是呢。。这前四步其实并没有硬性的顺序要求，生成的汇编代码常常不遵照顺序。。</p><p>但好在第一个F(B,C,D)的结果是固定的0xffffffff，它是一个很好的“锚点“</p><p>基于K值和这个锚点，我们可以在汇编trace中准确的析出明文——仅依靠trace汇编，不管OLLVM或者花指令将指令流变成10w行还是100w行，还是SO做了保护，明文不会完整出现在内存中，都不影响这个分析过程。</p><p><img src="https://img-blog.csdnimg.cn/20210611233426112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>红框即定位的明文块1的小端序</p><p>所以明文就是34413545，cyberchef中看一下</p><p><img src="https://img-blog.csdnimg.cn/20210611233441882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第一个明文块：4A5E</p><p>依照着上述锚点，不断往下追</p><p>第二个明文块：9A20</p><p>第三个明文块：-893</p><p>第四个明文块：3-4E</p><p>第五个明文块：2D-8</p><p>第六个明文块：39A-</p><p>第七个明文块：0DFC</p><p>第八个明文块：F9EA</p><p>第九个明文块：7247</p><p>第十个明文块：1623</p><p>第十一个明文块：4180</p><p>第十二个明文块：1589</p><p>第十三个明文块：1r0y</p><p>第十四个明文块：suet</p><p>第十五个明文块：d9#K</p><p>第十六个明文块：n_p7</p><p>开始第二个分组</p><p>第十七个明文块：vUw.(.即0x80填充开始）</p><p>更严谨些，通过K15确认明文长0x218比特，即512比特+ 24比特，所以明文到此结束。</p><p>合并起来就是</p><p>4A5E9A20-8933-4E2D-839A-0DFCF9EA72471623418015891r0ysuetd9#Kn_p7vUw</p><p>首先迫不及待求一下MD5，验证结果</p><p><img src="https://img-blog.csdnimg.cn/20210611233458226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>完全正确</p><p>接下来仔细瞧瞧明文的组成</p><p>这是我们的输出</p><p><strong>nonce=4A5E9A20-8933-4E2D-839A-0DFCF9EA7247&amp;timestamp=1623418015891&amp;devicetoken=r0ysue&amp;sign=EE7219C352A74B6058B22CE8A5FB282E</strong></p><p>这是明文</p><p><strong>4A5E9A20-8933-4E2D-839A-0DFCF9EA72471623418015891r0ysuetd9#Kn_p7vUw</strong></p><p>nonce+timestamp+devicetoken+(固定的salt)td9#Kn_p7vUw</p><p>大功告成！</p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>这不是一篇简单的文章，放第五篇有些偏前，而且其方法内核基于加密算法的深度理解，看不懂或者看不下去都没关系，下一篇恢复正常，和此篇没有关联性。但笔者必须要强调，文中所述的这种方法，是一种强大的、无视混淆流程的，真正意义上深入底层的标准算法还原技术，尤其在”加盐哈希算法“中分析”盐“格外强大，甚至存在编写代码自动化完成相关工作的可能性。<br>资源链接：<a href="https://pan.baidu.com/s/1b24egt-FEbcRlQYeOwpNYQ">https://pan.baidu.com/s/1b24egt-FEbcRlQYeOwpNYQ</a><br>提取码：1t4l</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程四：mfw</title>
      <link href="/2021/06/04/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%9B%9B%EF%BC%9Amfw/"/>
      <url>/2021/06/04/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E5%9B%9B%EF%BC%9Amfw/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><ul><li><ul><li><a href="#_1">一、前言</a></li><li><a href="#_10">二、准备</a></li><li><a href="#Unidbg_23">三、Unidbg模拟执行</a></li><li><a href="#_134">四、算法还原</a></li><li><a href="#_721">五、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>这是SO逆向入门实战教程的第四篇，上篇的重心是Unidbg的补环境以及哈希算法的简单魔改，本篇的重点是使用Unidbg中对魔改程度较深的加密算法进行分析。</p><ul><li>侧重<strong>新工具、新思路、新方法</strong>的使用，算法分析的常见路子是Frida Hook + IDA ，在本系列中，会淡化Frida 的作用，采用Unidbg Hook + IDA 的路线。</li><li>主打入门，但<strong>并不限于入门</strong>，你会在样本里看到有浅有深的魔改加密算法、以及OLLVM、SO对抗等内容。</li><li>对样本的分析仅限于学习和研究，坚决抵制黑灰产。</li><li>一共十三篇，1-2天更新一篇。每篇的资料放在文末的百度网盘中。</li></ul><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210604095705988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>xPreAuthencode是目标方法，它接收三个参数</p><p>参数1是一个context，参数2是输入的明文，参数3是app的包名，返回值是40位的十六进制数。</p><p>Frida主动调用测试样本，参数2设为”r0ysue”，参数3设为”com.mfw.roadbook”，输出：</p><p><strong>57c043fe945355a64cb9c3d75db4bd767d1bbccb</strong></p><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><p>老规矩，先搭一下架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mfw</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    mfw() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.mfw.roadbook&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession4\\mafengwo_ziyouxing.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession4\\libmfw.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mfw test = <span class="keyword">new</span> mfw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://img-blog.csdnimg.cn/20210604095722402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>RegisterNative(com/mfw/tnative/AuthorizeHelper, xPreAuthencode(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;, RX@0x4002e301[libmfw.so]<strong>0x2e301</strong>)</p></blockquote><p>JNI OnLoad运行成功，我们的目标方法其地址是0x2e301，传入的三个参数是String或者context，都是前文讲过的类型，不做赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mfw</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    mfw() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.mfw.roadbook&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession4\\mafengwo_ziyouxing.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession4\\libmfw.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">xPreAuthencode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        Object custom = <span class="keyword">null</span>;</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(custom);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;r0ysue&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;com.mfw.roadbook&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x2e301</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mfw test = <span class="keyword">new</span> mfw();</span><br><span class="line">        System.out.println(test.xPreAuthencode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><p><img src="https://img-blog.csdnimg.cn/20210604095737620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们惊喜的发现，由于该样本中没有太多和JAVA层的交互，直接就顺利跑出了结果！但是呢，跑出算法并不是本篇的重点，让我们继续往下看。</p><h3 id="四、算法还原"><a href="#四、算法还原" class="headerlink" title="四、算法还原"></a>四、算法还原</h3><p>测试发现，不论输入明文多长，都输出固定长度结果，所以疑似哈希算法，又因为输出恒为40位，所以又疑似哈希算法中的SHA1算法。</p><p>首先静态分析一下，根据地址，IDA中跳到0x2e301</p><p><img src="https://img-blog.csdnimg.cn/20210604095801585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>对入参做一下重命名和调整</p><p><img src="https://img-blog.csdnimg.cn/20210604095812135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>sub_30548是一个签名校验函数，做出这种判断的原因有很多点</p><ul><li>参数是context上下文和包名</li><li>返回值为false时，整个JNI函数返回”illegal signature“（非法签名）。</li></ul><p>但我们在用Unidbg模拟执行时，并没有感受到native调用JAVA签名校验的烦恼，这是因为我们传入了APK，Unidbg替我们处理了这部分签名校验，但Unidbg并不能处理所有情况下的签名校验，所以在之前的一些例子里，我们会patch掉签名校验函数。</p><p>对JNI函数做进一步的注释</p><p><img src="https://img-blog.csdnimg.cn/20210604095821752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>加密逻辑一定在sub_312E0或者sub_2e1f4中，自上而下先看sub_2E1F4，它参数1是输入的明文，参数3是明文长度，那参数2呢？和上一篇的样本一样，是buffer，v13的定义也可以看出，v13[20]，什么都没做，直接放函数中。</p><p>使用HookZz 在函数进入前Hook参数1和参数3，函数出去后Hook 参数2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook_312E0</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取HookZz对象</span></span><br><span class="line">    IHookZz hookZz = HookZz.getInstance(emulator); <span class="comment">// 加载HookZz，支持inline hook，文档看https://github.com/jmpews/HookZz</span></span><br><span class="line">    <span class="comment">// enable hook</span></span><br><span class="line">    hookZz.enable_arm_arm64_b_branch(); <span class="comment">// 测试enable_arm_arm64_b_branch，可有可无</span></span><br><span class="line">    <span class="comment">// hook MDStringOld</span></span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x312E0</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 方法执行前</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            Pointer input = ctx.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] inputhex = input.getByteArray(<span class="number">0</span>, ctx.getR2Int());</span><br><span class="line">            Inspector.inspect(inputhex, <span class="string">&quot;input&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Pointer out = ctx.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            ctx.push(out);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 方法执行后</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            Pointer output = ctx.pop();</span><br><span class="line">            <span class="keyword">byte</span>[] outputhex = output.getByteArray(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            Inspector.inspect(outputhex, <span class="string">&quot;output&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    hookZz.disable_arm_arm64_b_branch();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210604095834841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参数正是我们输入的明文，返回值就是最终结果，所以我们只用关注这个函数即可。</p><p><img src="https://img-blog.csdnimg.cn/20210604095846776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>数值上按H转成十六进制</p><p><img src="https://img-blog.csdnimg.cn/20210604095856861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>疑似SHA1算法，看一下标准的魔数</p><p><img src="https://img-blog.csdnimg.cn/20210604095906139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以发现，IV的第四个和第五个被改变了。</p><p>接下来我们依照样本中的IV，对标准算法进行修改和验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0xffffffff is used to make sure numbers dont go over 32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span>(<span class="params">messageLength, chunkSize</span>):</span></span><br><span class="line">    chunkValues = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(messageLength), chunkSize):</span><br><span class="line">        chunkValues.append(messageLength[i:i + chunkSize])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chunkValues</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leftRotate</span>(<span class="params">chunk, rotateLength</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((chunk &lt;&lt; rotateLength) | (chunk &gt;&gt; (<span class="number">32</span> - rotateLength))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha1Function</span>(<span class="params">message</span>):</span></span><br><span class="line">    <span class="comment"># initial hash values</span></span><br><span class="line">    h0 = <span class="number">0x67452301</span></span><br><span class="line">    h1 = <span class="number">0xEFCDAB89</span></span><br><span class="line">    h2 = <span class="number">0x98BADCFE</span></span><br><span class="line">    h3 = <span class="number">0x5E4A1F7C</span></span><br><span class="line">    h4 = <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line">    messageLength = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># preprocessing</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message)):</span><br><span class="line">        messageLength += <span class="string">&#x27;&#123;0:08b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(message[char]))</span><br><span class="line"></span><br><span class="line">    temp = messageLength</span><br><span class="line">    messageLength += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(messageLength) % <span class="number">512</span> != <span class="number">448</span>):</span><br><span class="line">        messageLength += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">    messageLength += <span class="string">&#x27;&#123;0:064b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(temp))</span><br><span class="line">    chunk = chunks(messageLength, <span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> eachChunk <span class="keyword">in</span> chunk:</span><br><span class="line">        words = chunks(eachChunk, <span class="number">32</span>)</span><br><span class="line">        w = [<span class="number">0</span>] * <span class="number">80</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">            w[n] = <span class="built_in">int</span>(words[n], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>, <span class="number">80</span>):</span><br><span class="line">            <span class="comment"># sha1</span></span><br><span class="line">            <span class="comment"># w[i] = leftRotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)</span></span><br><span class="line">            <span class="comment"># sha0</span></span><br><span class="line">            w[i] = (w[i - <span class="number">3</span>] ^ w[i - <span class="number">8</span>] ^ w[i - <span class="number">14</span>] ^ w[i - <span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Initialize hash value for this chunk:</span></span><br><span class="line">        a = h0</span><br><span class="line">        b = h1</span><br><span class="line">        c = h2</span><br><span class="line">        d = h3</span><br><span class="line">        e = h4</span><br><span class="line"></span><br><span class="line">        <span class="comment"># main loop:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">80</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt;= <span class="number">19</span>:</span><br><span class="line">                f = (b &amp; c) | ((~b) &amp; d)</span><br><span class="line">                k = <span class="number">0x5A827999</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">20</span> &lt;= i &lt;= <span class="number">39</span>:</span><br><span class="line">                f = b ^ c ^ d</span><br><span class="line">                k = <span class="number">0x6ED9EBA1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">40</span> &lt;= i &lt;= <span class="number">59</span>:</span><br><span class="line">                f = (b &amp; c) | (b &amp; d) | (c &amp; d)</span><br><span class="line">                k = <span class="number">0x8F1BBCDC</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">60</span> &lt;= i &lt;= <span class="number">79</span>:</span><br><span class="line">                f = b ^ c ^ d</span><br><span class="line">                k = <span class="number">0xCA62C1D6</span></span><br><span class="line"></span><br><span class="line">            a, b, c, d, e = ((leftRotate(a, <span class="number">5</span>) + f + e + k + w[i]) &amp; <span class="number">0xffffffff</span>, a, leftRotate(b, <span class="number">30</span>), c, d)</span><br><span class="line"></span><br><span class="line">        h0 = h0 + a &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h1 = h1 + b &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h2 = h2 + c &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h3 = h3 + d &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h4 = h4 + e &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%08x%08x%08x%08x%08x&#x27;</span> % (h0, h1, h2, h3, h4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plainText = <span class="string">&quot;r0ysue&quot;</span></span><br><span class="line">sha1Hash = sha1Function(plainText)</span><br><span class="line"><span class="built_in">print</span>(sha1Hash)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210604095925445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>遗憾的是，这次结果并没有一致！换而言之，我们遇到了对算法的真正魔改，而非只是上节课那般，修改一下IV!</p><p>我们该如何在几百行代码中，找到魔改在何方呢？重命名一下入参，看一下此处的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_312E0</span><span class="params">(<span class="keyword">char</span> *input, <span class="keyword">int</span> output, <span class="keyword">int</span> Length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [sp+20h] [bp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> v28; <span class="comment">// [sp+28h] [bp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v29[<span class="number">12</span>]; <span class="comment">// [sp+2Ch] [bp-78h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v30[<span class="number">5</span>]; <span class="comment">// [sp+38h] [bp-6Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v31; <span class="comment">// [sp+4Ch] [bp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [sp+50h] [bp-54h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v33[<span class="number">63</span>]; <span class="comment">// [sp+54h] [bp-50h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v34; <span class="comment">// [sp+93h] [bp-11h]</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [sp+94h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v30[<span class="number">1</span>] = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">  v30[<span class="number">0</span>] = <span class="number">0x67452301</span>;</span><br><span class="line">  v30[<span class="number">2</span>] = <span class="number">0x98BADCFE</span>;</span><br><span class="line">  v30[<span class="number">3</span>] = <span class="number">0x5E4A1F7C</span>;</span><br><span class="line">  v30[<span class="number">4</span>] = <span class="number">0x10325476</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v31 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( Length )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = Length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v31 )</span><br><span class="line">    &#123;</span><br><span class="line">      v31 = i + <span class="number">8</span>;</span><br><span class="line">      <span class="keyword">if</span> ( i &gt;= <span class="number">0xFFFFFFF8</span> )</span><br><span class="line">        v32 = ++v4;</span><br><span class="line">      v32 = v4;</span><br><span class="line">      v7 = (i &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">      v8 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v7 == <span class="number">63</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v34 = *input;</span><br><span class="line">        sub_3151C(v30, v33);</span><br><span class="line">        v7 = <span class="number">0</span>;</span><br><span class="line">        v8 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      qmemcpy(&amp;v33[v7], &amp;input[v8], v8 ^ <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      --v5;</span><br><span class="line">      ++input;</span><br><span class="line">      v4 = v32;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">8</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v29[j] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v30[(j &lt; <span class="number">4</span>) + <span class="number">5</span>] &gt;&gt; (~(_BYTE)v9 &amp; <span class="number">0x18</span>);</span><br><span class="line">    v9 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v28 = <span class="number">0x80</span>;</span><br><span class="line">  v11 = v31;</span><br><span class="line">  v12 = v31 + <span class="number">8</span>;</span><br><span class="line">  v31 += <span class="number">8</span>;</span><br><span class="line">  v13 = v32;</span><br><span class="line">  <span class="keyword">if</span> ( v11 &gt;= <span class="number">0xFFFFFFF8</span> )</span><br><span class="line">    v13 = ++v32;</span><br><span class="line">  v32 = v13;</span><br><span class="line">  v14 = (v11 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v14 == <span class="number">63</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v34 = <span class="number">0x80</span>;</span><br><span class="line">    sub_3151C(v30, v33);</span><br><span class="line">    v14 = <span class="number">0</span>;</span><br><span class="line">    v15 = <span class="number">1</span>;</span><br><span class="line">    v12 = v31;</span><br><span class="line">  &#125;</span><br><span class="line">  qmemcpy(&amp;v33[v14], (<span class="keyword">const</span> <span class="keyword">void</span> *)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v28 | v15), v15 ^ <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (v12 &amp; <span class="number">0x1F8</span>) == <span class="number">448</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = v12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v16 = v12;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v17 = <span class="number">0</span>;</span><br><span class="line">      v28 = <span class="number">0</span>;</span><br><span class="line">      v16 += <span class="number">8</span>;</span><br><span class="line">      v31 = v16;</span><br><span class="line">      v18 = v32;</span><br><span class="line">      <span class="keyword">if</span> ( v12 &gt;= <span class="number">0xFFFFFFF8</span> )</span><br><span class="line">        v18 = ++v32;</span><br><span class="line">      v32 = v18;</span><br><span class="line">      v19 = (v12 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v19 == <span class="number">63</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v19 = <span class="number">0</span>;</span><br><span class="line">        v34 = <span class="number">0</span>;</span><br><span class="line">        sub_3151C(v30, v33);</span><br><span class="line">        v16 = v31;</span><br><span class="line">        v17 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      qmemcpy(&amp;v33[v19], (<span class="keyword">const</span> <span class="keyword">void</span> *)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v28 | v17), v17 ^ <span class="number">1</span>);</span><br><span class="line">      v12 = v16;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( (v16 &amp; <span class="number">0x1F8</span>) != <span class="number">448</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  v31 = v16 + <span class="number">64</span>;</span><br><span class="line">  v20 = v32;</span><br><span class="line">  <span class="keyword">if</span> ( v16 &gt;= <span class="number">0xFFFFFFC0</span> )</span><br><span class="line">    v20 = ++v32;</span><br><span class="line">  v32 = v20;</span><br><span class="line">  v21 = (v16 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v21 + <span class="number">8</span>) &lt; <span class="number">0x40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v23 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v27 = <span class="number">64</span> - v21;</span><br><span class="line">    qmemcpy(&amp;v33[v21], v29, <span class="number">64</span> - v21);</span><br><span class="line">    sub_3151C(v30, v33);</span><br><span class="line">    v23 = v27;</span><br><span class="line">    v21 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  qmemcpy(&amp;v33[v21], &amp;v29[v23], <span class="number">8</span> - v23);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k != <span class="number">20</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(output + k) = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)((<span class="keyword">char</span> *)v30 + (k &amp; <span class="number">0xFFFFFFFC</span>)) &gt;&gt; (~(_BYTE)v22 &amp; <span class="number">0x18</span>);</span><br><span class="line">    v22 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard - v35;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中多次出现sub_3151C，点进去看一下</p><p><img src="https://img-blog.csdnimg.cn/20210604095934805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>代码量五六百行，应该就是函数的运算部分。加上前面的部分，总共七八百行代码，那么我们该如何找魔改发生在何处呢？甚至？它是不是没魔改算法流程，而是在标准运算结束后，和某个KEY做了异或？</p><p>这个问题的解决办法依赖于对哈希算法流程的深度理解，感兴趣的可以看一下SO基础课中关于密码学原理与实现的部分或者康康Unidbg系列内容的视频课，文字想讲清楚不是一件容易的事。</p><p>一个哈希算法，可以简单划分成填充和加密两部分，直接Hook加密函数，看它的入参，依此判定填充部分是否发生过改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook_3151C</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取HookZz对象</span></span><br><span class="line">    IHookZz hookZz = HookZz.getInstance(emulator); <span class="comment">// 加载HookZz，支持inline hook，文档看https://github.com/jmpews/HookZz</span></span><br><span class="line">    <span class="comment">// enable hook</span></span><br><span class="line">    hookZz.enable_arm_arm64_b_branch(); <span class="comment">// 测试enable_arm_arm64_b_branch，可有可无</span></span><br><span class="line">    <span class="comment">// hook MDStringOld</span></span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x3151C</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 方法执行前</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 类似于Frida args[0]</span></span><br><span class="line">            Pointer input = ctx.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] inputhex = input.getByteArray(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            Inspector.inspect(inputhex, <span class="string">&quot;IV&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Pointer text = ctx.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] texthex = text.getByteArray(<span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">            Inspector.inspect(texthex, <span class="string">&quot;block&quot;</span>);</span><br><span class="line">            ctx.push(input);</span><br><span class="line">            ctx.push(text);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 方法执行后</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            Pointer text = ctx.pop();</span><br><span class="line">            Pointer IV = ctx.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] IVhex = IV.getByteArray(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            Inspector.inspect(IVhex, <span class="string">&quot;IV&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] outputhex = text.getByteArray(<span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">            Inspector.inspect(outputhex, <span class="string">&quot;block out&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    hookZz.disable_arm_arm64_b_branch();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">08</span>:<span class="number">53</span>:<span class="number">06</span> <span class="number">577</span>]IV, md5=b70ca24521f790e6bf3c4a16ba868a03, hex=<span class="number">0123456789</span>abcdeffedcba987c1f4a5e76543210</span><br><span class="line">size: <span class="number">20</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">01</span> <span class="number">23</span> <span class="number">45</span> <span class="number">67</span> <span class="number">89</span> AB <span class="built_in">CD</span> EF FE DC BA <span class="number">98</span> <span class="number">7</span>C <span class="number">1</span>F <span class="number">4</span>A <span class="number">5</span>E    .<span class="comment">#Eg........|.J^</span></span><br><span class="line"><span class="number">0010</span>: <span class="number">76</span> <span class="number">54</span> <span class="number">32</span> <span class="number">10</span>                                        vT2.</span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line"></span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">08</span>:<span class="number">53</span>:<span class="number">06</span> <span class="number">578</span>]block, md5=c8e3dfac5d04ac7fb62160cd976bb01c, hex=<span class="number">72307973756580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030</span></span><br><span class="line">size: <span class="number">64</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">72</span> <span class="number">30</span> <span class="number">79</span> <span class="number">73</span> <span class="number">75</span> <span class="number">65</span> <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    r0ysue..........</span><br><span class="line"><span class="number">0010</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    ................</span><br><span class="line"><span class="number">0020</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    ................</span><br><span class="line"><span class="number">0030</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">30</span>    ...............<span class="number">0</span></span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line"></span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">08</span>:<span class="number">53</span>:<span class="number">06</span> <span class="number">592</span>]IV, md5=eb8ea7f8f507f692ef0778f13a59a330, hex=fe43c057a6555394d7c3b94c76bdb45dcbbc1b7d</span><br><span class="line">size: <span class="number">20</span></span><br><span class="line"><span class="number">0000</span>: FE <span class="number">43</span> C0 <span class="number">57</span> A6 <span class="number">55</span> <span class="number">53</span> <span class="number">94</span> D7 C3 B9 <span class="number">4</span>C <span class="number">76</span> BD B4 <span class="number">5</span>D    .C.W.US....Lv..]</span><br><span class="line"><span class="number">0010</span>: CB BC <span class="number">1</span>B <span class="number">7</span>D                                        ...&#125;</span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line"></span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">08</span>:<span class="number">53</span>:<span class="number">06</span> <span class="number">592</span>]block out, md5=c8e3dfac5d04ac7fb62160cd976bb01c, hex=<span class="number">72307973756580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030</span></span><br><span class="line">size: <span class="number">64</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">72</span> <span class="number">30</span> <span class="number">79</span> <span class="number">73</span> <span class="number">75</span> <span class="number">65</span> <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    r0ysue..........</span><br><span class="line"><span class="number">0010</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    ................</span><br><span class="line"><span class="number">0020</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    ................</span><br><span class="line"><span class="number">0030</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">30</span>    ...............<span class="number">0</span></span><br><span class="line">^-----------------------------------------------------------------------------^</span><br></pre></td></tr></table></figure><p>Hook结果反映了这样一个问题</p><p><strong>魔改的是算法本身，因为运算函数的入参是正常的、填充后的明文，所以不存在自定义填充、或者对明文做变换的可能，出参即是输出的结果，所以算法并不是在标准流程之后做了一些自定义步骤，它修改的——就是算法本身。</strong></p><p>那么这个时候就该考虑，SHA1算法的运算部分是由什么组成？SHA1和MD5采用了相同的结构，每512比特分组需要一轮运算，我们的输入长度不超过一个分组的长度，所以只用考虑一轮运算。一轮运算是80步，每隔20步是一种模式。</p><p>首先记录80步中，每一步正常情况下应该得出的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">0x5e1444aa</span><br><span class="line">0xecb6ad5e</span><br><span class="line">0x4066d34</span><br><span class="line">0xed08cc85</span><br><span class="line">0xe8f28c34</span><br><span class="line">0x237ebcb7</span><br><span class="line">0xeecacf3d</span><br><span class="line">0xaf1a9fa8</span><br><span class="line">0x921750fc</span><br><span class="line">0x4380efc5</span><br><span class="line">0xff26c559</span><br><span class="line">0xe3d49cd6</span><br><span class="line">0x517dcdd6</span><br><span class="line">0x22a2bc19</span><br><span class="line">0x3eaf6dc2</span><br><span class="line">0x4891169b</span><br><span class="line">0x20c32ce1</span><br><span class="line">0x8556c446</span><br><span class="line">0xdd2c894f</span><br><span class="line">0x5420ba17</span><br><span class="line">0x6ec4e797</span><br><span class="line">0x91e5d34b</span><br><span class="line">0xba26ad8</span><br><span class="line">0xef34ad50</span><br><span class="line">0xd1126575</span><br><span class="line">0x7dd310e7</span><br><span class="line">0x6b52d1f9</span><br><span class="line">0xe7768a2</span><br><span class="line">0xac273146</span><br><span class="line">0x694146b8</span><br><span class="line">0xebe5e627</span><br><span class="line">0xfa712f50</span><br><span class="line">0x10bfabc0</span><br><span class="line">0x4cb1379b</span><br><span class="line">0x665c4398</span><br><span class="line">0xb2b46868</span><br><span class="line">0x2ac8a949</span><br><span class="line">0xb65eae61</span><br><span class="line">0x3524a2e5</span><br><span class="line">0x72ac7756</span><br><span class="line">0x7f0e6c94</span><br><span class="line">0x2928a555</span><br><span class="line">0x7ed33fde</span><br><span class="line">0x46a8f7fc</span><br><span class="line">0x66ff0f01</span><br><span class="line">0x52cfa822</span><br><span class="line">0x4b18fa72</span><br><span class="line">0xe39f852e</span><br><span class="line">0xe0a3043a</span><br><span class="line">0x9729af47</span><br><span class="line">0xc142ad63</span><br><span class="line">0x77c7096f</span><br><span class="line">0x94602ecb</span><br><span class="line">0x3e7202e5</span><br><span class="line">0x89c7a8f2</span><br><span class="line">0xbd2782bb</span><br><span class="line">0xe6f058a3</span><br><span class="line">0x8ca5906</span><br><span class="line">0xe5cb4077</span><br><span class="line">0x4a238672</span><br><span class="line">0xe93aa2e</span><br><span class="line">0xcf4dd760</span><br><span class="line">0x111f600f</span><br><span class="line">0x3853e9bf</span><br><span class="line">0x7e375ab5</span><br><span class="line">0xe4ba4774</span><br><span class="line">0x9e39f23</span><br><span class="line">0x4041ea20</span><br><span class="line">0x82265213</span><br><span class="line">0x9f37f728</span><br><span class="line">0x3adf0819</span><br><span class="line">0x586ac5e9</span><br><span class="line">0xe5675b10</span><br><span class="line">0xfb192c0e</span><br><span class="line">0xc885ea1b</span><br><span class="line">0x30628c48</span><br><span class="line">0x833f6da5</span><br><span class="line">0x5d958b47</span><br><span class="line">0x2b11a368</span><br><span class="line">0xc5611c9d</span><br></pre></td></tr></table></figure><p>接下来通过inline Hook的方式，验证样本中80步的结果，这个过程需要对加密算法的原理和编程实现都有非常深的了解才能完成</p><p><img src="https://img-blog.csdnimg.cn/20210604095946931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以使用如下的方式用HookZz实现Inline hook</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook_315B0</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IHookZz hookZz = HookZz.getInstance(emulator);</span><br><span class="line">    hookZz.enable_arm_arm64_b_branch();</span><br><span class="line"></span><br><span class="line">    hookZz.instrument(<span class="keyword">module</span>.base + <span class="number">0x315B0</span> + <span class="number">1</span>, <span class="keyword">new</span> InstrumentCallback&lt;Arm32RegisterContext&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dbiCall</span><span class="params">(Emulator&lt;?&gt; emulator, Arm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123; <span class="comment">// 通过base+offset inline wrap内部函数，在IDA看到为sub_xxx那些</span></span><br><span class="line">            System.out.println(<span class="string">&quot;R2:&quot;</span>+ctx.getR2Long());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们整体上需要进行十数次甚至数十次的inline hook，在这种情况下，用HookZz就略有些不方便，不妨试试Unidbg的console debugger。</p><p><img src="https://img-blog.csdnimg.cn/20210604100024205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/20210604100039506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在这样一种重复的工作中我们发现，前16步，样本与标准算法的加密流程是一致的，从第17步开始分道扬镳。我们用Python代码来表示</p><p>标准流程的80步运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>):</span><br><span class="line">    <span class="keyword">if</span> t &lt;= <span class="number">19</span>:</span><br><span class="line">        K = <span class="number">0x5a827999</span></span><br><span class="line">        f = (b &amp; c) ^ (~b &amp; d)</span><br><span class="line">    <span class="keyword">elif</span> t &lt;= <span class="number">39</span>:</span><br><span class="line">        K = <span class="number">0x6ed9eba1</span></span><br><span class="line">        f = b ^ c ^ d</span><br><span class="line">    <span class="keyword">elif</span> t &lt;= <span class="number">59</span>:</span><br><span class="line">        K = <span class="number">0x8f1bbcdc</span></span><br><span class="line">        f = (b &amp; c) ^ (b &amp; d) ^ (c &amp; d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        K = <span class="number">0xca62c1d6</span></span><br><span class="line">        f = b ^ c ^ d</span><br></pre></td></tr></table></figure><p>样本的80步运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>):</span><br><span class="line">    <span class="keyword">if</span> t &lt;= <span class="number">15</span>:</span><br><span class="line">        K = <span class="number">0x5a827999</span></span><br><span class="line">        f = (b &amp; c) ^ (~b &amp; d)</span><br><span class="line">    <span class="keyword">elif</span> t &lt;= <span class="number">19</span>:</span><br><span class="line">        K = <span class="number">0x6ed9eba1</span></span><br><span class="line">        f = b ^ c ^ d</span><br><span class="line">    <span class="keyword">elif</span> t &lt;= <span class="number">39</span>:</span><br><span class="line">        K = <span class="number">0x8f1bbcdc</span></span><br><span class="line">        f = (b &amp; c) ^ (b &amp; d) ^ (c &amp; d)</span><br><span class="line">    <span class="keyword">elif</span> t &lt;= <span class="number">59</span>:</span><br><span class="line">        K = <span class="number">0x5a827999</span></span><br><span class="line">        f = (b &amp; c) ^ (~b &amp; d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        K = <span class="number">0xca62c1d6</span></span><br><span class="line">        f = b ^ c ^ d</span><br></pre></td></tr></table></figure><p>在标准流程中，20步切换一下K和非线性函数，一共4种模式，在样本中，每16步切换一下K和非线性函数，一种五种模式，但本质上依然是标准流程里的四个模式，因为一个模式用了两次。</p><p>验证结果，大功告成。</p><p><img src="https://img-blog.csdnimg.cn/2021060410005068.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>本篇的写作过程是很别扭的，加密算法是一个艰深的东西，想在有限的篇幅里讲解深度魔改加密算法的样本更是，这篇文章中所阐述的内容并不足以真正理解这个魔改样本。读者可以自行通过如下路径之一，获得对样本中魔改样本的真正的理解。</p><ul><li>阅读SHA1 WIKI + 官方英文文档 + 手写一遍C实现</li><li>报我的课，看直播一起嘻嘻哈哈</li></ul><p>除此之外，样本中还有一个魔改Hmac，嘤，大家可以学习和研究一下。</p><p>资料链接：<a href="https://pan.baidu.com/s/1MHe0Oen6KKsdWru0YWTUzQ">https://pan.baidu.com/s/1MHe0Oen6KKsdWru0YWTUzQ</a><br>提取码：ro1x</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程三：V2-Sign</title>
      <link href="/2021/06/03/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B8%89%EF%BC%9AV2-Sign/"/>
      <url>/2021/06/03/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B8%89%EF%BC%9AV2-Sign/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#_0"></a></li><li><ul><li><ul><li><a href="#_3">一、前言</a></li><li><a href="#_12">二、准备</a></li><li><a href="#Unidbg_37">三、Unidbg模拟执行</a></li><li><a href="#_627">四、算法还原</a></li><li><a href="#_1061">五、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>这是SO逆向入门实战教程的第三篇，上篇的重心是Unidbg的Hook使用，本篇的重点是如何在Unidbg中补齐JAVA环境以及哈希算法的魔改。</p><ul><li>侧重<strong>新工具、新思路、新方法</strong>的使用，算法分析的常见路子是Frida Hook + IDA ，在本系列中，会淡化Frida 的作用，采用Unidbg Hook + IDA 的路线。</li><li>主打入门，但<strong>并不限于入门</strong>，你会在样本里看到有浅有深的魔改加密算法、以及OLLVM、SO对抗等内容。</li><li>对样本的分析仅限于学习和研究，坚决抵制黑灰产。</li><li>一共十三篇，1-2天更新一篇。每篇的资料放在文末的百度网盘中。</li></ul><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210603195700688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>sign方法就是我们的目标方法，参数1是字符串，参数2是字符串的字节数组。我们设参数1是为“12345”，参数2为 “r0ysue”，在Frida中主动调用测试返回结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSign</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> NetCrypto = Java.use(<span class="string">&quot;com.izuiyou.network.NetCrypto&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> JavaString = Java.use(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> plainText = <span class="string">&quot;r0ysue&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> plainTextBytes = JavaString.$new(plainText).getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = NetCrypto.a(<span class="string">&quot;12345&quot;</span>, plainTextBytes);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603195750738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>多次变换入参可以验证，输出有如下特征</p><ul><li>输出：参数1+”?“+“sign=v2-”+32位字符串</li><li>输入不变则输出不变</li></ul><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><p>需要注意的是，在执行sign函数前需要先执行native_init函数。<br><img src="https://img-blog.csdnimg.cn/20210603195845464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>老规矩，先搭一下架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zuiyou</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    zuiyou() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xiaochuankeji.tieba&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\right573.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\libnet_crypto.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603195859810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，在JNIOnLoad中做了函数的动态注册。</p><p>此处有个值得一提的问题，如果在加载so到虚拟内存的步骤中，参数二设为false(即不执行init相关函数)，会出现有趣的一幕。<br><img src="https://img-blog.csdnimg.cn/20210603195915217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们发现，输出竟然”乱码“了，如果参数2为false即”乱码“，true就”不乱码“，这是为什么呢？甚至有人在论坛发帖求助类似问题：</p><p>[<a href="https://bbs.pediy.com/thread-266837.htm">求助]Unidbg的Jnionload 加载出的类是乱码-¥付费问答-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a> 。</p><p>其实其中的道理并不复杂，甚至可以说很简单——SO样本做了字符串的混淆或加密，以此来对抗分析人员，但字符串总是要解密的，不然怎么用呢？这个解密一般发生在Init array节或者JNI OnLoad中，又或者是该字符串使用前的任何一个时机，而本例呢，就发生在Init array节中，Shift+F7快捷键查看节区验证这一点</p><p><img src="https://img-blog.csdnimg.cn/20210603200008303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20210603200030848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们可以看到，Init array节内有大量函数，解密就发生在其中。当我们使用Unidbg模拟执行时，如果加载SO时配置为不执行Init相关函数，这导致整个SO中的字符串都没有被解密，自然输出就是一团”乱码“。</p><p>由此还可以衍生出一个小话题——如果样本中的字符串被加密了，如何还原？使得分析者可以愉快的用IDA静态分析？</p><ul><li>从内存中Dump出解密后的SO或者字符串（可以用Frida/IDA 脚本/ adb 等），将结果回填或者说修复本身SO。</li><li>使用Unicorn或基于Unicorn的模拟执行工具（Unidbg、ExAndroidNativeemu等）运行SO，dump解密后的虚拟内存，回填修复SO。</li></ul><p>言归正传，接下来执行我们的目标函数，如图这两个函数。</p><p><img src="https://img-blog.csdnimg.cn/20210603200044499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>首先是native_init函数，有过前两篇的基础，就不在此处多费口舌了，看一下更新后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zuiyou</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    zuiyou() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xiaochuankeji.tieba&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\right573.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\libnet_crypto.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 0x4a069</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a069</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">        test.native_init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行，肉眼可见的报错<br><img src="https://img-blog.csdnimg.cn/20210603200111589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>让我们用Unidbg的口吻来翻译一下这个报错：<br>我在通过 callStaticObjectMethodV 方法调用JAVA函数时，遇到一个签名叫做**com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;**的函数，我不知道怎么处理，你可以立刻到AbstractJni.java:401行上面进行查看和处理。</p><p><img src="https://img-blog.csdnimg.cn/20210603200145644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以看到，一些常见的、系统的Java类和方法，Unidbg作开发者已经做了处理，但不常使用的类库以及自定义Java类显然不在此列，所以需要我们像它内置的这些方法一样，把报错的方法补进去。</p><p>接下来开始补环境，考虑两个问题</p><ul><li>怎么补</li><li>补什么</li></ul><p>关于第一点，我们既可以根据报错提示，在AbstractJni对应的函数体内，依葫芦画瓢，case “xxx“。</p><p><img src="https://img-blog.csdnimg.cn/20210603200206135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>也可以在我们的 zuiyou 类中补，因为zuiyou类继承了AbstractJNI。</p><p>关于补法，有两种实践方法都很有道理</p><ul><li>全部在用户类中补，防止项目迁移或者Unidbg更新带来什么问题，这样做代码的移植性比较好。</li><li>样本的自定义JAVA方法在用户类中补，通用的方法在AbstractJNI中补，这样做的好处是，之后运行的项目如果调用通用方法，就不用做重复的修补工作。</li></ul><p>读者可以自行选择，我这边全部写在用户类中，方便演示， 在zuiyou类中重写callStaticObjectMethodV方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;TODO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个问题是补什么，从签名中可以看出，返回值是**Landroid/content/Context;**，即一个context对象，那我们传入一个最基本的context。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这肯定是不够用的，但没办法，只能一步一步来，就好比贵公子需要出去度假，Android系统可以提供给他一条豪华游轮，但我们的虚拟系统没法给他那么多，我们就先提供一条木船。这条小船和尊贵的客人一起出发，客人会不断去船里索取物资，他要什么，我们再补什么！我们只关注最后贵公子取的东西是什么，这个东西一定要按照豪华游轮的标准去给他，前面的汤汤水水应付完事。</p><p>看一下完整代码和运行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zuiyou</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    zuiyou() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xiaochuankeji.tieba&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\right573.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\libnet_crypto.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 0x4a069</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a069</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">        test.native_init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603200240666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>似乎一切顺利，接下来执行sign方法。字节数组以及字符串类型都是前两节遇到过的，不做赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">callSign</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 准备入参</span></span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">    list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">    list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">    ByteArray plainText = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    list.add(vm.addLocalObject(plainText));</span><br><span class="line">    Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a28D</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看一下整体代码和运行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zuiyou</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    zuiyou() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xiaochuankeji.tieba&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\right573.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\libnet_crypto.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 0x4a069</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a069</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">callSign</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 准备入参</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">        ByteArray plainText = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        list.add(vm.addLocalObject(plainText));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a28D</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">        test.native_init();</span><br><span class="line">        System.out.println(test.callSign());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20210603200356511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提示调用Context的getClass方法，找不到，所以报错了。不用怀疑，正如你想的那样，这儿的Context就是我们上面传入的Context。破罐子破摔，先重写callObjectMethodV，返回一个空的类，看贵公子下一步干什么，我们只需要最后补正确就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getClass()Ljava/lang/Class;&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> dvmObject.getObjectType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>完整代码以及运行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zuiyou</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    zuiyou() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xiaochuankeji.tieba&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\right573.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\libnet_crypto.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 0x4a069</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a069</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">callSign</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 准备入参</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">        ByteArray plainText = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        list.add(vm.addLocalObject(plainText));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a28D</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getClass()Ljava/lang/Class;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> dvmObject.getObjectType();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">        test.native_init();</span><br><span class="line">        System.out.println(test.callSign());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603200426164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这次报错，在找这个类的getSimpleName，getSimpleName是类名，比如类：com.R0ysue.test.abc，类名就是abc。</p><p>让我们捋一下完整的流程，在com/izuiyou/common/base/BaseApplication中调用getAppContext方法，获得一个Context上下文，然后getClass获取它的类，最后查看它的类名。类名就是这一系列操作的最终目的，我们前面几步都只浅浅的补了一下，只能说类型给对了，别的都没给。但只要最后的类名给它返回正确的字符串，就没问题。</p><p>使用Objection的插件 <a href="https://github.com/Simp1er/Wallbreaker">Wallbreaker</a>查看相关类（BaseApplication的getAppContext其结果以及类名）</p><p><img src="https://img-blog.csdnimg.cn/20210603200457738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210603200544548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>完整类名，cn.xiaochaunkeji.tieba.AppController，getSimpleName即AppController</p><p>修复后完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zuiyou</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    zuiyou() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.xiaochuankeji.tieba&quot;</span>).build(); <span class="comment">// 创建模拟器实例</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory(); <span class="comment">// 模拟器的内存操作接口</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>)); <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\right573.apk&quot;</span>)); <span class="comment">// 创建Android虚拟机</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\zuiyou\\libnet_crypto.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule(); <span class="comment">//获取本SO模块的句柄</span></span><br><span class="line"></span><br><span class="line">        vm.setJni(<span class="keyword">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 0x4a069</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a069</span>, list.toArray());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">callSign</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 准备入参</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。</span></span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">        ByteArray plainText = <span class="keyword">new</span> ByteArray(vm, <span class="string">&quot;r0ysue&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        list.add(vm.addLocalObject(plainText));</span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x4a28D</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethodV(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/izuiyou/common/base/BaseApplication-&gt;getAppContext()Landroid/content/Context;&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callStaticObjectMethodV(vm, dvmClass, signature, vaList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getClass()Ljava/lang/Class;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> dvmObject.getObjectType();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/lang/Class-&gt;getSimpleName()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;AppController&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">        test.native_init();</span><br><span class="line">        System.out.println(test.callSign());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续运行</p><p><img src="https://img-blog.csdnimg.cn/20210603200615988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，接下来获取了类的路径，这一步是什么意思呢？</p><p>实际上，这依然是签名校验的一部分，不管是获取类名，还是此处获取类的文件路径，都是在做校验——校验SO是否在本App内执行。”补“+”修复“循环往复，下面一连补两个签名，返回值都根据实际APP情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VaList vaList) &#123;</span><br><span class="line">     <span class="keyword">switch</span> (signature) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getClass()Ljava/lang/Class;&quot;</span>:&#123;</span><br><span class="line">             <span class="keyword">return</span> dvmObject.getObjectType();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;java/lang/Class-&gt;getSimpleName()Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;AppController&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;</span>:</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;java/lang/String-&gt;getAbsolutePath()Ljava/lang/String;&quot;</span>: &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> StringObject(vm, <span class="string">&quot;/data/user/0/cn.xiaochuankeji.tieba/files&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.callObjectMethodV(vm, dvmObject, signature, vaList);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>继续运行<br><img src="https://img-blog.csdnimg.cn/20210603200635875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>检测是否有调试，如法炮制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callStaticBooleanMethodV</span><span class="params">(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">&quot;android/os/Debug-&gt;isDebuggerConnected()Z&quot;</span>:&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(signature);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603200649928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用Unidbg 的 API返回PID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">callStaticIntMethodV</span><span class="params">(BaseVM vm, DvmClass dvmClass, String signature, VaList vaList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;android/os/Process-&gt;myPid()I&quot;</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> emulator.getPid();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(signature);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续运行</p><p><img src="https://img-blog.csdnimg.cn/20210603200703939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果与Frida主动调用结果完全一致，大功告成！但是，关于JNI环境的补充这一块，想必大家还有很多疑惑，整个过程滞涩感比较重，读者恐怕很难感受到其中的连续感。其实这是补JNI环境时都会出现的感觉，个人建议使用Frida主动调用+JNItrace实现一次完整的JNI trace。然后依照着trace做补环境的工作。但实际使用时，会遇到不少问题。比如JNItrace的attach模式有问题，spawn模式容易崩溃，且输出过多难以辨识。所以建议写Demo加载SO，然后使用JNItrace trace 结果，这是一个妥善的方法，但记得时常需要处理JNI层的签名校验，在之后我们完整的展示这个过程（事实上，还挺费事和曲折）</p><h3 id="四、算法还原"><a href="#四、算法还原" class="headerlink" title="四、算法还原"></a>四、算法还原</h3><p>因为返回值总是32位长度，且明文不变时输出也不变，很容易让人想到哈希算法，尤其是MD5算法。但是，样本经过了一定程度的OLLVM混淆，很难自上而下或者自下而上逐个模块分析代码逻辑，所以我们需要借助一下工具，当当当， FIndHash试一下。</p><p>FindHash需要运行数分钟，因为其原理是对哈希算法中的运算特征进行正则匹配，需要对函数逐个反编译，运行结束后，根据提示运行Frida脚本</p><p><img src="https://img-blog.csdnimg.cn/20210603200800539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IDA快捷键 G 跳转到65540<br><img src="https://img-blog.csdnimg.cn/20210603201520156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写对该函数的Hook，因为不确定三个参数是指针还是数值，所以先全部做为数值处理，作为long类型看待，防止整数溢出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook65540</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 加载HookZz</span></span><br><span class="line">        IHookZz hookZz = HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">        hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x65540</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 类似于 frida onEnter</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 类似于Frida args[0]</span></span><br><span class="line">                System.out.println(ctx.getR0Long());</span><br><span class="line">                System.out.println(ctx.getR1Long());</span><br><span class="line">                System.out.println(ctx.getR2Long());</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 类似于 frida onLeave</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zuiyou test = <span class="keyword">new</span> zuiyou();</span><br><span class="line">        test.hook65540();</span><br><span class="line">        test.native_init();</span><br><span class="line">        System.out.println(test.callSign());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603201601538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到，参数2应该是数组，参数1和3则像是地址。</p><p>采用如下方式打印地址所指向的内存，其效果类似于frida中hexdump。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook65540</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加载HookZz</span></span><br><span class="line">    IHookZz hookZz = HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x65540</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 类似于 frida onEnter</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 类似于Frida args[0]</span></span><br><span class="line">            Inspector.inspect(ctx.getR0Pointer().getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;Arg1&quot;</span>);</span><br><span class="line">            System.out.println(ctx.getR1Long());</span><br><span class="line">            Inspector.inspect(ctx.getR2Pointer().getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;Arg3&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 类似于 frida onLeave</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603201618717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>不要管“md5=xxx，hex=xxx”，这是Unidbg中日志输出的固定格式，千万不要当成某种hook的结果。</p><p>可以发现，参数1就是我们JAVA层传入的参数2，而参数3，意义未知。事实上，参数3大概率是Buffer，它用于存放运算的结果，这是C常用的开发习惯，大家记住就好。而参数2，长度总是和入参的字符串长度一致，所以就是长度。</p><p>在Frida中，onEnter中使用到的arg，onLeave中无法获取到，因此我们用this.xxx = args[n]的方式保存它，然后在onLeave中查看这个buffer在函数运行完后的结果。</p><p>HookZz也提供了类似的功能，在执行前，push保存，在后面再pop取出，用法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hook65540</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加载HookZz</span></span><br><span class="line">    IHookZz hookZz = HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x65540</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 类似于 frida onEnter</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 类似于Frida args[0]</span></span><br><span class="line">            Inspector.inspect(ctx.getR0Pointer().getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;Arg1&quot;</span>);</span><br><span class="line">            System.out.println(ctx.getR1Long());</span><br><span class="line">            Inspector.inspect(ctx.getR2Pointer().getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;Arg3&quot;</span>);</span><br><span class="line">            <span class="comment">// push </span></span><br><span class="line">            ctx.push(ctx.getR2Pointer());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 类似于 frida onLeave</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// pop 取出</span></span><br><span class="line">            Pointer output = ctx.pop();</span><br><span class="line">            Inspector.inspect(output.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;Arg3 after function&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021060320163974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Hook结果验证了我们的说法，参数1是输入，参数2是长度，参数3是buffer，用于存储结果。</p><p>接下来我们就要好好分析这个算法了，它疑似MD5算法，按H键将这四个数转成十六进制</p><p><img src="https://img-blog.csdnimg.cn/20210603201652289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>说它疑似MD5主要有两个依据</p><ul><li>输出结果是32位，MD5恰好也是32位长度。</li><li>有四个IV，MD5就有四个IV</li></ul><p>但是呢，它不是标准MD5，看一下标准MD5的四个IV<br><img src="https://img-blog.csdnimg.cn/20210603201748275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以发现IV不一致，我们也可以在Cyberchef中验证是否是标准MD5的结果。</p><p><img src="https://img-blog.csdnimg.cn/20210603201802820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果不一致，那么我们很可能遇到了魔改哈希算法。但不必感到惊慌，不熟悉算法原理的可以看一下SO基础课的算法部分，对原理的讲解非常深刻细致，我们这里关注于实战的部分。</p><p>哈希算法的魔改，最简单的修改点就是修改IV，此处似乎采用了这种。如下是一份python版本带注释的MD5源码，我们对应着修改一下IV，测试一下结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">SV = [<span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>,</span><br><span class="line">      <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>, <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>,</span><br><span class="line">      <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>,</span><br><span class="line">      <span class="number">0x49b40821</span>, <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>,</span><br><span class="line">      <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>, <span class="number">0x21e1cde6</span>,</span><br><span class="line">      <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>,</span><br><span class="line">      <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>, <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>,</span><br><span class="line">      <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">      <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>,</span><br><span class="line">      <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>, <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>,</span><br><span class="line">      <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>,</span><br><span class="line">      <span class="number">0x85845dd1</span>, <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>,</span><br><span class="line">      <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据ascil编码把字符转成对应的二进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binvalue</span>(<span class="params">val, bitsize</span>):</span></span><br><span class="line">    binval = <span class="built_in">bin</span>(val)[<span class="number">2</span>:] <span class="keyword">if</span> <span class="built_in">isinstance</span>(val, <span class="built_in">int</span>) <span class="keyword">else</span> <span class="built_in">bin</span>(<span class="built_in">ord</span>(val))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binval) &gt; bitsize:</span><br><span class="line">        <span class="keyword">raise</span> (<span class="string">&quot;binary value larger than the expected size&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(binval) &lt; bitsize:</span><br><span class="line">        binval = <span class="string">&quot;0&quot;</span> + binval</span><br><span class="line">    <span class="keyword">return</span> binval</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_to_bit_array</span>(<span class="params">text</span>):</span></span><br><span class="line">    array = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        binval = binvalue(char, <span class="number">8</span>)</span><br><span class="line">        array.extend([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>(binval)])</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环左移</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leftCircularShift</span>(<span class="params">k, bits</span>):</span></span><br><span class="line">    bits = bits % <span class="number">32</span></span><br><span class="line">    k = k % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    upper = (k &lt;&lt; bits) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    result = upper | (k &gt;&gt; (<span class="number">32</span> - (bits)))</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blockDivide</span>(<span class="params">block, chunks</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    size = <span class="built_in">len</span>(block) // chunks</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, chunks):</span><br><span class="line">        result.append(<span class="built_in">int</span>.from_bytes(block[i * size:(i + <span class="number">1</span>) * size], byteorder=<span class="string">&quot;little&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># F函数作用于“比特位”上</span></span><br><span class="line"><span class="comment"># if x then y else z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    compute = ((X &amp; Y) | ((~X) &amp; Z))</span><br><span class="line">    <span class="keyword">return</span> compute</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if z then x else y</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">G</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((X &amp; Z) | (Y &amp; (~Z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if X = Y then Z else ~Z</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">H</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (X ^ Y ^ Z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">I</span>(<span class="params">X, Y, Z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (Y ^ (X | (~Z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四个F函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FF</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + F(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GG</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + G(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HH</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + H(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">II</span>(<span class="params">a, b, c, d, M, s, t</span>):</span></span><br><span class="line">    result = b + leftCircularShift((a + I(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt8</span>(<span class="params">num</span>):</span></span><br><span class="line">    bighex = <span class="string">&quot;&#123;0:08x&#125;&quot;</span>.<span class="built_in">format</span>(num)</span><br><span class="line">    binver = binascii.unhexlify(bighex)</span><br><span class="line">    result = <span class="string">&quot;&#123;0:08x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>.from_bytes(binver, byteorder=<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算比特长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitlen</span>(<span class="params">bitstring</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(bitstring) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5sum</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="comment"># 计算比特长度，如果内容过长，64个比特放不下。就取低64bit。</span></span><br><span class="line">    msgLen = bitlen(msg) % (<span class="number">2</span> ** <span class="number">64</span>)</span><br><span class="line">    <span class="comment"># 先填充一个0x80，其实是先填充一个1，后面跟对应个数的0，因为一个明文的编码至少需要8比特，所以直接填充 0b10000000即0x80</span></span><br><span class="line">    msg = msg + <span class="string">b&#x27;\x80&#x27;</span>  <span class="comment"># 0x80 = 1000 0000</span></span><br><span class="line">    <span class="comment"># 似乎各种编码，即使是一个字母，都至少得1个字节，即8bit才能表示，所以不会出现原文55bit，pad1就满足的情况？可是不对呀，要是二进制文件呢？</span></span><br><span class="line">    <span class="comment"># 填充0到满足要求为止。</span></span><br><span class="line">    zeroPad = (<span class="number">448</span> - (msgLen + <span class="number">8</span>) % <span class="number">512</span>) % <span class="number">512</span></span><br><span class="line">    zeroPad //= <span class="number">8</span></span><br><span class="line">    msg = msg + <span class="string">b&#x27;\x00&#x27;</span> * zeroPad + msgLen.to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="comment"># 计算循环轮数，512个为一轮</span></span><br><span class="line">    msgLen = bitlen(msg)</span><br><span class="line">    iterations = msgLen // <span class="number">512</span></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    <span class="comment"># 算法魔改的第一个点，也是最明显的点</span></span><br><span class="line">    <span class="comment"># A = 0x67452301</span></span><br><span class="line">    <span class="comment"># B = 0xefcdab89</span></span><br><span class="line">    <span class="comment"># C = 0x98badcfe</span></span><br><span class="line">    <span class="comment"># D = 0x10325476</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 魔改IV</span></span><br><span class="line">    A = <span class="number">0x67552301</span></span><br><span class="line">    B = <span class="number">0xEDCDAB89</span></span><br><span class="line">    C = <span class="number">0x98BADEFE</span></span><br><span class="line">    D = <span class="number">0x16325476</span></span><br><span class="line">    <span class="comment"># MD5的主体就是对abcd进行n次的迭代，所以得有个初始值，可以随便选，也可以用默认的魔数，这个改起来毫无风险，所以大家爱魔改它，甚至改这个都不算魔改。</span></span><br><span class="line">    <span class="comment"># main loop</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, iterations):</span><br><span class="line">        a = A</span><br><span class="line">        b = B</span><br><span class="line">        c = C</span><br><span class="line">        d = D</span><br><span class="line">        block = msg[i * <span class="number">64</span>:(i + <span class="number">1</span>) * <span class="number">64</span>]</span><br><span class="line">        <span class="comment"># 明文的处理，顺便调整了一下端序</span></span><br><span class="line">        M = blockDivide(block, <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># Rounds</span></span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">0</span>], <span class="number">7</span>, SV[<span class="number">0</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">1</span>], <span class="number">12</span>, SV[<span class="number">1</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">2</span>], <span class="number">17</span>, SV[<span class="number">2</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">3</span>], <span class="number">22</span>, SV[<span class="number">3</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">4</span>], <span class="number">7</span>, SV[<span class="number">4</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">5</span>], <span class="number">12</span>, SV[<span class="number">5</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">6</span>], <span class="number">17</span>, SV[<span class="number">6</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">7</span>], <span class="number">22</span>, SV[<span class="number">7</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">8</span>], <span class="number">7</span>, SV[<span class="number">8</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">9</span>], <span class="number">12</span>, SV[<span class="number">9</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">10</span>], <span class="number">17</span>, SV[<span class="number">10</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">11</span>], <span class="number">22</span>, SV[<span class="number">11</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">12</span>], <span class="number">7</span>, SV[<span class="number">12</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">13</span>], <span class="number">12</span>, SV[<span class="number">13</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">14</span>], <span class="number">17</span>, SV[<span class="number">14</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">15</span>], <span class="number">22</span>, SV[<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">1</span>], <span class="number">5</span>, SV[<span class="number">16</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">6</span>], <span class="number">9</span>, SV[<span class="number">17</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">11</span>], <span class="number">14</span>, SV[<span class="number">18</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">0</span>], <span class="number">20</span>, SV[<span class="number">19</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">5</span>], <span class="number">5</span>, SV[<span class="number">20</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">10</span>], <span class="number">9</span>, SV[<span class="number">21</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">15</span>], <span class="number">14</span>, SV[<span class="number">22</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">4</span>], <span class="number">20</span>, SV[<span class="number">23</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">9</span>], <span class="number">5</span>, SV[<span class="number">24</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">14</span>], <span class="number">9</span>, SV[<span class="number">25</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">3</span>], <span class="number">14</span>, SV[<span class="number">26</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">8</span>], <span class="number">20</span>, SV[<span class="number">27</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">13</span>], <span class="number">5</span>, SV[<span class="number">28</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">2</span>], <span class="number">9</span>, SV[<span class="number">29</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">7</span>], <span class="number">14</span>, SV[<span class="number">30</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">12</span>], <span class="number">20</span>, SV[<span class="number">31</span>])</span><br><span class="line"></span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">5</span>], <span class="number">4</span>, SV[<span class="number">32</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">8</span>], <span class="number">11</span>, SV[<span class="number">33</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">11</span>], <span class="number">16</span>, SV[<span class="number">34</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">14</span>], <span class="number">23</span>, SV[<span class="number">35</span>])</span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">1</span>], <span class="number">4</span>, SV[<span class="number">36</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">4</span>], <span class="number">11</span>, SV[<span class="number">37</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">7</span>], <span class="number">16</span>, SV[<span class="number">38</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">10</span>], <span class="number">23</span>, SV[<span class="number">39</span>])</span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">13</span>], <span class="number">4</span>, SV[<span class="number">40</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">0</span>], <span class="number">11</span>, SV[<span class="number">41</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">3</span>], <span class="number">16</span>, SV[<span class="number">42</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">6</span>], <span class="number">23</span>, SV[<span class="number">43</span>])</span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">9</span>], <span class="number">4</span>, SV[<span class="number">44</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">12</span>], <span class="number">11</span>, SV[<span class="number">45</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">15</span>], <span class="number">16</span>, SV[<span class="number">46</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">2</span>], <span class="number">23</span>, SV[<span class="number">47</span>])</span><br><span class="line"></span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">0</span>], <span class="number">6</span>, SV[<span class="number">48</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">7</span>], <span class="number">10</span>, SV[<span class="number">49</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">14</span>], <span class="number">15</span>, SV[<span class="number">50</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">5</span>], <span class="number">21</span>, SV[<span class="number">51</span>])</span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">12</span>], <span class="number">6</span>, SV[<span class="number">52</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">3</span>], <span class="number">10</span>, SV[<span class="number">53</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">10</span>], <span class="number">15</span>, SV[<span class="number">54</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">1</span>], <span class="number">21</span>, SV[<span class="number">55</span>])</span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">8</span>], <span class="number">6</span>, SV[<span class="number">56</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">15</span>], <span class="number">10</span>, SV[<span class="number">57</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">6</span>], <span class="number">15</span>, SV[<span class="number">58</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">13</span>], <span class="number">21</span>, SV[<span class="number">59</span>])</span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">4</span>], <span class="number">6</span>, SV[<span class="number">60</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">11</span>], <span class="number">10</span>, SV[<span class="number">61</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">2</span>], <span class="number">15</span>, SV[<span class="number">62</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">9</span>], <span class="number">21</span>, SV[<span class="number">63</span>])</span><br><span class="line">        A = (A + a) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        B = (B + b) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        C = (C + c) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        D = (D + d) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    result = fmt8(A) + fmt8(B) + fmt8(C) + fmt8(D)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = <span class="built_in">str</span>(<span class="string">&quot;r0ysue&quot;</span>).encode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;plainText: &quot;</span>, data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span>, md5sum(data))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603201831369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结果与样本结果一致，因此可以断定，此处就是魔改且只魔改了IV的MD5算法。但我并不打算在此处结束这篇文章，我们还可以讨论更多的话题。</p><p>1.如何主动调用一个Native函数</p><p>在Frida中可以使用NativeFunction API 主动调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call_65540</span>(<span class="params">base_addr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 函数在内存中的地址</span></span><br><span class="line">    <span class="keyword">var</span> real_addr = base_addr.add(<span class="number">0x65541</span>)</span><br><span class="line">    <span class="keyword">var</span> md5_function = <span class="keyword">new</span> NativeFunction(real_addr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="comment">// 参数1 明文字符串的指针</span></span><br><span class="line">    <span class="keyword">var</span> input = <span class="string">&quot;r0ysue&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> arg1 = Memory.allocUtf8String(input);</span><br><span class="line">    <span class="comment">// 参数2 明文长度</span></span><br><span class="line">    <span class="keyword">var</span> arg2 = input.length;</span><br><span class="line">    <span class="comment">// 参数3，存放结果的buffer</span></span><br><span class="line">    <span class="keyword">var</span> arg3 = Memory.alloc(<span class="number">16</span>);</span><br><span class="line">    md5_function(arg1, arg2, arg3);</span><br><span class="line">    <span class="built_in">console</span>.log(hexdump(arg3,&#123;<span class="attr">length</span>:<span class="number">0x10</span>&#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callMd5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 确定SO 的基地址</span></span><br><span class="line">    <span class="keyword">var</span> base_addr = Module.findBaseAddress(<span class="string">&quot;libnet_crypto.so&quot;</span>);</span><br><span class="line">    call_65540(base_addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// frida -UF -l path\hookright.js</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210603201847254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在Unidbg也是类似的，只不过换一下API罢了,让我们来看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callMd5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arg1</span></span><br><span class="line">    String input = <span class="string">&quot;r0ysue&quot;</span>;</span><br><span class="line">    <span class="comment">// malloc memory</span></span><br><span class="line">    MemoryBlock memoryBlock1 = emulator.getMemory().malloc(<span class="number">16</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// get memory pointer</span></span><br><span class="line">    UnidbgPointer input_ptr=memoryBlock1.getPointer();</span><br><span class="line">    <span class="comment">// write plainText on it</span></span><br><span class="line">    input_ptr.write(input.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arg2</span></span><br><span class="line">    <span class="keyword">int</span> input_length = input.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arg3 -- buffer</span></span><br><span class="line">    MemoryBlock memoryBlock2 = emulator.getMemory().malloc(<span class="number">16</span>, <span class="keyword">false</span>);</span><br><span class="line">    UnidbgPointer output_buffer=memoryBlock2.getPointer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填入参入</span></span><br><span class="line">    list.add(input_ptr);</span><br><span class="line">    list.add(input_length);</span><br><span class="line">    list.add(output_buffer);</span><br><span class="line">    <span class="comment">// run</span></span><br><span class="line">    <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x65540</span> + <span class="number">1</span>, list.toArray());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// print arg3</span></span><br><span class="line">    Inspector.inspect(output_buffer.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;output&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意，在Unidbg中，同样的功能有至少两种实现和写法——Unicorn的原生方法以及Unidbg封装后的方法，在阅读别人代码时需要灵活变通。就好比 <strong>getR0long</strong> 和**emulator.getBackend().reg_read(ArmConst.UC_ARM_REG_R0)**，它们都是获取寄存器R0的数值。</p><p><img src="https://img-blog.csdnimg.cn/20210603201902203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在上面，我们演示了Unidbg和Frida主动调用单个Native函数的代码，千万不要小瞧它，这是很有用的技巧，尤其在Unidbg中。举个例子，一个样本较为复杂，其中包含大量JNI交互，使用Unicorn补环境使得整体跑起来非常麻烦，那我们就可以静态分析出关键函数，只模拟执行关键函数，或者从算法还原的角度上讲，单独执行待分析的函数以便减少干扰也是有用的。</p><p>第二个问题</p><p>哈希算法的IV是一个常见且简单的魔改点，在大量样本中都可以看到，事实上，它对分析者的阻挡程度很小，那么如果样本做了更深层的魔改呢？比如当我们对应着修改完IV，发现结果依然对不上，那么该怎么分析更深的魔改哈希算法呢？</p><p>这就是下一篇的样本和内容喽！</p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>凭心而论，在补JNI环境那块儿讲的有点含糊，想把此处讲清实在不容易，JNItrace是补JNI环境的利器，但它的实操体验并不顺畅。在额外的文章中，我们把这个问题讲清楚，下一篇是深度魔改哈希算法，敬请期待。</p><p>资料链接：<a href="https://pan.baidu.com/s/1/_ydXiPKgG-zpTYu8xwWG8A">https://pan.baidu.com/s/1\_ydXiPKgG-zpTYu8xwWG8A</a><br>提取码：bm0b</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程二：calculateS</title>
      <link href="/2021/05/31/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%BA%8C%EF%BC%9AcalculateS/"/>
      <url>/2021/05/31/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%BA%8C%EF%BC%9AcalculateS/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#_0"></a></li><li><ul><li><ul><li><a href="#_3">一、前言</a></li><li><a href="#_13">二、准备</a></li><li><a href="#Unidbg_18">三、Unidbg模拟执行</a></li><li><a href="#_359">四、算法分析</a></li><li><a href="#_562">五、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>这是SO逆向入门实战教程的第二篇，总共会有十三篇，十三个实战。有以下几个注意点：</p><ul><li>主打<strong>入门级</strong>的实战，适合有一定基础但缺少实战的朋友（了解JNI，也上过一些Native层逆向的课，但感觉实战匮乏，想要壮壮胆，入入门）。</li><li>侧重<strong>新工具、新思路、新方法</strong>的使用，算法分析的常见路子是Frida Hook + IDA ，在本系列中，会淡化Frida 的作用，采用Unidbg Hook + IDA 的路线。</li><li>主打入门，但<strong>并不限于入门</strong>，你会在样本里看到有浅有深的魔改加密算法、以及OLLVM、SO对抗等内容。</li><li>细，非常的细，奶妈级教学。</li><li>一共十三篇，1-2天更新一篇。每篇的资料放在文末的百度网盘中。</li></ul><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210531160521274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是我们的分析目标<br>参数一是Context上下文，参数二是传入的明文，参数三是固定的值，疑似Key或者盐。<br>返回值是8位的Sign，且输入不变的情况下，输出也固定不变。</p><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><p>IDA中打开libutility.so，先搜索一下会不会是静态绑定。<br><img src="https://img-blog.csdnimg.cn/20210531160605815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>难得遇到静态绑定的Native函数，先参数重命名，在笔者的IDA 7.5中，JNIEnv不需要导入jni.h，设置一下type就可以识别JNI函数。<br><img src="https://img-blog.csdnimg.cn/202105311606277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210531160634472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( sub_1C60(a1, context) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (*a1)-&gt;PushLocalFrame(a1, <span class="number">16</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = (*a1)-&gt;GetStringUTFChars(a1, inputKey, <span class="number">0</span>);</span><br><span class="line">    v18 = (<span class="keyword">char</span> *)(*a1)-&gt;GetStringUTFChars(a1, inputBytes, <span class="number">0</span>);</span><br><span class="line">    v7 = j_strlen(v18);</span><br><span class="line">    v8 = v7 + j_strlen(v6) + <span class="number">1</span>;</span><br><span class="line">    v9 = j_malloc(v8);</span><br><span class="line">    j_memset(v9, <span class="number">0</span>, v8);</span><br><span class="line">    j_strcpy((<span class="keyword">char</span> *)v9, v18);</span><br><span class="line">    j_strcat((<span class="keyword">char</span> *)v9, v6);</span><br><span class="line">    v10 = (_BYTE *)MDStringOld(v9);</span><br><span class="line">    v11 = (<span class="keyword">char</span> *)j_malloc(<span class="number">9u</span>);</span><br><span class="line">    *v11 = v10[<span class="number">1</span>];</span><br><span class="line">    v11[<span class="number">1</span>] = v10[<span class="number">5</span>];</span><br><span class="line">    v11[<span class="number">2</span>] = v10[<span class="number">2</span>];</span><br><span class="line">    v11[<span class="number">3</span>] = v10[<span class="number">10</span>];</span><br><span class="line">    v11[<span class="number">4</span>] = v10[<span class="number">17</span>];</span><br><span class="line">    v11[<span class="number">5</span>] = v10[<span class="number">9</span>];</span><br><span class="line">    v11[<span class="number">6</span>] = v10[<span class="number">25</span>];</span><br><span class="line">    v12 = v10[<span class="number">27</span>];</span><br><span class="line">    v11[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">    v11[<span class="number">7</span>] = v12;</span><br><span class="line">    v21 = (*a1)-&gt;FindClass(a1, <span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">    v22 = (*a1)-&gt;GetMethodID(a1, v21, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;([BLjava/lang/String;)V&quot;</span>);</span><br><span class="line">    v13 = j_strlen(v11);</span><br><span class="line">    v19 = (*a1)-&gt;NewByteArray(a1, v13);</span><br><span class="line">    v14 = j_strlen(v11);</span><br><span class="line">    (*a1)-&gt;SetByteArrayRegion(a1, v19, <span class="number">0</span>, v14, v11);</span><br><span class="line">    v15 = (*a1)-&gt;NewStringUTF(a1, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    v16 = (*a1)-&gt;NewObject(a1, v21, v22, v19, v15);</span><br><span class="line">    j_free(v11);</span><br><span class="line">    j_free(v9);</span><br><span class="line">    (*a1)-&gt;ReleaseStringUTFChars(a1, (jstring)inputBytes, v18);</span><br><span class="line">    inputBytes = (<span class="keyword">int</span>)(*a1)-&gt;PopLocalFrame(a1, v16);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    inputBytes = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> inputBytes;</span><br></pre></td></tr></table></figure><p>如果sub_1C60函数False，函数直接返回0，显然这是一条错误的逻辑，而传入的参数又是context，这很容易让人想到是一个签名校验函数。先不往下看了，上Unidbg。</p><p>同样先搭一下基础的架子，这个样本连JNI OnLoad都没有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.lession1.oasis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sina</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    sina() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.International&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\sinaInternational.apk&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        vm = emulator.createDalvikVM(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\libutility.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 打印日志</span></span><br><span class="line">        <span class="comment">// 样本连JNI OnLoad都没有</span></span><br><span class="line">        <span class="comment">// dm.callJNI_OnLoad(emulator); // 调用JNI OnLoad</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sina test = <span class="keyword">new</span> sina();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来添加一个calculateS函数，依然是地址方式调用，ARM32有Thumb和ARM两种指令模式，此处是thumb模式，所以地址要在start基础上+1。<br><img src="https://img-blog.csdnimg.cn/20210531160732536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意看代码，相较于第一讲，这里的入参有一些新情况</p><ul><li>context如何构造</li><li>字符串类型如何构造</li></ul><p>除了基本类型，比如int，long等，其他的对象类型一律要手动 addLocalObject。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">calculateS</span><span class="params">()</span></span>&#123;</span><br><span class="line">      List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">      list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">      list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">      DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);<span class="comment">// context</span></span><br><span class="line">      list.add(vm.addLocalObject(context));</span><br><span class="line">      list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">      list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;r0ysue&quot;</span>)));</span><br><span class="line"><span class="comment">// 因为代码是thumb模式，别忘了+1</span></span><br><span class="line">      Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1E7C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">      String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.lession1.oasis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sina</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    sina() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.International&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\sinaInternational.apk&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        vm = emulator.createDalvikVM(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\libutility.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 打印日志</span></span><br><span class="line">        <span class="comment">// 样本连JNI OnLoad都没有</span></span><br><span class="line">        <span class="comment">// dm.callJNI_OnLoad(emulator); // 调用JNI OnLoad</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">calculateS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;r0ysue&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1E7C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sina test = <span class="keyword">new</span> sina();</span><br><span class="line">        System.out.println(test.calculateS());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>顺嘴一提如何判断是Thumb还是Arm模式，最粗暴的方式就是试错法，比如此处不加1，指令肯定就跑偏，会报错非法指令<br><img src="https://img-blog.csdnimg.cn/20210531160756139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个办法粗鲁且有效，第二个办法是从知识角度出发，ARM模式指令总是4字节长度，Thumb指令长度多数为2字节，少部分指令是4字节。</p><p>IDA顶部选项框：Options-General<br><img src="https://img-blog.csdnimg.cn/20210531160822320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看汇编指令的机器码<br><img src="https://img-blog.csdnimg.cn/20210531160835672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们发现此处指令大多为两个字节长度，那就是Thumb。如果你还不放心，找准一行汇编，Alt+G快捷键。<br><img src="https://img-blog.csdnimg.cn/20210531160922995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">Thumb模式是1，ARM模式是0。除此之外，如果偶尔IDA反汇编出了问题，可以考虑它识别错了模式，需要Alt+G手动修改，调整模式。</p><p>言归正传，运行我们的代码。<br><img src="https://img-blog.csdnimg.cn/20210531160945216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>真恼人，竟然报错了，而且没有较为明确的提示</p><p>看一下Warn一行显示的报错所处地址<br><img src="https://img-blog.csdnimg.cn/2021053116100276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IDA快捷键G跳转到0x2c8d，看这个架势a1是JNIEnv指针<br><img src="https://img-blog.csdnimg.cn/20210531161035900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>把a1转成JNIEnv<br><img src="https://img-blog.csdnimg.cn/20210531161049243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>按X查看一下交叉引用，再往上看看，可以发现就是sub_1C60函数。从先前的分析可以看出，这个函数会返回一个值，如果为真，就继续执行，为假，就返回0。再结合此地里面找的这些类，诸如PackageManager之流，很难不让人联想到签名校验函数。</p><p>可以直接patch掉对这个函数的调用，说人话就是把这儿的函数跳转改成不跳转了呗。<br><img src="https://img-blog.csdnimg.cn/20210531161131505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>正常执行这个函数的话，如果校验没问题返回真，比如1，校验失败返回0。</p><p>根据ARM调用约定，入参前四个分别通过R0-R3调用，返回值通过R0返回，所以这儿可以通过“mov r0,1”实现我们的目标——不执行这个函数，并给出正确的返回值。除此之外还有一个幸运的地方在于，这个函数并没有产生一些之后需要使用的值或者中间变量，这让我们不需要管别的寄存器。</p><p>此处的机器码是FF F7 EB FE, 查看一下“mov r0,1”的机器码，这里我们使用<a href="https://armconverter.com/?code=mov%20r0,1">ARMConvert</a>看一下，除此之外，使用别的工具查看汇编代码也是可以的。</p><p><img src="https://img-blog.csdnimg.cn/20210531161146588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即把 FF F7 EB FE 替换成 4FF00100 即可</p><p>这个事儿我们过去用Keypatch干，用Frida 干，用010Editor干，现在用Unidbg干罢了，新瓶装旧酒！</p><p>Unidbg提供了两种方法打Patch，简单的需求可以调用Unicorn对虚拟内存进行修改，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchVerify</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> patchCode = <span class="number">0x4FF00100</span>; <span class="comment">// </span></span><br><span class="line">    emulator.getMemory().pointer(<span class="keyword">module</span>.base + <span class="number">0x1E86</span>).setInt(<span class="number">0</span>,patchCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这儿地址可别+1了，Thumb的+1只在运行和Hook时需要考虑，打Patch可别想。</p><p>看一下现在的完整代码，以及运行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.lession1.oasis;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sina</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    sina() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.International&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\sinaInternational.apk&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        vm = emulator.createDalvikVM(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\libutility.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 打印日志</span></span><br><span class="line">        <span class="comment">// 样本连JNI OnLoad都没有</span></span><br><span class="line">        <span class="comment">// dm.callJNI_OnLoad(emulator); // 调用JNI OnLoad</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">calculateS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;r0ysue&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1E7C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchVerify</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> patchCode = <span class="number">0x4FF00100</span>; <span class="comment">//</span></span><br><span class="line">        emulator.getMemory().pointer(<span class="keyword">module</span>.base + <span class="number">0x1E86</span>).setInt(<span class="number">0</span>,patchCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sina test = <span class="keyword">new</span> sina();</span><br><span class="line">        test.patchVerify();</span><br><span class="line">        System.out.println(test.calculateS());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210531161202483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接出结果了。<br>我们的Patch效果非常可，帮助我们绕过了签名校验的烦人逻辑。但有些情况下，我们可能要动态打Patch，或者我们并不想上什么网站，看MOV R0,1的机器码是什么，这时候可以使用Unidbg给我们封装的Patch方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchVerify1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Pointer pointer = UnidbgPointer.pointer(emulator, <span class="keyword">module</span>.base + <span class="number">0x1E86</span>);</span><br><span class="line">    <span class="keyword">assert</span> pointer != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] code = pointer.getByteArray(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.equals(code, <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123; (<span class="keyword">byte</span>)<span class="number">0xFF</span>, (<span class="keyword">byte</span>) <span class="number">0xF7</span>, (<span class="keyword">byte</span>) <span class="number">0xEB</span>, (<span class="keyword">byte</span>) <span class="number">0xFE</span> &#125;)) &#123; <span class="comment">// BL sub_1C60</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(Inspector.inspectString(code, <span class="string">&quot;patch32 code=&quot;</span> + Arrays.toString(code)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> (Keystone keystone = <span class="keyword">new</span> Keystone(KeystoneArchitecture.Arm, KeystoneMode.ArmThumb)) &#123;</span><br><span class="line">        KeystoneEncoded encoded = keystone.assemble(<span class="string">&quot;mov r0,1&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] patch = encoded.getMachineCode();</span><br><span class="line">        <span class="keyword">if</span> (patch.length != code.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(Inspector.inspectString(patch, <span class="string">&quot;patch32 length=&quot;</span> + patch.length));</span><br><span class="line">        &#125;</span><br><span class="line">        pointer.write(<span class="number">0</span>, patch, <span class="number">0</span>, patch.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>逻辑也非常清晰，先确认有没有找对地方，地址上是不是 FF F7 EB FE，再用Unicorn的好兄弟Keystone 把patch代码“mov r0,1”转成机器码，填进去，校验一下长度是否相等，收工。</p><h3 id="四、算法分析"><a href="#四、算法分析" class="headerlink" title="四、算法分析"></a>四、算法分析</h3><p>在第一篇中，我们使用Findhash对算法做了分析，但是纯粹用Unidbg做算法分析一定是件激动人心的事，让我们来试一下吧。<br><img src="https://img-blog.csdnimg.cn/20210531161250473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码的逻辑非常简单，将text和key拼接起来，然后放到MDStringOld函数中，出来的结果，从中分别抽出第1位（从0开始），第5位，等8位，就是结果了。</p><p>所以这个时候我们的关注点就是MDStringOld函数，首要的就是获取它的参数和返回值。</p><ul><li><p>它的参数可以验证我们对MDStringOld函数前面的分析有没有出错</p></li><li><p>它的返回值可以验证我们对MDStringOld函数后面和结果的分析有没有出错</p></li></ul><p>这个函数的地址是0x1BD0+1<br><img src="https://img-blog.csdnimg.cn/20210531161309414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果是Frida动态分析，我们会通过如下方式Hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookMDStringOld</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseAddr = Module.findBaseAddress(<span class="string">&quot;libutility.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> MDStringOld = baseAddr.add(<span class="number">0x1BD0</span>).add(<span class="number">0x1</span>)</span><br><span class="line">    Interceptor.attach(MDStringOld, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;input:\n&quot;</span>, hexdump(<span class="built_in">this</span>.arg0))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="function"><span class="keyword">function</span> (<span class="params">retval</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;result:\n&quot;</span>, hexdump(retval))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在Unidbg中，我们该怎么做呢</p><p>Unidbg内嵌了多种Hook工具，目前主要是四种</p><ul><li>Dobby</li><li>HookZz</li><li>xHook</li><li>Whale</li></ul><p>但我们没必要四种都学</p><p>xHook 是爱奇艺开源的基于PLT HOOK的Hook框架，它无法Hook不在符号表里的函数，也不支持inline hook，这在我们的逆向分析中是无法忍受的，所以在这里不去理会它。</p><p>Whale 在Unidbg的测试用例中只有对符号表函数的Hook，没看到Inline Hook 或者 非导出函数的Hook，所以也不去考虑。</p><p>HookZz是Dobby的前身，两者都可以Hook 非导出表中的函数，即IDA中显示为sub_xxx的函数，也都可以进行inline hook，所以二选一就行了。我喜欢HookZz这个名字，所以就HookZz了。</p><p>使用HookZz hook MDStringOld函数，MDStringOld是导出函数，可以传入符号名，解析地址，但管他什么findsymbol，findExport呢，我就认准地址，地址，yyds。</p><p>看一下完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.Arm32RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.hookzz.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.utils.Inspector;</span><br><span class="line"><span class="keyword">import</span> com.lession1.oasis;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Pointer;</span><br><span class="line"><span class="keyword">import</span> keystone.Keystone;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneArchitecture;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneEncoded;</span><br><span class="line"><span class="keyword">import</span> keystone.KeystoneMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sina</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    sina() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.International&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\sinaInternational.apk&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        vm = emulator.createDalvikVM(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession2\\libutility.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 打印日志</span></span><br><span class="line">        <span class="comment">// 样本连JNI OnLoad都没有</span></span><br><span class="line">        <span class="comment">// dm.callJNI_OnLoad(emulator); // 调用JNI OnLoad</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">calculateS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">// 第一个参数是env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">// 第二个参数，实例方法是jobject，静态方法是jclazz，直接填0，一般用不到。</span></span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="keyword">null</span>);<span class="comment">// context</span></span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;12345&quot;</span>)));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> StringObject(vm, <span class="string">&quot;r0ysue&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x1E7C</span> + <span class="number">1</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchVerify</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> patchCode = <span class="number">0x4FF00100</span>; <span class="comment">//</span></span><br><span class="line">        emulator.getMemory().pointer(<span class="keyword">module</span>.base + <span class="number">0x1E86</span>).setInt(<span class="number">0</span>,patchCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchVerify1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Pointer pointer = UnidbgPointer.pointer(emulator, <span class="keyword">module</span>.base + <span class="number">0x1E86</span>);</span><br><span class="line">        <span class="keyword">assert</span> pointer != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] code = pointer.getByteArray(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (!Arrays.equals(code, <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123; (<span class="keyword">byte</span>)<span class="number">0xFF</span>, (<span class="keyword">byte</span>) <span class="number">0xF7</span>, (<span class="keyword">byte</span>) <span class="number">0xEB</span>, (<span class="keyword">byte</span>) <span class="number">0xFE</span> &#125;)) &#123; <span class="comment">// BL sub_1C60</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(Inspector.inspectString(code, <span class="string">&quot;patch32 code=&quot;</span> + Arrays.toString(code)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (Keystone keystone = <span class="keyword">new</span> Keystone(KeystoneArchitecture.Arm, KeystoneMode.ArmThumb)) &#123;</span><br><span class="line">            KeystoneEncoded encoded = keystone.assemble(<span class="string">&quot;mov r0,1&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] patch = encoded.getMachineCode();</span><br><span class="line">            <span class="keyword">if</span> (patch.length != code.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(Inspector.inspectString(patch, <span class="string">&quot;patch32 length=&quot;</span> + patch.length));</span><br><span class="line">            &#125;</span><br><span class="line">            pointer.write(<span class="number">0</span>, patch, <span class="number">0</span>, patch.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HookMDStringold</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 加载HookZz</span></span><br><span class="line">        IHookZz hookZz = HookZz.getInstance(emulator);</span><br><span class="line"></span><br><span class="line">        hookZz.wrap(<span class="keyword">module</span>.base + <span class="number">0x1BD0</span> + <span class="number">1</span>, <span class="keyword">new</span> WrapCallback&lt;HookZzArm32RegisterContext&gt;() &#123; <span class="comment">// inline wrap导出函数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 类似于 frida onEnter</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 类似于Frida args[0]</span></span><br><span class="line">                Pointer input = ctx.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;input:&quot;</span> + input.getString(<span class="number">0</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// 类似于 frida onLeave</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info)</span> </span>&#123;</span><br><span class="line">                Pointer result = ctx.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;input:&quot;</span> + result.getString(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sina test = <span class="keyword">new</span> sina();</span><br><span class="line"><span class="comment">//        test.patchVerify();</span></span><br><span class="line">        test.patchVerify1();</span><br><span class="line">        test.HookMDStringold();</span><br><span class="line">        System.out.println(test.calculateS());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20210531161334496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以发现，入参就是text+key</p><p>验证返回值：439a333788b0cecfce1389d4b83ba1cb</p><p><img src="https://img-blog.csdnimg.cn/20210531161345888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = 439a333788b0cecfce1389d4b83ba1cb </span><br><span class="line"></span><br><span class="line">result[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line">result[<span class="number">5</span>] = <span class="number">3</span></span><br><span class="line">result[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">result[<span class="number">10</span>] = b</span><br></pre></td></tr></table></figure><p>验证发现我们关于结果来源的猜想也完全正确。</p><p>那么接下来的焦点就是MDStringOld函数了，因为结果是32位，我们首先想到MD5函数，验证一下。</p><p><img src="https://img-blog.csdnimg.cn/20210531161412844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果完全一致。</p><p>NICE，大功告成。</p><h3 id="五、尾声"><a href="#五、尾声" class="headerlink" title="五、尾声"></a>五、尾声</h3><p>这个样本十分简单，但让我们更多的理解了Unidbg的功能，下一讲中，让我们解锁更难的样本，探索Unidbg更多功能吧！</p><p>样本百度网盘：<a href="https://pan.baidu.com/s/18/_WCIb/_KaKCAgxLj/_1bLMA">https://pan.baidu.com/s/18\_WCIb\_KaKCAgxLj\_1bLMA</a> 提取码：k1f3</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SO逆向入门实战教程一：OASIS</title>
      <link href="/2021/05/31/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B8%80%EF%BC%9AOASIS/"/>
      <url>/2021/05/31/(%E8%BD%AC)SO%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B%E4%B8%80%EF%BC%9AOASIS/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#_0"></a></li><li><ul><li><ul><li><a href="#_3">一、前言</a></li><li><a href="#_13">二、准备</a></li><li><a href="#Unidbg_46">三、Unidbg模拟执行</a></li><li><a href="#ExAndroidNativeEmu__217">四、ExAndroidNativeEmu 模拟执行</a></li><li><a href="#_267">五、算法分析</a></li><li><a href="#_331">六、尾声</a></li></ul></li></ul></li></ul><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>这是SO逆向入门实战教程的第一篇，总共会有十三篇，十三个实战。有以下几个注意点：</p><ul><li>主打<strong>入门级</strong>的实战，适合有一定基础但缺少实战的朋友（了解JNI，也上过一些Native层逆向的课，但感觉实战匮乏，想要壮壮胆，入入门）。</li><li>侧重<strong>新工具、新思路、新方法</strong>的使用，算法分析的常见路子是Frida Hook + IDA ，在本系列中，会淡化Frida 的作用，采用Unidbg Hook + IDA 的路线。</li><li>主打入门，但<strong>并不限于入门</strong>，你会在样本里看到有浅有深的魔改加密算法、以及OLLVM、SO对抗等内容。</li><li>细，非常的细，奶妈级教学。</li><li>一共十三篇，1-2天更新一篇。每篇的资料放在文末的百度网盘中。另外，我创建了一个Unidbg学习交流群，欢迎私聊我入群玩耍。</li></ul><h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><p><img src="https://img-blog.csdnimg.cn/20210531155613610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>s方法就是我们的分析目标，它接收两个参数。参数1是字节数组，参数二是布尔值，为false。伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oasis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String input1 = <span class="string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B529501&quot;</span> +</span><br><span class="line">                <span class="string">&quot;0&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1&quot;</span> +</span><br><span class="line">                <span class="string">&quot;X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp&quot;</span> +</span><br><span class="line">                <span class="string">&quot;=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8_&quot;</span> +</span><br><span class="line">                <span class="string">&quot;_Android__Android10&amp;version=3.5.8&amp;vid=10190135&quot;</span> +</span><br><span class="line">                <span class="string">&quot;94003&amp;wm=20004_90024&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Boolean input2 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        oasis test = <span class="keyword">new</span> oasis();</span><br><span class="line">        String sign = test.s(input1.getBytes(StandardCharsets.UTF_8), input2);</span><br><span class="line">        System.out.println(sign);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">s</span><span class="params">(<span class="keyword">byte</span>[] barr, <span class="keyword">boolean</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sign&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值是32位的Sign，比如伪代码中的输入，返回<strong>3882b522d0c62171d51094914032d5ea</strong> ，且输入不变的情况下，输出也固定不变。</p><h3 id="三、Unidbg模拟执行"><a href="#三、Unidbg模拟执行" class="headerlink" title="三、Unidbg模拟执行"></a>三、Unidbg模拟执行</h3><p>目标函数的实现在liboasiscore.so中，在IDA中看一下<br><img src="https://img-blog.csdnimg.cn/20210531155654545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>似乎并不是静态绑定，接下来去JNI OnLoad查看一下动态绑定的位置。</p><p><img src="https://img-blog.csdnimg.cn/20210531155709508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>很不幸的是，这个样本经过了OLLVM混淆，很难直接找到动态绑定的地址。</p><p>在以Frida为主的路子里，我们可以使用<a href="https://github.com/lasting-yang/frida_hook_libart/blob/master/hook_RegisterNatives.js">hook_RegisterNatives</a>脚本得到动态绑定的地址，但这里我们采用Unidbg的方案。</p><p>下载Unidbg最新版，在IDEA中打开，跑通如图例子，和图示一致即可。</p><p><img src="https://img-blog.csdnimg.cn/2021053115572159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>首先搭一个架子，新建包和类，并把APK和SO资源放在目录下</p><p><img src="https://img-blog.csdnimg.cn/20210531155731105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>首先导入通用且标准的类库，然后一步步往下，如下写了注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承AbstractJni类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oasis</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    oasis() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.oasis&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession1\\lvzhou.apk&quot;</span>));</span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession1\\liboasiscore.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 打印日志</span></span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator); <span class="comment">// 调用JNI OnLoad</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        oasis test = <span class="keyword">new</span> oasis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>样本的init相关函数和JNI OnLoad函数已经运行过了，接下来Run<br><img src="https://img-blog.csdnimg.cn/20210531155819986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>日志中可以发现，JNI OnLoad中主要做了两件事</p><ul><li>签名校验</li><li>动态绑定</li></ul><p>值得一提的是，如果创建Android虚拟机时，选择不传入APK，填入null，那么样本在JNI OnLoad中所做的签名校验，就需要我们手动补环境校验了。</p><p><img src="https://img-blog.csdnimg.cn/2021053115583524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来就是如何执行我们目标函数的问题了，这并不是一个小问题。Unidbg封装了相关方法执行JNI函数以及有符号函数等，但需要区分类方法和实例方法，我觉得有些别扭，在Frida的使用过程中，通过地址直接Hook和Call是一种非常美妙的体验，所以这里我们只介绍通过地址模拟执行这个更一般和通用的法子，如果对前一种方法感兴趣，可以看Unidbg提供的相关测试代码。</p><p>字节数组需要裹上unidbg的包装类，并加到本地变量里，两件事缺一不可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lession1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入通用且标准的类库</span></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ByteArray;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承AbstractJni类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oasis</span> <span class="keyword">extends</span> <span class="title">AbstractJni</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    oasis() &#123;</span><br><span class="line">        <span class="comment">// 创建模拟器实例,进程名建议依照实际进程名填写，可以规避针对进程名的校验</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.sina.oasis&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 获取模拟器的内存操作接口</span></span><br><span class="line">        <span class="keyword">final</span> Memory memory = emulator.getMemory();</span><br><span class="line">        <span class="comment">// 设置系统类库解析</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> AndroidResolver(<span class="number">23</span>));</span><br><span class="line">        <span class="comment">// 创建Android虚拟机,传入APK，Unidbg可以替我们做部分签名校验的工作</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession1\\lvzhou.apk&quot;</span>));</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        vm = emulator.createDalvikVM(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载目标SO</span></span><br><span class="line">        DalvikModule dm = vm.loadLibrary(<span class="keyword">new</span> File(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\lession1\\liboasiscore.so&quot;</span>), <span class="keyword">true</span>); <span class="comment">// 加载so到虚拟内存</span></span><br><span class="line">        <span class="comment">//获取本SO模块的句柄,后续需要用它</span></span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        vm.setJni(<span class="keyword">this</span>); <span class="comment">// 设置JNI</span></span><br><span class="line">        vm.setVerbose(<span class="keyword">true</span>); <span class="comment">// 打印日志</span></span><br><span class="line"></span><br><span class="line">        dm.callJNI_OnLoad(emulator); <span class="comment">// 调用JNI OnLoad</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        oasis test = <span class="keyword">new</span> oasis();</span><br><span class="line">        System.out.println(test.getS());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// args list</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// arg1 env</span></span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        <span class="comment">// arg2 jobject/jclazz 一般用不到，直接填0</span></span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// arg3 bytes</span></span><br><span class="line">        String input = <span class="string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B529501&quot;</span> +</span><br><span class="line">                <span class="string">&quot;0&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1&quot;</span> +</span><br><span class="line">                <span class="string">&quot;X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp&quot;</span> +</span><br><span class="line">                <span class="string">&quot;=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8_&quot;</span> +</span><br><span class="line">                <span class="string">&quot;_Android__Android10&amp;version=3.5.8&amp;vid=10190135&quot;</span> +</span><br><span class="line">                <span class="string">&quot;94003&amp;wm=20004_90024&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] inputByte = input.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        ByteArray inputByteArray = <span class="keyword">new</span> ByteArray(vm,inputByte);</span><br><span class="line">        list.add(vm.addLocalObject(inputByteArray));</span><br><span class="line">        <span class="comment">// arg4 ,boolean false 填入0</span></span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 参数准备完成</span></span><br><span class="line">        <span class="comment">// call function</span></span><br><span class="line">        Number number = <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xC365</span>, list.toArray())[<span class="number">0</span>];</span><br><span class="line">        String result = vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现，通过地址方式调用，似乎有一点点麻烦，但这个麻烦其实并不大，我们常常需要对未导出函数进行分析，与其一会儿用符号名调用，一会儿用地址，不如统一用地址嘛。</p><p>运行测试<br><img src="https://img-blog.csdnimg.cn/20210531155907571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>结果与Hook得到的一致，即模拟执行顺利完成。</p><h3 id="四、ExAndroidNativeEmu-模拟执行"><a href="#四、ExAndroidNativeEmu-模拟执行" class="headerlink" title="四、ExAndroidNativeEmu 模拟执行"></a>四、ExAndroidNativeEmu 模拟执行</h3><p>这个样本非常简单，我们用<a href="https://github.com/maiyao1988/ExAndroidNativeEmu">ExAndroidNativeEmu</a>来梅开二度。如果说Unidbg是小号游轮，那么ExAndroidNativeEmu就是皮划艇。在此处皮划艇可有可无，我们只是做个演示，但有时非皮划艇不可，遇到了我们再说。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> posixpath</span><br><span class="line"><span class="keyword">from</span> androidemu.emulator <span class="keyword">import</span> Emulator, logger</span><br><span class="line"><span class="keyword">from</span> androidemu.java.classes.string <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize emulator</span></span><br><span class="line">emulator = Emulator(</span><br><span class="line">    vfp_inst_set=<span class="literal">True</span>,</span><br><span class="line">    vfs_root=posixpath.join(posixpath.dirname(__file__), <span class="string">&quot;vfs&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载SO</span></span><br><span class="line">lib_module = emulator.load_library(<span class="string">&quot;tests/bin/liboasiscore.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find My module</span></span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> emulator.modules:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;liboasiscore&quot;</span> <span class="keyword">in</span> module.filename:</span><br><span class="line">        base_address = module.base</span><br><span class="line">        logger.info(<span class="string">&quot;base_address=&gt; 0x%08x - %s&quot;</span> % (module.base, module.filename))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run jni onload</span></span><br><span class="line">emulator.call_symbol(lib_module, <span class="string">&#x27;JNI_OnLoad&#x27;</span>, emulator.java_vm.address_ptr, <span class="number">0x00</span>)</span><br><span class="line"><span class="comment"># 准备参数</span></span><br><span class="line">a1 = <span class="string">&quot;aid=01A-khBWIm48A079Pz_DMW6PyZR8uyTumcCNm4e8awxyC2ANU.&amp;cfrom=28B5295010&amp;cuid=5999578300&amp;noncestr=46274W9279Hr1X49A5X058z7ZVz024&amp;platform=ANDROID&amp;timestamp=1621437643609&amp;ua=Xiaomi-MIX2S__oasis__3.5.8__Android__Android10&amp;version=3.5.8&amp;vid=1019013594003&amp;wm=20004_90024&quot;</span></span><br><span class="line"><span class="comment"># 通过地址直接调用</span></span><br><span class="line">result = emulator.call_native(module.base + <span class="number">0xC364</span> + <span class="number">1</span>, emulator.java_vm.jni_env.address_ptr, <span class="number">0x00</span>, String(a1).getBytes(emulator, String(<span class="string">&quot;utf-8&quot;</span>)), <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result:&quot;</span>+ result._String__str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ExAndroidNativeEmu同样提供了对JNI函数的调用封装，但我们这边依然用地址方式调用，就是不用，就是玩儿。</p><p><img src="https://img-blog.csdnimg.cn/20210531155954393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以发现结果也很顺利，在这个样本上，Unidbg和ExAndroidNativeEmu 都能很轻松的处理，其中ExAndroidNativeEmu的代码量甚至更少一些，这得益于样本中和JAVA层的交互极少，一旦涉及到JNI交互，皮划艇就让人难受了，在Python中补JAVA的逻辑，简直不是人该受的委屈。</p><p>但ExAndroidNativeEmu 也有它的用武之地</p><ul><li>代码量较少，适合学习和分析，可以方便的结合自己的知识和业务增删功能。</li><li>在样本比较简单的情况下（即与JAVA交互少，系统调用少，一切都少，只是纯粹的Native运算）甚至比Unidbg更好用。</li><li>ExAndroidNativeemu的code trace做的比Unidbg好很多，在指令的trace上做了非常多的优化。</li></ul><h3 id="五、算法分析"><a href="#五、算法分析" class="headerlink" title="五、算法分析"></a>五、算法分析</h3><p>因为这是个简单的样本，输出又是32位，很容易就让人联想到哈希算法，掏出<a href="https://github.com/Pr0214/findhash">FindHash</a>跑一下。</p><p><img src="https://img-blog.csdnimg.cn/20210531160035569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行FindHash提示的脚本，根据输出找到对应的函数并分析，很快就定位到0x8AB2这个函数，并且它是MD5_Update函数。如果对各类算法的原理缺少了解，可以看一下R0ysue的SO基础课哟，手算MD5/SHA1/DES/AES +工程实践+逆向分析，就等你来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_md5_update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> targetSo = Module.findBaseAddress(<span class="string">&quot;liboasiscore.so&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> relativePtr = <span class="number">0x8AB2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Enter&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> funcPtr = targetSo.add(relativePtr);</span><br><span class="line">    Interceptor.attach(funcPtr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="built_in">console</span>.log(hexdump(args[<span class="number">1</span>],&#123;<span class="attr">length</span>:args[<span class="number">2</span>].toInt32()&#125;));</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="function"><span class="keyword">function</span> (<span class="params">retval</span>)</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hook结果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  <span class="number">0123456789</span>ABCDEF</span><br><span class="line">b2fa5800  <span class="number">59</span> <span class="number">50</span> <span class="number">31</span> <span class="number">56</span> <span class="number">74</span> <span class="number">79</span> <span class="number">26</span> <span class="number">24</span> <span class="number">58</span> <span class="number">6</span>d <span class="number">2</span>a <span class="number">6</span>b <span class="number">4</span>a <span class="number">6</span>b <span class="number">6</span>f <span class="number">52</span>  YP1Vty&amp;<span class="variable">$Xm</span>*kJkoR</span><br><span class="line">b2fa5810  <span class="number">2</span>c <span class="number">4</span>f <span class="number">70</span> <span class="number">6</span>b <span class="number">26</span> <span class="number">61</span> <span class="number">69</span> <span class="number">64</span> <span class="number">3</span>d <span class="number">30</span> <span class="number">31</span> <span class="number">41</span> <span class="number">2</span>d <span class="number">6</span>b <span class="number">68</span> <span class="number">42</span>  ,Opk&amp;aid=<span class="number">01</span>A<span class="literal">-khB</span></span><br><span class="line">b2fa5820  <span class="number">57</span> <span class="number">49</span> <span class="number">6</span>d <span class="number">34</span> <span class="number">38</span> <span class="number">41</span> <span class="number">30</span> <span class="number">37</span> <span class="number">39</span> <span class="number">50</span> <span class="number">7</span>a <span class="number">5</span>f <span class="number">44</span> <span class="number">4</span>d <span class="number">57</span> <span class="number">36</span>  WIm48A079Pz_DMW6</span><br><span class="line">b2fa5830  <span class="number">50</span> <span class="number">79</span> <span class="number">5</span>a <span class="number">52</span> <span class="number">38</span> <span class="number">75</span> <span class="number">79</span> <span class="number">54</span> <span class="number">75</span> <span class="number">6</span>d <span class="number">63</span> <span class="number">43</span> <span class="number">4</span>e <span class="number">6</span>d <span class="number">34</span> <span class="number">65</span>  PyZR8uyTumcCNm4e</span><br><span class="line">b2fa5840  <span class="number">38</span> <span class="number">61</span> <span class="number">77</span> <span class="number">78</span> <span class="number">79</span> <span class="number">43</span> <span class="number">32</span> <span class="number">41</span> <span class="number">4</span>e <span class="number">55</span> <span class="number">2</span>e <span class="number">26</span> <span class="number">63</span> <span class="number">66</span> <span class="number">72</span> <span class="number">6</span>f  <span class="number">8</span>awxyC2ANU.&amp;cfro</span><br><span class="line">b2fa5850  <span class="number">6</span>d <span class="number">3</span>d <span class="number">32</span> <span class="number">38</span> <span class="number">42</span> <span class="number">35</span> <span class="number">32</span> <span class="number">39</span> <span class="number">35</span> <span class="number">30</span> <span class="number">31</span> <span class="number">30</span> <span class="number">26</span> <span class="number">63</span> <span class="number">75</span> <span class="number">69</span>  m=<span class="number">28</span>B5295010&amp;cui</span><br><span class="line">b2fa5860  <span class="number">64</span> <span class="number">3</span>d <span class="number">35</span> <span class="number">39</span> <span class="number">39</span> <span class="number">39</span> <span class="number">35</span> <span class="number">37</span> <span class="number">38</span> <span class="number">33</span> <span class="number">30</span> <span class="number">30</span> <span class="number">26</span> <span class="number">6</span>e <span class="number">6</span>f <span class="number">6</span>e  d=<span class="number">5999578300</span>&amp;non</span><br><span class="line">b2fa5870  <span class="number">63</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> <span class="number">72</span> <span class="number">3</span>d <span class="number">4</span>a <span class="number">32</span> <span class="number">33</span> <span class="number">33</span> <span class="number">39</span> <span class="number">67</span> <span class="number">41</span> <span class="number">43</span> <span class="number">79</span> <span class="number">30</span>  cestr=J2339gACy0</span><br><span class="line">b2fa5880  <span class="number">44</span> <span class="number">35</span> <span class="number">6</span>b <span class="number">33</span> <span class="number">32</span> <span class="number">39</span> <span class="number">35</span> <span class="number">33</span> <span class="number">71</span> <span class="number">30</span> <span class="number">31</span> <span class="number">67</span> <span class="number">74</span> <span class="number">66</span> <span class="number">36</span> <span class="number">78</span>  D5k32953q01gtf6x</span><br><span class="line">b2fa5890  <span class="number">30</span> <span class="number">38</span> <span class="number">31</span> <span class="number">39</span> <span class="number">26</span> <span class="number">70</span> <span class="number">6</span>c <span class="number">61</span> <span class="number">74</span> <span class="number">66</span> <span class="number">6</span>f <span class="number">72</span> <span class="number">6</span>d <span class="number">3</span>d <span class="number">41</span> <span class="number">4</span>e  <span class="number">0819</span>&amp;platform=AN</span><br><span class="line">b2fa58a0  <span class="number">44</span> <span class="number">52</span> <span class="number">4</span>f <span class="number">49</span> <span class="number">44</span> <span class="number">26</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6</span>d <span class="number">65</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">6</span>d <span class="number">70</span> <span class="number">3</span>d  DROID&amp;timestamp=</span><br><span class="line">b2fa58b0  <span class="number">31</span> <span class="number">36</span> <span class="number">32</span> <span class="number">31</span> <span class="number">35</span> <span class="number">32</span> <span class="number">36</span> <span class="number">32</span> <span class="number">39</span> <span class="number">38</span> <span class="number">31</span> <span class="number">32</span> <span class="number">37</span> <span class="number">26</span> <span class="number">75</span> <span class="number">61</span>  <span class="number">1621526298127</span>&amp;ua</span><br><span class="line">b2fa58c0  <span class="number">3</span>d <span class="number">58</span> <span class="number">69</span> <span class="number">61</span> <span class="number">6</span>f <span class="number">6</span>d <span class="number">69</span> <span class="number">2</span>d <span class="number">4</span>d <span class="number">49</span> <span class="number">58</span> <span class="number">32</span> <span class="number">53</span> <span class="number">5</span>f <span class="number">5</span>f <span class="number">6</span>f  =Xiaomi<span class="literal">-MIX2S__o</span></span><br><span class="line">b2fa58d0  <span class="number">61</span> <span class="number">73</span> <span class="number">69</span> <span class="number">73</span> <span class="number">5</span>f <span class="number">5</span>f <span class="number">33</span> <span class="number">2</span>e <span class="number">35</span> <span class="number">2</span>e <span class="number">38</span> <span class="number">5</span>f <span class="number">5</span>f <span class="number">41</span> <span class="number">6</span>e <span class="number">64</span>  asis__3.<span class="number">5.8</span>__And</span><br><span class="line">b2fa58e0  <span class="number">72</span> <span class="number">6</span>f <span class="number">69</span> <span class="number">64</span> <span class="number">5</span>f <span class="number">5</span>f <span class="number">41</span> <span class="number">6</span>e <span class="number">64</span> <span class="number">72</span> <span class="number">6</span>f <span class="number">69</span> <span class="number">64</span> <span class="number">31</span> <span class="number">30</span> <span class="number">26</span>  roid__Android10&amp;</span><br><span class="line">b2fa58f0  <span class="number">76</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">69</span> <span class="number">6</span>f <span class="number">6</span>e <span class="number">3</span>d <span class="number">33</span> <span class="number">2</span>e <span class="number">35</span> <span class="number">2</span>e <span class="number">38</span> <span class="number">26</span> <span class="number">76</span> <span class="number">69</span>  version=<span class="number">3.5</span>.<span class="number">8</span>&amp;vi</span><br><span class="line">b2fa5900  <span class="number">64</span> <span class="number">3</span>d <span class="number">31</span> <span class="number">30</span> <span class="number">31</span> <span class="number">39</span> <span class="number">30</span> <span class="number">31</span> <span class="number">33</span> <span class="number">35</span> <span class="number">39</span> <span class="number">34</span> <span class="number">30</span> <span class="number">30</span> <span class="number">33</span> <span class="number">26</span>  d=<span class="number">1019013594003</span>&amp;</span><br><span class="line">b2fa5910  <span class="number">77</span> <span class="number">6</span>d <span class="number">3</span>d <span class="number">32</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">34</span> <span class="number">5</span>f <span class="number">39</span> <span class="number">30</span> <span class="number">30</span> <span class="number">32</span> <span class="number">34</span>        wm=<span class="number">20004</span>_90024</span><br><span class="line"><span class="number">0</span>x1a</span><br><span class="line">           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  <span class="number">0123456789</span>ABCDEF</span><br><span class="line">bbe3c322  <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ................</span><br><span class="line">bbe3c332  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>                    ..........</span><br><span class="line"><span class="number">0</span>x8</span><br><span class="line">           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  <span class="number">0123456789</span>ABCDEF</span><br><span class="line">bae15ed8  f0 <span class="number">08</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure><p>MD5 Update一共被调用了三次，需要注意的是，MD5的Update的后两次调用，都是数据的填充，属于算法内部细节，所以我们只用关注第一次的输出。</p><p>我们的明文是从aid开始的，前面多了一块，这一块每次运行都不变，所以猜测它是盐，使用逆向之友<a href="https://gchq.github.io/CyberChef/#recipe=MD5()&input=WVAxVnR5JiRYbSprSmtvUixPcGsmYWlkPTAxQS1raEJXSW00OEEwNzlQel9ETVc2UHlaUjh1eVR1bWNDTm00ZThhd3h5QzJBTlUuJmNmcm9tPTI4QjUyOTUwMTAmY3VpZD01OTk5NTc4MzAwJm5vbmNlc3RyPTQ2Mjc0VzkyNzlIcjFYNDlBNVgwNTh6N1pWejAyNCZwbGF0Zm9ybT1BTkRST0lEJnRpbWVzdGFtcD0xNjIxNDM3NjQzNjA5JnVhPVhpYW9taS1NSVgyU19fb2FzaXNfXzMuNS44X19BbmRyb2lkX19BbmRyb2lkMTAmdmVyc2lvbj0zLjUuOCZ2aWQ9MTAxOTAxMzU5NDAwMyZ3bT0yMDAwNF85MDAyNA">Cyberchef</a> 测试一下:</p><p><img src="https://img-blog.csdnimg.cn/20210531160124720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4ODUxNTM2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>大功告成！</p><h3 id="六、尾声"><a href="#六、尾声" class="headerlink" title="六、尾声"></a>六、尾声</h3><p>这是一个非常简单的样本，用于熟悉Unidbg的简单操作。下一讲会复杂一点点的，熟悉Unidbg的更多基础操作。</p><p>样本百度网盘：<a href="https://pan.baidu.com/s/1eg7FRtbKkD2ZEh6nARBK7w">https://pan.baidu.com/s/1eg7FRtbKkD2ZEh6nARBK7w</a> 提取码：yh5h</p>]]></content>
      
      
      <categories>
          
          <category> SO逆向实战十三篇 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
